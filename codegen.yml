overwrite: true
hooks:
  afterAllFileWrite:
    - prettier --write
ignoreNoDocuments: true
schema:
  - './packages/schema/src/**/*.graphql'
generates:
  ./packages/schema/src/__generated__/types.ts:
    plugins:
      - typescript
      - typescript-resolvers
      - './codegen-typedefs.js'
    config:
      useTypeImports: true
      enumsAsTypes: true
      useImplementingTypes: true
      mappers:
        Profile: '@azzapp/data#Profile as ProfileModel'
        ModuleBackground: '@azzapp/data#ModuleBackground as ModuleBackgroundModel'
        MediaImage: ../query/MediaResolvers#MediaResolverBaseType as MediaImageModel
        MediaVideo: ../query/MediaResolvers#MediaResolverBaseType as MediaVideoModel
        Post: '@azzapp/data#Post as PostModel'
        PostComment: '@azzapp/data#PostComment as PostCommentModel'
        CardTemplate: '@azzapp/data#CardTemplate as CardTemplateModel'
        CardTemplateType: '@azzapp/data#CardTemplateType as CardTemplateTypeModel'
        CoverTemplate: '@azzapp/data#CoverTemplate as CoverTemplateModel'
        CoverTemplateType: '@azzapp/data#CoverTemplateType as CoverTemplateTypeModel'
        CoverTemplateTag: '@azzapp/data#CoverTemplateTag as CoverTemplateTagModel'
        CoverPredefined: '@azzapp/data#CoverPredefined as CoverPredefinedModel'
        CardCover: '@azzapp/data#WebCard as WebCardModel'
        CardModule: '@azzapp/data#CardModule as CardModuleModel'
        CardModuleCarousel: '@azzapp/data#CardModuleCarousel as CardModuleCarouselModel'
        CardModuleHorizontalPhoto: '@azzapp/data#CardModuleHorizontalPhoto as CardModuleHorizontalPhotoModel'
        CardModuleSimpleText: '@azzapp/data#CardModuleSimpleText as CardModuleSimpleTextModel'
        CardModuleSimpleTitle: '@azzapp/data#CardModuleSimpleText as CardModuleSimpleTitleModel'
        CardModuleSimpleButton: '@azzapp/data#CardModuleSimpleButton as CardModuleSimpleButtonModel'
        CardModulePhotoWithTextAndTitle: '@azzapp/data#CardModulePhotoWithTextAndTitle as CardModulePhotoWithTextAndTitleModel'
        CardModuleSocialLinks: '@azzapp/data#CardModuleSocialLinks as CardModuleSocialLinksModel'
        CardModuleBlockText: '@azzapp/data#CardModuleBlockText as CardModuleBlockTextModel'
        CardModuleLineDivider: '@azzapp/data#CardModuleLineDivider as CardModuleLineDividerModel'
        CardModuleMedia: '@azzapp/data#CardModuleMedia as CardModuleMediaModel'
        CardModuleMediaText: '@azzapp/data#CardModuleMediaText as CardModuleMediaTextModel'
        CardModuleMediaTextLink: '@azzapp/data#CardModuleMediaTextLink as CardModuleMediaTextLinkModel'
        CardModuleTitleText: '@azzapp/data#CardModuleTitleText as CardModuleTitleTextModel'
        CardStyle: '@azzapp/data#CardStyle as CardStyleModel'
        ColorPalette: '@azzapp/data#ColorPalette as ColorPaletteModel'
        WebCardStatistic: '@azzapp/data#WebCardStatistic as WebCardStatisticModel'
        ProfileStatistic: '@azzapp/data#ProfileStatistic as ProfileStatisticModel'
        UserSubscription: '@azzapp/data#UserSubscription as UserSubscriptionModel'
        WebCard: '@azzapp/data#WebCard as WebCardModel'
        User: '@azzapp/data#User as UserModel'
        RedirectWebCard: '@azzapp/data#RedirectWebCard as RedirectWebCard'
        PaymentMean: '@azzapp/data#PaymentMean as PaymentMeanModel'
        Payment: '@azzapp/data#Payment as PaymentModel'
        Contact: '@azzapp/data#Contact as ContactModel'
        EnrichedContactFields: '@azzapp/data#EnrichedContactFields as EnrichedContactFieldsModel'
        Enrichment: '@azzapp/data#ContactEnrichment as ContactEnrichmentModel'
        PublicProfile: '@azzapp/data#PublicProfile as PublicProfileModel'
        Position: '@azzapp/data#Position as PositionModel'
        Education: '@azzapp/data#Education as EducationModel'
      defaultMapper: 'Partial<{T}>'
      maybeValue: 'T extends PromiseLike<infer U> ? Promise<U | null> : T | null'
      scalars:
        JSON: Record<string, unknown>
        ID: string
        DateTime: Date
      contextType: '@azzapp/schema/GraphQLContext#GraphQLContext'
      makeResolverTypeCallable: true
      avoidOptionals: 
        mutation: true
  ./schema.graphql:
    plugins:
      - schema-ast

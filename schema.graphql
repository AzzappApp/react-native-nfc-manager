"""A video media"""
type MediaVideo implements Media {
  id: String!
  aspectRatio: Float!
  width: Float!
  height: Float!
  uri(pixelRatio: Float, height: Float, width: Float): String!
  thumbnail(pixelRatio: Float, height: Float, width: Float, time: Float): String!
}

interface Media {
  id: String!
  aspectRatio: Float!
  width: Float!
  height: Float!
  uri(pixelRatio: Float, height: Float, width: Float): String!
}

"""An image media"""
type MediaImage implements Media {
  id: String!
  aspectRatio: Float!
  width: Float!
  height: Float!
  uri(pixelRatio: Float, height: Float, width: Float): String!
}

"""User Card module : BlockText"""
type CardModuleBlockText implements CardModule {
  """User Card module id, unique between all modules (but not a node id)"""
  id: ID!

  """User Card module kind"""
  kind: CardModuleKind!

  """User Card module visibility"""
  visible: Boolean!
}

"""User Card module"""
interface CardModule {
  """User Card module id, unique between all modules (but not a node id)"""
  id: ID!

  """User Card module kind"""
  kind: CardModuleKind!

  """User Card module visibility"""
  visible: Boolean!
}

"""User Card module kind"""
enum CardModuleKind {
  blockText
  carousel
  horizontalPhoto
  lineDivider
  openingHours
  photoWithTextAndTitle
  simpleButton
  simpleText
  simpleTitle
  socialLinks
  webCardsCarousel
}

"""User Card module : Carousel"""
type CardModuleCarousel implements CardModule {
  """User Card module id, unique between all modules (but not a node id)"""
  id: ID!

  """User Card module kind"""
  kind: CardModuleKind!

  """User Card module visibility"""
  visible: Boolean!
}

"""User Card module : HorizontalPhoto"""
type CardModuleHorizontalPhoto implements CardModule {
  """User Card module id, unique between all modules (but not a node id)"""
  id: ID!

  """User Card module kind"""
  kind: CardModuleKind!

  """User Card module visibility"""
  visible: Boolean!
}

"""User Card module : LineDivider"""
type CardModuleLineDivider implements CardModule {
  """User Card module id, unique between all modules (but not a node id)"""
  id: ID!

  """User Card module kind"""
  kind: CardModuleKind!

  """User Card module visibility"""
  visible: Boolean!
}

"""User Card module : OpeningHours"""
type CardModuleOpeningHours implements CardModule {
  """User Card module id, unique between all modules (but not a node id)"""
  id: ID!

  """User Card module kind"""
  kind: CardModuleKind!

  """User Card module visibility"""
  visible: Boolean!
}

"""User Card module : PhotoWithTextAndTitle"""
type CardModulePhotoWithTextAndTitle implements CardModule {
  """User Card module id, unique between all modules (but not a node id)"""
  id: ID!

  """User Card module kind"""
  kind: CardModuleKind!

  """User Card module visibility"""
  visible: Boolean!
}

"""User Card module : SimpleButton"""
type CardModuleSimpleButton implements CardModule {
  """User Card module id, unique between all modules (but not a node id)"""
  id: ID!

  """User Card module kind"""
  kind: CardModuleKind!

  """User Card module visibility"""
  visible: Boolean!
}

"""User Card module : SimpleText"""
type CardModuleSimpleText implements CardModule {
  text: String!
  fontFamily: String
  fontSize: Int
  color: String
  verticalSpacing: Int
  textAlign: TextAlignment
  marginHorizontal: Int
  marginVertical: Int
  background: StaticMedia
  backgroundStyle: ModuleBackgroundStyle

  """User Card module id, unique between all modules (but not a node id)"""
  id: ID!

  """User Card module kind"""
  kind: CardModuleKind!

  """User Card module visibility"""
  visible: Boolean!
}

enum TextAlignment {
  left
  center
  right
  justify
}

"""Media used in web card edition provided by azzapp"""
type StaticMedia {
  id: ID!
  uri(width: Int, pixelRatio: Int): String!
  name: String
  usage: StaticMediaUsage!
  tags: [String!]!
}

enum StaticMediaUsage {
  coverBackground
  coverForeground
  moduleBackground
}

"""Style of the background of a module"""
type ModuleBackgroundStyle {
  backgroundColor: String!
  patternColor: String!
  opacity: Int!
}

"""User Card module : SimpleTitle"""
type CardModuleSimpleTitle implements CardModule {
  text: String!
  fontFamily: String
  fontSize: Int
  color: String
  verticalSpacing: Int
  textAlign: TextAlignment
  marginHorizontal: Int
  marginVertical: Int
  background: StaticMedia
  backgroundStyle: ModuleBackgroundStyle

  """User Card module id, unique between all modules (but not a node id)"""
  id: ID!

  """User Card module kind"""
  kind: CardModuleKind!

  """User Card module visibility"""
  visible: Boolean!
}

"""User Card module : SocialLinks"""
type CardModuleSocialLinks implements CardModule {
  """User Card module id, unique between all modules (but not a node id)"""
  id: ID!

  """User Card module kind"""
  kind: CardModuleKind!

  """User Card module visibility"""
  visible: Boolean!
}

"""GraphQL Schema Root Query object"""
type Query {
  viewer: Viewer!

  """User infos of the authenticated user"""
  currentUser: User!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """Fetches a profile given its user name"""
  profile(
    """The user name of the profile"""
    userName: String!
  ): Profile

  """Return a list of profile categories"""
  profileCategories: [ProfileCategory!]!

  """Return a list of interests"""
  interests: [Interest!]!
}

"""Represent an Application Viewer"""
type Viewer {
  profile: Profile

  """Return a list of Profiles that the current user is following"""
  followedProfiles(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): ProfileConnection!

  """Return a list of Post that the current user is following author"""
  followedProfilesPosts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection!

  """
  Return a list of Profile that this user might possibility be interested in (following Profile or promoted one)
  """
  trendingProfiles(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): ProfileConnection!

  """Return a list of tranding posts (public ?) at the time of the request"""
  trendingPosts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection!

  """Return a list of profiles the current user can be interested in"""
  recommendedProfiles(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): ProfileConnection!

  """Return a list of posts that match the search query"""
  searchPosts(
    search: String!
    useLocation: Boolean!

    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection!

  """Return a list of profiles that match the search query"""
  searchProfiles(
    search: String!
    useLocation: Boolean!

    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): ProfileConnection!

  """Return a list of cover backgrounds"""
  coverBackgrounds: [StaticMedia!]!

  """Return a list of cover foregrounds"""
  coverForegrounds: [StaticMedia!]!

  """Return a list of module backgrounds"""
  moduleBackgrounds: [StaticMedia!]!

  """Fetches all cover templates for a given kind"""
  coverTemplates: [CoverTemplate!]!

  """Fetches all cover templates for a given kind ordered by Category"""
  coverTemplatesByCategory(segmented: Boolean): [CoverTemplateCategory!]!

  """Return Suggested Cover Templates for business profile"""
  coverTemplatesSuggestion: [CoverTemplate]!
}

"""Represent an Azzapp Profile"""
type Profile implements Node {
  """The ID of an object"""
  id: ID!
  userName: String!
  firstName: String
  lastName: String
  companyName: String
  companyActivity: CompanyActivity
  profileKind: ProfileKind
  profileCategory: ProfileCategory
  card: Card
  colorPalette: [String!]
  posts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection
  isFollowing: Boolean!
  nbPosts: Int!
  nbFollowedProfiles: Int!
  nbFollowersProfiles: Int!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Represent a Company Activity"""
type CompanyActivity implements Node {
  """The ID of an object"""
  id: ID!
  label: String
}

enum ProfileKind {
  business
  personal
  product
}

"""Represent a Profile Category"""
type ProfileCategory implements Node {
  """The ID of an object"""
  id: ID!
  profileKind: ProfileKind!
  label: String
  medias: [MediaImage!]
  companyActivities: [CompanyActivity!]!
}

"""An azzapp User card"""
type Card implements Node {
  """The ID of an object"""
  id: ID!
  user: Profile!

  """Card cover display informations"""
  cover: CardCover!

  """Definitions of the cards modules"""
  modules: [CardModule!]!
}

"""Card cover display informations"""
type CardCover {
  """The main media of the cover"""
  media: Media!
  mediaStyle: JSON

  """The source of the media used by the cover"""
  sourceMedia: Media!

  """The mask media of the cover"""
  maskMedia: MediaImage

  """
  The text of the cover renderered as an image to avoid font loading issues
  """
  textPreviewMedia: MediaImage!
  background: StaticMedia
  backgroundStyle: CardCoverBackgroundStyle
  foreground: StaticMedia
  foregroundStyle: CardCoverForegroundStyle
  segmented: Boolean!
  merged: Boolean!
  title: String!
  titleStyle: CardCoverTextStyle
  subTitle: String
  subTitleStyle: CardCoverTextStyle
  contentStyle: CardCoverContentStyle
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Style of the background of a card cover"""
type CardCoverBackgroundStyle {
  backgroundColor: String
  patternColor: String
}

"""Style of the foreground of a card cover"""
type CardCoverForegroundStyle {
  color: String
}

"""Style of the text in a  a card cover"""
type CardCoverTextStyle {
  color: String
  fontSize: Int
  fontFamily: String
}

"""Style of the content of a card cover"""
type CardCoverContentStyle {
  orientation: CardCoverTitleOrientation
  placement: String
}

"""Orientation of the title of a card cover"""
enum CardCoverTitleOrientation {
  horizontal
  topToBottom
  bottomToTop
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge"""
  node: Post

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represent a Azzapp publication"""
type Post implements Node {
  """The ID of an object"""
  id: ID!

  """The author of the publication"""
  author: Profile!

  """The media of the publication"""
  media: Media!

  """The text content of the publication"""
  content: String!

  """Does this post allow comments"""
  allowComments: Boolean!

  """Does this post allow likes"""
  allowLikes: Boolean!

  """Reaction of the viewer on this post"""
  viewerPostReaction: ReactionKind
  counterReactions: Int!
  counterComments: Int!

  """Creation date ot the post"""
  createdAt: DateTime!

  """Return the recommended comment for the post (for now the last one)"""
  previewComment: PostComment

  """Return a list of comments for the post"""
  comments(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostCommentConnection
  relatedPosts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection!
}

enum ReactionKind {
  like
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Represent a Azzapp publication"""
type PostComment implements Node {
  """The ID of an object"""
  id: ID!

  """The author of the publication"""
  author: Profile!
  comment: String!

  """Creation date ot the post"""
  createdAt: DateTime!
}

"""A connection to a list of items."""
type PostCommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostCommentEdge]
}

"""An edge in a connection."""
type PostCommentEdge {
  """The item at the end of the edge"""
  node: PostComment

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type ProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfileEdge]
}

"""An edge in a connection."""
type ProfileEdge {
  """The item at the end of the edge"""
  node: Profile

  """A cursor for use in pagination"""
  cursor: String!
}

"""Template for a cover"""
type CoverTemplate implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  kind: ProfileKind
  data: CardCoverTemplate!
  enabled: Boolean!
  category: [CoverTemplateCategorGraphQL]
  suggested: Boolean!
  previewMedia: MediaImage
  colorPalette: [String!]
  tags: [String!]!
}

"""Card cover display informations"""
type CardCoverTemplate {
  mediaStyle: JSON

  """The source of the media used by the cover for a suggested template"""
  sourceMedia: MediaImage

  """The background of the cover"""
  background: StaticMedia
  backgroundStyle: CardCoverBackgroundStyle
  foreground: StaticMedia
  foregroundStyle: CardCoverForegroundStyle
  segmented: Boolean!
  merged: Boolean!
  title: String
  titleStyle: CardCoverTextStyle
  subTitle: String
  subTitleStyle: CardCoverTextStyle
  contentStyle: CardCoverContentStyle
}

"""Category of a cover template"""
type CoverTemplateCategorGraphQL {
  """Should be a country code"""
  id: String
  cateogry: String
}

"""A cover template by category"""
type CoverTemplateCategory {
  """The category name"""
  category: String!

  """The category templates"""
  templates: [CoverTemplate!]!
}

"""Represent an Application User"""
type User {
  """Returns the email of the user"""
  email: String

  """Returns the phone number of the user"""
  phoneNumber: String

  """Returns a list of Profiles of the user"""
  profiles: [Profile!]
}

"""Represent a subject of interest"""
type Interest {
  tag: ID!
  label: String
}

type Mutation {
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload
  updateCover(input: UpdateCoverInput!): UpdateCoverPayload
  createPost(input: CreatePostInput!): CreatePostPayload
  toggleFollowing(input: ToggleFollowingInput!): ToggleFollowingPayload
  togglePostReaction(input: TogglePostReactionInput!): TogglePostReactionPayload
  saveSimpleTextModule(input: SaveSimpleTextModuleInput!): SaveSimpleTextModulePayload
  swapModules(input: SwapModulesInput!): SwapModulesPayload
  deleteModules(input: DeleteModulesInput!): DeleteModulesPayload
  duplicateModule(input: DuplicateModuleInput!): DuplicateModulePayload
  updateModulesVisibility(input: UpdateModulesVisibilityInput!): UpdateModulesVisibilityPayload
  createPostComment(input: CreatePostCommentInput!): CreatePostCommentPayload
}

type UpdateProfilePayload {
  profile: Profile
  clientMutationId: String
}

input UpdateProfileInput {
  firstName: String
  lastName: String
  profileKind: ProfileKind
  companyName: String
  companyActivityId: String
  isReady: Boolean
  colorPalette: [String!]
  interests: [String!]
  clientMutationId: String
}

type UpdateCoverPayload {
  profile: Profile
  clientMutationId: String
}

input UpdateCoverInput {
  media: MediaInput
  mediaStyle: JSON
  sourceMedia: MediaInput
  textPreviewMedia: MediaInput
  maskMedia: MediaInput
  backgroundId: String
  backgroundStyle: CardCoverBackgroundStyleInput
  foregroundId: String
  foregroundStyle: CardCoverForegroundStyleInput
  segmented: Boolean
  merged: Boolean
  title: String
  contentStyle: CardCoverContentStyleInput
  titleStyle: CardCoverTextStyleInput
  subTitle: String
  subTitleStyle: CardCoverTextStyleInput
  clientMutationId: String
}

"""User Card media module media"""
input MediaInput {
  kind: MediaKind!
  id: String!
  width: Float!
  height: Float!
}

enum MediaKind {
  video
  image
}

"""Style of the background of a card cover"""
input CardCoverBackgroundStyleInput {
  backgroundColor: String
  patternColor: String
}

"""Style of the foreground of a card cover"""
input CardCoverForegroundStyleInput {
  color: String
}

"""Style of the content of a card cover"""
input CardCoverContentStyleInput {
  orientation: CardCoverTitleOrientation
  placement: String
}

"""Style of the text in a  a card cover"""
input CardCoverTextStyleInput {
  color: String
  fontSize: Int
  fontFamily: String
}

type CreatePostPayload {
  post: Post
  clientMutationId: String
}

input CreatePostInput {
  """The media of the publication"""
  media: MediaInput!

  """The text content of the publication"""
  content: String!

  """Does this post allow comments"""
  allowComments: Boolean!

  """Does this post allow likes"""
  allowLikes: Boolean!
  clientMutationId: String
}

type ToggleFollowingPayload {
  viewer: Viewer!
  profile: Profile!
  clientMutationId: String
}

input ToggleFollowingInput {
  """The id of the user we want toggle following on"""
  profileId: ID!

  """Should we follow or unfollow the user"""
  follow: Boolean!
  clientMutationId: String
}

type TogglePostReactionPayload {
  post: Post!
  clientMutationId: String
}

input TogglePostReactionInput {
  """The post id we want toggle like on"""
  postId: ID!
  reactionKind: ReactionKind
  clientMutationId: String
}

type SaveSimpleTextModulePayload {
  card: Card!
  clientMutationId: String
}

input SaveSimpleTextModuleInput {
  moduleId: ID
  kind: String!
  text: String
  fontFamily: String
  fontSize: Int
  color: String
  verticalSpacing: Int
  textAlign: TextAlignment
  marginHorizontal: Int
  marginVertical: Int
  backgroundId: ID
  backgroundStyle: ModuleBackgroundInputStyle
  clientMutationId: String
}

"""Style of the background of a module"""
input ModuleBackgroundInputStyle {
  backgroundColor: String!
  patternColor: String!
  opacity: Int!
}

type SwapModulesPayload {
  card: Card!
  clientMutationId: String
}

input SwapModulesInput {
  moduleAId: ID!
  moduleBId: ID!
  clientMutationId: String
}

type DeleteModulesPayload {
  card: Card!
  clientMutationId: String
}

input DeleteModulesInput {
  modulesIds: [ID!]!
  clientMutationId: String
}

type DuplicateModulePayload {
  card: Card!
  createdModuleId: ID!
  clientMutationId: String
}

input DuplicateModuleInput {
  moduleId: ID!
  clientMutationId: String
}

type UpdateModulesVisibilityPayload {
  card: Card!
  clientMutationId: String
}

input UpdateModulesVisibilityInput {
  modulesIds: [ID!]!
  visible: Boolean!
  clientMutationId: String
}

type CreatePostCommentPayload {
  postComment: PostComment!
  clientMutationId: String
}

input CreatePostCommentInput {
  """The post id we want toggle like on"""
  postId: ID!
  comment: String!
  clientMutationId: String
}
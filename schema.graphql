"""A video media"""
type MediaVideo implements Media {
  source: String!
  ratio: Float!
  uri(pixelRatio: Float, ratio: Float, width: Float!): String!
  thumbnail(pixelRatio: Float, ratio: Float, width: Float!, time: Float): String!
}

interface Media {
  source: String!
  ratio: Float!
  uri(pixelRatio: Float, ratio: Float, width: Float!): String!
}

"""An image media"""
type MediaImage implements Media {
  source: String!
  ratio: Float!
  uri(pixelRatio: Float, ratio: Float, width: Float!): String!
}

"""GraphQL Schema Root Query object"""
type Query {
  viewer: Viewer!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """Fetches an user given its user name"""
  user(
    """The user name of the user"""
    userName: String!
  ): User
}

"""Represent an Application Viewer"""
type Viewer {
  user: User

  """Return a list of Profiles that the current user is following"""
  followedProfiles(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): UserConnection!

  """Return a list of Post that the current user is following author"""
  followedProfilesPosts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection!

  """
  Return a list of User that this user might possibility be interested in (following User or promoted one)
  """
  trendingProfiles(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): UserConnection!

  """Return a list of tranding posts (public ?) at the time of the request"""
  trendingPosts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection!

  """Return a list of profiles the current user can be interested in"""
  recommendedProfiles(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): UserConnection!

  """Return a list of posts that match the search query"""
  searchPosts(
    search: String!
    useLocation: Boolean!

    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection!

  """Return a list of profiles that match the search query"""
  searchProfiles(
    search: String!
    useLocation: Boolean!

    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): UserConnection!
}

"""Represent an Azzapp User"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  firstName: String
  lastName: String
  userName: String!
  companyName: String
  companyActivityId: String
  isReady: Boolean!
  userType: UserType
  card: UserCard
  posts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection
  isFollowing: Boolean!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

enum UserType {
  BUSINESS
  PERSONAL
  PRODUCT
}

"""An azzapp User card"""
type UserCard implements Node {
  """The ID of an object"""
  id: ID!
  user: User!

  """Card cover display informations"""
  cover: UserCardCover!

  """Definitions of the cards modules"""
  modules: [UserCardModule!]!
}

"""UserCard cover display informations"""
type UserCardCover {
  """the background color of the card"""
  backgroundColor: String!

  """the pictures of the card cover"""
  pictures: [Media!]!

  """
  the time, in seconds, a picture stay displayed before transition in case of multiple pictures
  """
  pictureTransitionTimer: Float!

  """the overlay effect applied to the card cover"""
  overlayEffect: String!

  """the title of the card cover"""
  title: String!

  """the title position in the card cover"""
  titlePosition: String!

  """the font family used to display the title"""
  titleFont: String!

  """the font size of used to display the title"""
  titleFontSize: Int!

  """the color used to display the title"""
  titleColor: String!

  """the rotation of the title"""
  titleRotation: Int!

  """the position of the qr code in the card"""
  qrCodePosition: String!

  """the layout used to display the cover on desktop"""
  desktopLayout: String!

  """the position of the backround image on desktop"""
  dektopImagePosition: String!
}

"""User Card module"""
union UserCardModule = SocialModule | MediaModule | TextModule

"""User Card social module"""
type SocialModule {
  data: SocialModuleData
}

"""User Card social module"""
type SocialModuleData {
  facebook: String
  instagram: String
  twitter: String
  linkdedIn: String
  youtube: String
  snapshat: String
  tiktok: String
  website: String
  pinterest: String
}

"""User Card media module"""
type MediaModule {
  data: [Media!]!
}

"""User Card text module"""
type TextModule {
  data: String!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge"""
  node: Post

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represent a Azzapp publication"""
type Post implements Node {
  """The ID of an object"""
  id: ID!

  """The author of the publication"""
  author: User!

  """The date of the publication"""
  postDate: Float!

  """The media of the publication"""
  media: Media!

  """The text content of the publication"""
  content: String!

  """Does this post allow comments"""
  allowComments: Boolean!

  """Does this post allow likes"""
  allowLikes: Boolean!
  relatedPosts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateCover(input: UpdateCoverInput!): UpdateCoverPayload
  createPost(input: CreatePostInput!): CreatePostPayload
  toggleFollowing(input: ToggleFollowingInput!): ToggleFollowingPayload
}

type UpdateUserPayload {
  user: User
  clientMutationId: String
}

input UpdateUserInput {
  firstName: String
  lastName: String
  userType: UserType
  companyName: String
  companyActivityId: String
  isReady: Boolean
  clientMutationId: String
}

type UpdateCoverPayload {
  user: User
  clientMutationId: String
}

input UpdateCoverInput {
  """the background color of the card"""
  backgroundColor: String

  """the pictures of the card cover"""
  pictures: [MediaInput!]

  """
  the time, in seconds, a picture stay displayed before transition in case of multiple pictures
  """
  pictureTransitionTimer: Float

  """the overlay effect applied to the card cover"""
  overlayEffect: String

  """the title of the card cover"""
  title: String

  """the title position in the card cover"""
  titlePosition: String

  """the font family used to display the title"""
  titleFont: String

  """the font size of used to display the title"""
  titleFontSize: Int

  """the color used to display the title"""
  titleColor: String

  """the rotation of the title"""
  titleRotation: Int

  """the position of the qr code in the card"""
  qrCodePosition: String

  """the layout used to display the cover on desktop"""
  desktopLayout: String

  """the position of the backround image on desktop"""
  dektopImagePosition: String
  clientMutationId: String
}

"""User Card media module media"""
input MediaInput {
  kind: MediaKind!
  source: String!
  ratio: Float
}

enum MediaKind {
  video
  image
}

type CreatePostPayload {
  post: Post
  clientMutationId: String
}

input CreatePostInput {
  """The media of the publication"""
  media: MediaInput!

  """The text content of the publication"""
  content: String!

  """Does this post allow comments"""
  allowComments: Boolean!

  """Does this post allow likes"""
  allowLikes: Boolean!
  clientMutationId: String
}

type ToggleFollowingPayload {
  viewer: Viewer!
  user: User!
  clientMutationId: String
}

input ToggleFollowingInput {
  """The id of the user we want toggle following on"""
  userId: ID!
  clientMutationId: String
}
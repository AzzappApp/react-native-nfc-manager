"""A video media"""
type MediaVideo implements Media {
  id: String!
  aspectRatio: Float!
  width: Float!
  height: Float!
  uri(pixelRatio: Float, height: Float, width: Float): String!
  thumbnail(pixelRatio: Float, height: Float, width: Float, time: Float): String!
}

interface Media {
  id: String!
  aspectRatio: Float!
  width: Float!
  height: Float!
  uri(pixelRatio: Float, height: Float, width: Float): String!
}

"""An image media"""
type MediaImage implements Media {
  id: String!
  aspectRatio: Float!
  width: Float!
  height: Float!
  uri(pixelRatio: Float, height: Float, width: Float): String!
}

"""GraphQL Schema Root Query object"""
type Query {
  viewer: Viewer!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """Fetches a profile given its user name"""
  profile(
    """The user name of the profile"""
    userName: String!
  ): Profile
}

"""Represent an Application Viewer"""
type Viewer {
  profile: Profile

  """Return a list of Profiles that the current user is following"""
  followedProfiles(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): ProfileConnection!

  """Return a list of Post that the current user is following author"""
  followedProfilesPosts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection!

  """
  Return a list of Profile that this user might possibility be interested in (following Profile or promoted one)
  """
  trendingProfiles(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): ProfileConnection!

  """Return a list of tranding posts (public ?) at the time of the request"""
  trendingPosts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection!

  """Return a list of profiles the current user can be interested in"""
  recommendedProfiles(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): ProfileConnection!

  """Return a list of posts that match the search query"""
  searchPosts(
    search: String!
    useLocation: Boolean!

    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection!

  """Return a list of profiles that match the search query"""
  searchProfiles(
    search: String!
    useLocation: Boolean!

    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): ProfileConnection!

  """Return a list of cover backgrounds"""
  coverBackgrounds: [CoverLayer!]!

  """Return a list of cover foregrounds"""
  coverForegrounds: [CoverLayer!]!
}

"""Represent an Azzapp Profile"""
type Profile implements Node {
  """The ID of an object"""
  id: ID!
  userName: String!
  firstName: String
  lastName: String
  companyName: String
  companyActivityId: String
  isReady: Boolean!
  profileKind: ProfileKind
  card: Card
  colorPalette: [String!]
  posts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection
  isFollowing: Boolean!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

enum ProfileKind {
  business
  personal
  product
}

"""An azzapp User card"""
type Card implements Node {
  """The ID of an object"""
  id: ID!
  user: Profile!

  """Card cover display informations"""
  cover: CardCover!

  """Definitions of the cards modules"""
  modules: [CardModule!]!
}

"""Card cover display informations"""
type CardCover {
  """The main media of the cover"""
  media: MediaImage!
  mediaStyle: JSON

  """The source of the media used by the cover"""
  sourceMedia: MediaImage!

  """The mask media of the cover"""
  maskMedia: MediaImage!

  """
  The text of the cover renderered as an image to avoid font loading issues
  """
  textPreviewMedia: MediaImage!
  background: CoverLayer
  backgroundStyle: CardCoverBackgroundStyle
  foreground: CoverLayer
  foregroundStyle: CardCoverForegroundStyle
  segmented: Boolean!
  merged: Boolean!
  title: String!
  titleStyle: CardCoverTextStyle
  subTitle: String
  subTitleStyle: CardCoverTextStyle
  contentStyle: CardCoverContentStyle
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Style of the background of a card cover"""
type CoverLayer {
  id: ID!
  uri(width: Int, pixelRatio: Int): String!
  name: String
  kind: CoverLayerKind!
  tags: [String!]!
}

enum CoverLayerKind {
  background
  foreground
}

"""Style of the background of a card cover"""
type CardCoverBackgroundStyle {
  backgroundColor: String
  patternColor: String
}

"""Style of the foreground of a card cover"""
type CardCoverForegroundStyle {
  color: String
}

"""Style of the text in a  a card cover"""
type CardCoverTextStyle {
  color: String
  fontSize: Int
  fontFamily: String
}

"""Style of the content of a card cover"""
type CardCoverContentStyle {
  orientation: CardCoverTitleOrientation
  placement: String
}

"""Orientation of the title of a card cover"""
enum CardCoverTitleOrientation {
  horizontal
  topToBottom
  bottomToTop
}

"""User Card module"""
union CardModule = SocialModule | MediaModule | TextModule

"""User Card social module"""
type SocialModule {
  data: SocialModuleData
}

"""User Card social module"""
type SocialModuleData {
  facebook: String
  instagram: String
  twitter: String
  linkdedIn: String
  youtube: String
  snapshat: String
  tiktok: String
  website: String
  pinterest: String
}

"""User Card media module"""
type MediaModule {
  data: [Media!]!
}

"""User Card text module"""
type TextModule {
  data: String!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge"""
  node: Post

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represent a Azzapp publication"""
type Post implements Node {
  """The ID of an object"""
  id: ID!

  """The author of the publication"""
  author: Profile!

  """The date of the publication"""
  postDate: Float!

  """The media of the publication"""
  media: Media!

  """The text content of the publication"""
  content: String!

  """Does this post allow comments"""
  allowComments: Boolean!

  """Does this post allow likes"""
  allowLikes: Boolean!
  relatedPosts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): PostConnection!
}

"""A connection to a list of items."""
type ProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfileEdge]
}

"""An edge in a connection."""
type ProfileEdge {
  """The item at the end of the edge"""
  node: Profile

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload
  updateCover(input: UpdateCoverInput!): UpdateCoverPayload
  createPost(input: CreatePostInput!): CreatePostPayload
  toggleFollowing(input: ToggleFollowingInput!): ToggleFollowingPayload
}

type UpdateProfilePayload {
  profile: Profile
  clientMutationId: String
}

input UpdateProfileInput {
  firstName: String
  lastName: String
  profileKind: ProfileKind
  companyName: String
  companyActivityId: String
  isReady: Boolean
  colorPalette: String
  clientMutationId: String
}

type UpdateCoverPayload {
  profile: Profile
  clientMutationId: String
}

input UpdateCoverInput {
  media: MediaInput
  mediaStyle: JSON
  sourceMedia: MediaInput
  textPreviewMedia: MediaInput
  maskMedia: MediaInput
  backgroundId: String
  backgroundStyle: CardCoverBackgroundStyleInput
  foregroundId: String
  foregroundStyle: CardCoverForegroundStyleInput
  segmented: Boolean
  merged: Boolean
  title: String
  contentStyle: CardCoverContentStyleInput
  titleStyle: CardCoverTextStyleInput
  subTitle: String
  subTitleStyle: CardCoverTextStyleInput
  clientMutationId: String
}

"""User Card media module media"""
input MediaInput {
  kind: MediaKind!
  id: String!
  width: Float!
  height: Float!
}

enum MediaKind {
  video
  image
}

"""Style of the background of a card cover"""
input CardCoverBackgroundStyleInput {
  backgroundColor: String
  patternColor: String
}

"""Style of the foreground of a card cover"""
input CardCoverForegroundStyleInput {
  color: String
}

"""Style of the content of a card cover"""
input CardCoverContentStyleInput {
  orientation: CardCoverTitleOrientation
  placement: String
}

"""Style of the text in a  a card cover"""
input CardCoverTextStyleInput {
  color: String
  fontSize: Int
  fontFamily: String
}

type CreatePostPayload {
  post: Post
  clientMutationId: String
}

input CreatePostInput {
  """The media of the publication"""
  media: MediaInput!

  """The text content of the publication"""
  content: String!

  """Does this post allow comments"""
  allowComments: Boolean!

  """Does this post allow likes"""
  allowLikes: Boolean!
  clientMutationId: String
}

type ToggleFollowingPayload {
  viewer: Viewer!
  profile: Profile!
  clientMutationId: String
}

input ToggleFollowingInput {
  """The id of the user we want toggle following on"""
  profileId: ID!

  """Should we follow or unfollow the user"""
  follow: Boolean!
  clientMutationId: String
}
name: Build and Deploy Azzapp application
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - staging
      - stable

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  VERCEL_ORG_ID: 'team_nigXfZEKLJrpoK0ZHytix9jX'
  TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  TURBO_TEAM: 'azzapp'
  PHRASE_ACCESS_TOKEN: ${{ secrets.PHRASE_ACCESS_TOKEN }}
  PAYMENT_API_URL: ${{ vars.PAYMENT_API_URL }}
jobs:
  test-and-update-app:
    environment: ${{(github.ref_name == 'stable' && 'Production') || (github.ref_name == 'staging' && 'Staging') || 'Development' }}
    name: Build, Test and update Azzapp application version, translations and persisted queries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}

      - name: Setup
        uses: ./.github/actions/setup

      - name: Put staging translations to production
        run: yarn i18n:merge
        if: github.ref == 'refs/heads/stable'
        env:
          API_SERVER_TOKEN: ${{ secrets.API_SERVER_TOKEN }}
          TRANSLATION_APP_API_ENDPOINT: https://translations.azzapp.com/api

      - name: Pull translations
        uses: ./.github/actions/i18n-pull
        with:
          NEXT_PUBLIC_PLATFORM: ${{ vars.NEXT_PUBLIC_PLATFORM }}
          API_SERVER_TOKEN: ${{ secrets.API_SERVER_TOKEN }}
          TRANSLATION_APP_API_ENDPOINT: https://translations.azzapp.com/api

      - name: JavaScript build
        run: yarn build-app-dependencies

      - name: Lint
        run: yarn lint

      - name: Type check
        run: yarn typecheck

      - name: Test
        run: yarn test

      - name: Bump version
        run: |
          NEXT_VERSION="release"
          if [ "$GITHUB_REF" == "refs/heads/staging" ]; then
            NEXT_VERSION="rc"
          elif [ "$GITHUB_REF" == "refs/heads/main" ]; then
            NEXT_VERSION="canary"
          fi

          yarn bump-version $NEXT_VERSION
          yarn write-dev-changelog
        env:
          github_token: ${{ secrets.ADMIN_GITHUB_TOKEN }}

      # This step is useless since it was already done in the build-app-dependencies step
      # But we keep in case the app dependencies are not built in the future
      - name: Build the persisted-query-map.json
        run: yarn turbo run relay:build
        if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stable'

      - name: Update persisted queries
        id: query-map-updated
        if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stable'
        run: yarn turbo run persist-queries --filter=@azzapp/api
        # ADD this once we support multiple versions
        env:
          LAST_SUPPORTED_APP_VERSION: ${{ vars.LAST_SUPPORTED_APP_VERSION }}

      ############################################
      #
      # PlanetScale schema migration
      #
      ############################################
      # TODO PlanetScale check don't work with the new setup, it breaks turbo-ignore
      # - name: Setup pscale
      #   uses: planetscale/setup-pscale-action@v1

      # - name: PlanetScale - Check if migration is needed
      #   id: planetscale_migration_needed
      #   working-directory: packages/data
      #   env:
      #     DATABASE_HOST: ${{ vars.DATABASE_HOST }}
      #     DATABASE_USERNAME: ${{ vars.DATABASE_USERNAME }}
      #     DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      #   run: |
      #     yarn introspect
      #     yarn generate-migration
      #     HAS_CHANGE="false"
      #     if compgen -G "drizzle/0001*" > /dev/null; then
      #         cat $(compgen -G "drizzle/0001*")
      #         HAS_CHANGE="true"
      #     fi
      #     echo "has_change=$HAS_CHANGE" >> $GITHUB_OUTPUT

      # - name: PlanetScale - Extract branch name
      #   if: ${{ steps.planetscale_migration_needed.outputs.has_change == 'true'}}
      #   run: echo "branch=$(echo ci-${GITHUB_SHA})" >> $GITHUB_OUTPUT
      #   id: extract_branch

      # - name: PlanetScale - Create a branch
      #   if: ${{ steps.planetscale_migration_needed.outputs.has_change == 'true'}}
      #   id: create_branch
      #   env:
      #     PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
      #     PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      #   run: |
      #     set +e
      #     pscale branch show azzapp ${{ steps.extract_branch.outputs.branch }} --org azzapp
      #     exit_code=$?
      #     set -e


      #     if [ $exit_code -eq 0 ]; then
      #       echo "Branch exists. Skipping branch creation."
      #     else
      #       echo "Branch does not exist. Creating."
      #       pscale branch create azzapp ${{ steps.extract_branch.outputs.branch }} --from ${{ github.ref_name }}  --wait --org azzapp
      #     fi

      # - name: PlanetScale - Create a password
      #   if: ${{ steps.planetscale_migration_needed.outputs.has_change == 'true'}}
      #   env:
      #     PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
      #     PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      #   run: |
      #     response=$(pscale password create azzapp ${{ steps.extract_branch.outputs.branch }} ${{ steps.extract_branch.outputs.branch }} -f json --org azzapp)


      #     id=$(echo "$response" | jq -r '.id')
      #     host=$(echo "$response" | jq -r '.access_host_url')
      #     username=$(echo "$response" | jq -r '.username')
      #     password=$(echo "$response" | jq -r '.plain_text')
      #     ssl_mode="verify_identity"  # Assuming a default value for ssl_mode
      #     ssl_ca="/etc/ssl/certs/ca-certificates.crt"  # Assuming a default value for ssl_ca


      #     # Set the password ID, allows us to later delete it if wanted.
      #     echo "PASSWORD_ID=$id" >> $GITHUB_ENV


      #     # Create the DATABASE_URL
      #     echo "DATABASE_HOST=$host" >> $GITHUB_ENV
      #     echo "DATABASE_PASSWORD=$password" >> $GITHUB_ENV
      #     echo "DATABASE_USERNAME=$username" >> $GITHUB_ENV

      # - name: PlanetScale - Apply drizzle changes
      #   if: ${{ steps.planetscale_migration_needed.outputs.has_change == 'true'}}
      #   working-directory: packages/data
      #   run: |
      #     export DATABASE_HOST=$DATABASE_HOST
      #     export DATABASE_PASSWORD=$DATABASE_PASSWORD
      #     export DATABASE_USERNAME=$DATABASE_USERNAME
      #     yarn push-migration

      # - name: PlanetScale - Create a deploy request
      #   if: ${{ steps.planetscale_migration_needed.outputs.has_change == 'true'}}
      #   env:
      #     PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
      #     PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      #   run: |
      #     pscale deploy-request create azzapp ${{ steps.extract_branch.outputs.branch }}  --org azzapp

      # - name: PlanetScale - Check deployment state
      #   if: ${{ steps.planetscale_migration_needed.outputs.has_change == 'true'}}
      #   id: check-state
      #   env:
      #     PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
      #     PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      #   run: |
      #     for i in {1..10}; do
      #       deployment_state=$(pscale deploy-request show azzapp ${{ steps.extract_branch.outputs.branch }} --org azzapp --format json | jq -r '.deployment_state')
      #       echo "Deployment State: $deployment_state"


      #       if [ "$deployment_state" = "ready" ]; then
      #         echo "Deployment state is ready. Continuing."
      #         break
      #       fi


      #       echo "Deployment state is not ready. Waiting 2 seconds before checking again."
      #       sleep 2
      #     done

      # - name: PlanetScale - Deploy the changes
      #   if: ${{ steps.planetscale_migration_needed.outputs.has_change == 'true'}}
      #   env:
      #     PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
      #     PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      #   run: |
      #     pscale deploy-request deploy azzapp ${{ steps.extract_branch.outputs.branch }} --org azzapp --wait
      
      - name: Install Vercel CLI
        run: npm i -g vercel@latest


      - name: Deploy API to Vercel
        uses: ./.github/actions/vercel-deploy
        with:
          package: '@azzapp/api'
          vercel_project_id: 'azzapp-api'
          vercel_team_id: 'azzapp'
          vercel_token: ${{ secrets.VERCEL_TOKEN }}


      - name: Deploy Web to Vercel
        uses: ./.github/actions/vercel-deploy
        with:
          package: '@azzapp/web'
          vercel_project_id: 'azzapp'
          vercel_team_id: 'azzapp'
          vercel_token: ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Backoffice to Vercel
        uses: ./.github/actions/vercel-deploy
        with:
          package: '@azzapp/backoffice'
          vercel_project_id: 'azzapp-backoffice'
          vercel_team_id: 'azzapp'
          vercel_token: ${{ secrets.VERCEL_TOKEN }}
    
      - name: Git config
        run: |
          git config user.name "Azzapp Dev Bot"
          git config user.email "azzapp-dev-bot@azzapp.com"

      - name: Commit version bump
        run: |
          git add .
          git commit -m "chore(ci): bump version [skip ci]"
          git push origin $GITHUB_REF_NAME
        
  buid-ios:
    environment: ${{(github.ref_name == 'stable' && 'Production') || (github.ref_name == 'staging' && 'Staging') || 'Development' }}
    name: Build native iOS application
    runs-on: macos-latest-xlarge
    needs:
      - test-and-update-app
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      # Set the Xcode version using xcode-select
      - name: Select Xcode Version
        run: sudo xcode-select -s /Applications/Xcode_16.1.app

      - name: Setup
        uses: ./.github/actions/setup

      - name: Pull translations
        uses: ./.github/actions/i18n-pull
        with:
          NEXT_PUBLIC_PLATFORM: ${{ vars.NEXT_PUBLIC_PLATFORM }}
          API_SERVER_TOKEN: ${{ secrets.API_SERVER_TOKEN }}
          TRANSLATION_APP_API_ENDPOINT: https://translations.azzapp.com/api

      - name: JavaScript build
        run: yarn build-app-dependencies
      
      - uses: ruby/setup-ruby@v1
        with:
          working-directory: packages/app
          bundler-cache: true

      - name: Restore ipa
        id: restore-ipa
        uses: actions/cache/restore@v4
        with:
          path: packages/app/fastlane/builds/${{ vars.IOS_SCHEME }}.ipa
          key: ipa-${{ runner.os }}-${{ vars.IOS_SCHEME }}-${{ hashFiles(
            'packages/app/ios/**/*',
            'packages/app/native_modules/*/ios/**/*') }}

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: packages/app/ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('packages/app/ios/Podfile.lock') }}

      - name: Pod install
        working-directory: packages/app/ios
        run: bundle exec pod install

      - name: Setup Xcode env
        run: |
          echo "Setup node for xcode to $(command -v node)"
          echo "export NODE_BINARY=$(command -v node)" > ./packages/app/ios/.xcode.env
          echo "export NODE_BINARY=$(command -v node)" > ./packages/app/ios/.xcode.env.local

      - name: Read application version
        id: read_version
        run: |
          VERSION_NUMBER=$(jq -r '.version' package.json)
          BUILD_NUMBER=$(jq -r '.version' internal-version.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build=$BUILD_NUMBER" >> $GITHUB_OUTPUT
      
      - name: Build ios application
        if: steps.restore-ipa.outputs.cache-hit != 'true'
        working-directory: packages/app
        run: yarn build:ios:native
        env:
          NEXT_PUBLIC_URL: ${{ vars.NEXT_PUBLIC_URL }}
          NEXT_PUBLIC_API_ENDPOINT: ${{ vars.NEXT_PUBLIC_API_ENDPOINT }}
          DEPLOYMENT_ENVIRONMENT: ${{ vars.NEXT_PUBLIC_PLATFORM }}
          PURCHASE_IOS_KEY: ${{ vars.PURCHASE_IOS_KEY }}
          PURCHASE_ANDROID_KEY: ${{ vars.PURCHASE_ANDROID_KEY }}
          APP_WEBSHARED_CREDENTIALS: ${{ vars.APP_WEBSHARED_CREDENTIALS }}
          SENTRY_DSN: 'https://13a33b3788344ceea14cf298a220fead@o4505353883680768.ingest.sentry.io/4505358469038080'
          SENTRY_AUTH_TOKEN: ${{ vars.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: 'azzapp'
          SENTRY_PROJECT: 'azzapp-app'
          TERMS_OF_SERVICE: https://web.azzapp.com/legal/terms-of-service
          PRIVACY_POLICY: https://web.azzapp.com/legal/privacy
          ABOUT: https://web.azzapp.com/company/about_us
          FAQ: https://web.azzapp.com/company/faq
          IOS_APP_IDENTIFIER: ${{ vars.IOS_APP_IDENTIFIER }}
          IOS_APPCLIP_IDENTIFIER: ${{ vars.IOS_APPCLIP_IDENTIFIER }}
          IOS_SCHEME: ${{ vars.IOS_SCHEME }}
          APP_SCHEME: ${{ vars.APP_SCHEME }}
          IOS_PROFILE_ID: ${{ vars.IOS_PROFILE_ID }}
          IOS_PROFILECLIP_ID: ${{ vars.IOS_PROFILECLIP_ID }}
          IOS_APPCLIP_SCHEME: ${{ vars.IOS_APPCLIP_SCHEME }}
          IOS_CODE_SIGNING_IDENTITY: ${{ vars.IOS_CODE_SIGNING_IDENTITY }}
          IOS_EXPORT_METHOD: ${{ vars.IOS_EXPORT_METHOD }}
          IOS_CERTIFICATE_P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_P12_PASSWORD }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          AZZAPP_API_VERCEL_PROTECTION_BYPASS: ${{secrets.AZZAPP_API_VERCEL_PROTECTION_BYPASS}}
          WIDGET_APP_GROUP: ${{vars.WIDGET_APP_GROUP}}
          NEXT_PUBLIC_USER_MGMT_URL: ${{vars.NEXT_PUBLIC_USER_MGMT_URL}}
          VERSION_NUMBER: ${{ steps.read_version.outputs.version }}
          BUILD_NUMBER: ${{ steps.read_version.outputs.build }}

      - name: Save ipa to cache
        if: steps.restore-ipa.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: packages/app/fastlane/builds/${{ vars.IOS_SCHEME }}.ipa
          key: ${{ steps.restore-ipa.outputs.cache-primary-key }}

      - name: inject react-native code and assets
        working-directory: packages/app
        run: yarn build:ios:js
        env:
          NEXT_PUBLIC_URL: ${{ vars.NEXT_PUBLIC_URL }}
          NEXT_PUBLIC_API_ENDPOINT: ${{ vars.NEXT_PUBLIC_API_ENDPOINT }}
          DEPLOYMENT_ENVIRONMENT: ${{ vars.NEXT_PUBLIC_PLATFORM }}
          PURCHASE_IOS_KEY: ${{ vars.PURCHASE_IOS_KEY }}
          PURCHASE_ANDROID_KEY: ${{ vars.PURCHASE_ANDROID_KEY }}
          APP_WEBSHARED_CREDENTIALS: ${{ vars.APP_WEBSHARED_CREDENTIALS }}
          SENTRY_DSN: 'https://13a33b3788344ceea14cf298a220fead@o4505353883680768.ingest.sentry.io/4505358469038080'
          SENTRY_AUTH_TOKEN: ${{ vars.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: 'azzapp'
          SENTRY_PROJECT: 'azzapp-app'
          TERMS_OF_SERVICE: https://web.azzapp.com/legal/terms-of-service
          PRIVACY_POLICY: https://web.azzapp.com/legal/privacy
          ABOUT: https://web.azzapp.com/company/about_us
          FAQ: https://web.azzapp.com/company/faq
          IOS_APP_IDENTIFIER: ${{ vars.IOS_APP_IDENTIFIER }}
          IOS_APPCLIP_IDENTIFIER: ${{ vars.IOS_APPCLIP_IDENTIFIER }}
          IOS_SCHEME: ${{ vars.IOS_SCHEME }}
          APP_SCHEME: ${{ vars.APP_SCHEME }}
          IOS_PROFILE_ID: ${{ vars.IOS_PROFILE_ID }}
          IOS_PROFILECLIP_ID: ${{ vars.IOS_PROFILECLIP_ID }}
          IOS_APPCLIP_SCHEME: ${{ vars.IOS_APPCLIP_SCHEME }}
          IOS_CODE_SIGNING_IDENTITY: ${{ vars.IOS_CODE_SIGNING_IDENTITY }}
          IOS_EXPORT_METHOD: ${{ vars.IOS_EXPORT_METHOD }}
          IOS_CERTIFICATE_P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_P12_PASSWORD }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          AZZAPP_API_VERCEL_PROTECTION_BYPASS: ${{secrets.AZZAPP_API_VERCEL_PROTECTION_BYPASS}}
          WIDGET_APP_GROUP: ${{vars.WIDGET_APP_GROUP}}
          NEXT_PUBLIC_USER_MGMT_URL: ${{vars.NEXT_PUBLIC_USER_MGMT_URL}}
          VERSION_NUMBER: ${{ steps.read_version.outputs.version }}
          BUILD_NUMBER: ${{ steps.read_version.outputs.build }}

      - name: Upload ios artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.IOS_SCHEME }}.ipa
          path: packages/app/fastlane/builds/${{ vars.IOS_SCHEME }}.ipa

      - name: Upload ios dSYM
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.IOS_SCHEME }}.app.dSYM.zip
          path: packages/app/fastlane/builds/${{ vars.IOS_SCHEME }}.app.dSYM.zip

      - name: Upload to TestFlight
        working-directory: packages/app
        run: bundle exec fastlane deploy
        env:
          IOS_APP_IDENTIFIER: ${{ vars.IOS_APP_IDENTIFIER }}
          IOS_SCHEME: ${{ vars.IOS_SCHEME }}
          APP_SCHEME: ${{ vars.APP_SCHEME }}
          IOS_PROFILE_ID: ${{ vars.IOS_PROFILE_ID }}
          IOS_CODE_SIGNING_IDENTITY: ${{ vars.CODE_SIGNING_IDENTITY }}
          IOS_EXPORT_METHOD: ${{ vars.IOS_EXPORT_METHOD }}
          IOS_CERTIFICATE_P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_P12_PASSWORD }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

  buid-android:
    environment: ${{(github.ref_name == 'stable' && 'Production') || (github.ref_name == 'staging' && 'Staging') || 'Development' }}
    name: Build native Android application
    runs-on: ubuntu-latest-m
    env:
      RUBYOPT: -rostruct
    needs:
      - test-and-update-app
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup
        uses: ./.github/actions/setup

      - name: Pull translations
        uses: ./.github/actions/i18n-pull
        with:
          NEXT_PUBLIC_PLATFORM: ${{ vars.NEXT_PUBLIC_PLATFORM }}
          API_SERVER_TOKEN: ${{ secrets.API_SERVER_TOKEN }}
          TRANSLATION_APP_API_ENDPOINT: https://translations.azzapp.com/api

      - name: JavaScript build
        run: yarn build-app-dependencies

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.6' #hot fix for android fastlane ubuntu
          working-directory: packages/app
          bundler-cache: true

      - name: force Install fastlane
        run: |
          cd packages/app && bundle install --jobs 4 --retry 3

      - name: Configure Keystore
        run: |
          echo "$ANDROID_KEYSTORE_FILE" > keystore.jks.b64
          base64 -d -i keystore.jks.b64 > keystore.jks
          echo "storeFile=keystore.jks" >> keystore.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> keystore.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> keystore.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> keystore.properties
        env:
          ANDROID_KEYSTORE_FILE: ${{ secrets.ANDROID_KEYSTORE_FILE }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}

      - name: Create Google Play Config file
        run: |
          echo "$PLAYSTORE_SERVICE_SECRET" > play_config.json.b64
          base64 -d -i play_config.json.b64 > ${{ github.workspace }}/play_config.json
        env:
          PLAYSTORE_SERVICE_SECRET: ${{ secrets.PLAYSTORE_SERVICE_SECRET }}

      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('packages/app/android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Sync Native Version
        working-directory: packages/app/
        run: yarn sync-android-versions

      - name: Build Android native application
        working-directory: packages/app/
        run: yarn build:android
        env:
          DEVELOPMENT_BUILD: ${{ github.ref_name != 'stable' }}
          NEXT_PUBLIC_URL: ${{ vars.NEXT_PUBLIC_URL }}
          NEXT_PUBLIC_API_ENDPOINT: ${{ vars.NEXT_PUBLIC_API_ENDPOINT }}
          DEPLOYMENT_ENVIRONMENT: ${{ vars.NEXT_PUBLIC_PLATFORM }}
          PURCHASE_ANDROID_KEY: ${{ vars.PURCHASE_ANDROID_KEY }}
          APP_WEBSHARED_CREDENTIALS: ${{ vars.APP_WEBSHARED_CREDENTIALS }}
          SENTRY_DSN: 'https://13a33b3788344ceea14cf298a220fead@o4505353883680768.ingest.sentry.io/4505358469038080'
          SENTRY_AUTH_TOKEN: ${{ vars.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: 'azzapp'
          SENTRY_PROJECT: 'azzapp-app'
          TERMS_OF_SERVICE: https://web.azzapp.com/legal/terms-of-service
          PRIVACY_POLICY: https://web.azzapp.com/legal/privacy
          ABOUT: https://web.azzapp.com/company/about_us
          FAQ: https://web.azzapp.com/company/faq
          APP_SCHEME: ${{ vars.APP_SCHEME }}
          ANDROID_APP_IDENTIFIER: ${{ vars.ANDROID_APP_IDENTIFIER }}
          ANDROID_BUILD_TASK: ${{ vars.ANDROID_BUILD_TASK }}
          ANDROID_KEYSTORE_PATH: ${{ github.workspace }}/keystore.jks
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          PLAY_CONFIG_PATH: ${{ github.workspace }}/play_config.json
          AZZAPP_API_VERCEL_PROTECTION_BYPASS: ${{secrets.AZZAPP_API_VERCEL_PROTECTION_BYPASS}}
          NEXT_PUBLIC_USER_MGMT_URL: ${{vars.NEXT_PUBLIC_USER_MGMT_URL}}
          GRADLE_OPTS: "-Xmx8g -XX:MaxMetaspaceSize=2g"
      
      - name: Copy AAB
        working-directory: packages/app
        run: |
          cp -R ./android/app/build/outputs/bundle/${{ vars.ANDROID_BUILD_TASK }}Release/app-${{ vars.ANDROID_BUILD_TASK }}-release.aab azzapp.aab

      - name: Upload android artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ vars.ANDROID_BUILD_TASK }}-release.aab
          path: ./packages/app/azzapp.aab

      - name: Deploy android application
        run: bundle exec fastlane android deploy
        working-directory: packages/app
        env:
          DEPLOYMENT_ENVIRONMENT: ${{ vars.NEXT_PUBLIC_PLATFORM }}
          ANDROID_APP_IDENTIFIER: ${{ vars.ANDROID_APP_IDENTIFIER }}
          ANDROID_BUILD_TASK: ${{ vars.ANDROID_BUILD_TASK }}
          ANDROID_KEYSTORE_PATH: ${{ github.workspace }}/keystore.jks
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          PLAY_CONFIG_PATH: ${{ github.workspace }}/play_config.json
          AAB_PATH: ${{ github.workspace }}/packages/app/azzapp.aab

name: Build and Deploy Azzapp application
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - staging
      - stable
      
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  
jobs:
  build-and-deploy:
    environment: ${{(github.ref_name == 'stable' && 'Production') || (github.ref_name == 'staging' && 'Staging') || 'Development' }} 
    name: Build and Deploy Azzapp application
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: "team_nigXfZEKLJrpoK0ZHytix9jX"
      TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      TURBO_TEAM: "azzapp"
      NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: ${{ vars.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}}
      PHRASE_ACCESS_TOKEN: ${{ secrets.PHRASE_ACCESS_TOKEN }}
      SENTRY_AUTH_TOKEN: ${{ vars.SENTRY_AUTH_TOKEN }}
      PAYMENT_API_URL: ${{ vars.PAYMENT_API_URL }}
    steps:
      ############################################
      #
      # Setup
      #
      ############################################
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}

      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"    
        
      - name: Cache yarn
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      - name: Install Vercel CLI
        run: yarn global add vercel@latest
        
      - name: Install dependencies
        run: yarn install --frozen-lockfile  --immutable

      ############################################
      #
      # Translations management
      #
      ############################################
      - name: Pull translations
        if : github.ref_name == 'staging' || github.ref_name == 'stable'
        run: yarn i18n:pull ${{ github.ref_name }}
        env:
          LOKALISE_PROJECT_ID: ${{ vars.LOKALISE_PROJECT_ID }}
          LOKALISE_TOKEN: ${{ secrets.LOKALISE_TOKEN }}

      - name: Extract translations keys
        run: yarn i18n:extract

      - name: Push translations
        if : github.ref_name == 'staging' || github.ref_name == 'stable'
        run: yarn i18n:push ${{ github.ref_name }}
        env:
          LOKALISE_PROJECT_ID: ${{ vars.LOKALISE_PROJECT_ID }}
          LOKALISE_TOKEN: ${{ secrets.LOKALISE_TOKEN }}

      
      ############################################
      #
      # JavaScript build and tests
      #
      ############################################
   
      - name: JavaScript build
        run: yarn build

      - name: Lint
        run: yarn lint
      
      - name: Type check
        run: yarn typecheck

      - name: Test
        run: yarn test


      ############################################
      #
      # Bump version
      #
      ############################################
      - name: Bump version
        run: |
          yarn bump-version
          if [ "$GITHUB_REF" == "refs/heads/main" ]; then
            yarn write-dev-changelog
          fi
        env:
          github_token: ${{ secrets.ADMIN_GITHUB_TOKEN }}

      
      ############################################
      #
      # Precompiled Queries merging
      #
      ############################################
      - name: Force rebuild the query-map.json
        run: yarn relay:build --repersist
        if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stable'

      - name: Update persisted queries
        id: query-map-updated
        if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stable'
        run: yarn persist-queries
        # ADD this once we support multiple versions
        #env:
          # LAST_SUPPORTED_APP_VERSION: ${{ vars.LAST_SUPPORTED_APP_VERSION }}

      
      ############################################
      #
      # Commit changes
      #
      ############################################
      - name: Git config
        run: |
          git config user.name "Azzapp Dev Bot"
          git config user.email "azzapp-dev-bot@azzapp.com"
      - name: Commit version bump
        run: |
          git add .
          git commit -m "chore: bump version [skip ci]"
          git push origin $GITHUB_REF_NAME
          yarn install --frozen-lockfile  --immutable
        
      ############################################
      #
      # PlanetScale schema migration
      #
      ############################################
      - name: PlanetScale - Check if migration is needed
        id: planetscale_migration_needed
        working-directory: packages/data
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          yarn introspect
          yarn generate-migration
          HAS_CHANGE="false"
          if compgen -G "drizzle/0001*" > /dev/null; then
              cat $(compgen -G "drizzle/0001*")
              HAS_CHANGE="true"
          fi
          echo "has_change=$HAS_CHANGE" >> $GITHUB_OUTPUT
         
      - name: PlanetScale - Extract branch name
        if: ${{ steps.planetscale_migration_needed.outputs.has_change == 'true'}}
        run: echo "branch=$(echo ci-${GITHUB_SHA})" >> $GITHUB_OUTPUT
        id: extract_branch
        
      - name: PlanetScale - Create a branch
        if: ${{ steps.planetscale_migration_needed.outputs.has_change == 'true'}}
        uses: planetscale/create-branch-action@v1
        id: create_branch
        with:
          org_name: azzapp
          database_name: azzapp
          branch_name: ${{ steps.extract_branch.outputs.branch }}
          from: ${{ github.ref_name }}
          wait: true
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      
      - name: PlanetScale - Create a password
        if: ${{ steps.planetscale_migration_needed.outputs.has_change == 'true'}}
        uses: planetscale/create-branch-password-action@v1
        id: create_password
        with:
          org_name: azzapp
          database_name: azzapp
          branch_name: ${{ steps.extract_branch.outputs.branch }}
          name: 'pass-${{ steps.extract_branch.outputs.branch }}'
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}

      - name: PlanetScale - Apply drizzle changes
        if: ${{ steps.planetscale_migration_needed.outputs.has_change == 'true'}}
        working-directory: packages/data
        run: |
          export DATABASE_URL="mysql://${{ steps.create_password.outputs.username }}:${{ steps.create_password.outputs.password }}@${{ steps.create_password.outputs.hostname }}/azzapp?ssl={\"rejectUnauthorized\":true}"
          yarn push-migration
            

      - name: PlanetScale - Create a deploy request
        if: ${{ steps.planetscale_migration_needed.outputs.has_change == 'true'}}
        uses: planetscale/create-deploy-request-action@v1
        id: create_deploy_request
        with:
          org_name: azzapp
          database_name: azzapp
          branch_name: ${{ steps.extract_branch.outputs.branch }}
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
            
      - name: PlanetScale - Deploy the changes
        if: ${{ steps.planetscale_migration_needed.outputs.has_change == 'true'}}
        uses: planetscale/deploy-deploy-request-action@v1
        with:
          org_name: azzapp
          database_name: azzapp
          number: ${{ steps.create_deploy_request.outputs.number }}
          wait: true
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}

      ############################################
      #
      # Deploy the web app to Vercel 
      #
      ############################################
      - name: Azzapp Web - Pull Vercel configuration 
        env:
          VERCEL_PROJECT_ID: "azzapp"
        run: |
          ENVIRONMENT="preview"
          ADDITIONAL_ARGS=""
          GITHUB_REF="${{ github.ref }}"
          if [ "$GITHUB_REF" == "refs/heads/stable" ]; then
            ENVIRONMENT="production"
          elif [ "$GITHUB_REF" == "refs/heads/main" ]; then
            ADDITIONAL_ARGS="--git-branch=main"
          fi
          vercel pull --yes --environment=$ENVIRONMENT --token=${{ secrets.VERCEL_TOKEN }} $ADDITIONAL_ARGS

      - name: Azzapp Web - Vercel build
        env:
          VERCEL_PROJECT_ID: "azzapp"
        run: |
          ADDITIONAL_ARGS=""
          GITHUB_REF="${{ github.ref }}"
          if [ "$GITHUB_REF" == "refs/heads/stable" ]; then
            ADDITIONAL_ARGS="--prod"
          fi
          vercel build --token=${{ secrets.VERCEL_TOKEN }} $ADDITIONAL_ARGS

      - name: Azzapp Web - Vercel deployment
        env:
          VERCEL_PROJECT_ID: "azzapp"
        run: |
          ADDITIONAL_ARGS=""
          GITHUB_REF="${{ github.ref }}"
          if [ "$GITHUB_REF" == "refs/heads/stable" ]; then
            ADDITIONAL_ARGS="--prod"
          fi
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --meta githubCommitRef=${{ github.ref_name }} $ADDITIONAL_ARGS

      ############################################
      #
      # Deploy the backoffice to Vercel 
      #
      ############################################

      # Vercel already installed in web app deployment

      - name: Azzapp Backoffice - Pull Vercel configuration 
        env:
          VERCEL_PROJECT_ID: "azzapp-backoffice"
        run: |
          ENVIRONMENT="preview"
          ADDITIONAL_ARGS=""
          GITHUB_REF="${{ github.ref }}"
          if [ "$GITHUB_REF" == "refs/heads/stable" ]; then
            ENVIRONMENT="production"
          elif [ "$GITHUB_REF" == "refs/heads/main" ]; then
            ADDITIONAL_ARGS="--git-branch=main"
          fi
          vercel pull --yes --environment=$ENVIRONMENT --token=${{ secrets.VERCEL_TOKEN }} $ADDITIONAL_ARGS

      - name: Azzapp Backoffice - Vercel build
        env:
          VERCEL_PROJECT_ID: "azzapp-backoffice"
        run: |
          ADDITIONAL_ARGS=""
          GITHUB_REF="${{ github.ref }}"
          if [ "$GITHUB_REF" == "refs/heads/stable" ]; then
            ADDITIONAL_ARGS="--prod"
          fi
          vercel build --token=${{ secrets.VERCEL_TOKEN }} $ADDITIONAL_ARGS

      - name: Azzapp Backoffice - Vercel deployment
        env:
          VERCEL_PROJECT_ID: "azzapp-backoffice"
        run: |
          ADDITIONAL_ARGS=""
          GITHUB_REF="${{ github.ref }}"
          if [ "$GITHUB_REF" == "refs/heads/stable" ]; then
            ADDITIONAL_ARGS="--prod"
          fi
          rm -fr ./packages/web/.next
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --meta githubCommitRef=${{ github.ref_name }} $ADDITIONAL_ARGS
      
      ############################################
      #
      # EAS Native application Build
      #
      ############################################
      - name: Prepare Working Directory for EAS
        working-directory: ./packages/i18n
        run: rm .gitignore

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          
      - name: Build on EAS
        working-directory: ./packages/app
        run: |
          PROFILE="development"
          GITHUB_REF="${{ github.ref }}"
          if [ "$GITHUB_REF" == "refs/heads/stable" ]; then
            PROFILE="production"
          elif [ "$GITHUB_REF" == "refs/heads/staging" ]; then
            PROFILE="staging"
          fi
          eas build --platform all --profile $PROFILE --non-interactive --no-wait
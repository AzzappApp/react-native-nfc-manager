extend type Mutation {
  """
  Save a block text module, create it if it doesn't exist, update it otherwise
  :warning: Every field that is not specified will be set to null
  """
  saveBlockTextModule(input: SaveBlockTextModuleInput!): SaveModulePayload!
  """
  Save a carousel module, create it if it doesn't exist, update it otherwise
  :warning: Every field that is not specified will be set to null
  """
  saveCarouselModule(input: SaveCarouselModuleInput!): SaveModulePayload!
  """
  Save an horizontal photo module, create it if it doesn't exist, update it otherwise
  :warning: Every field that is not specified will be set to null
  """
  saveHorizontalPhotoModule(input: SaveHorizontalPhotoModuleInput!): SaveModulePayload!
  """
  Save a line divider module, create it if it doesn't exist, update it otherwise
  :warning: Every field that is not specified will be set to null
  """
  saveLineDividerModule(input: SaveLineDividerModuleInput!): SaveModulePayload!
  """
  Save a line photoWithTextAndTitle module, create it if it doesn't exist, update it otherwise
  :warning: Every field that is not specified will be set to null
  """
  savePhotoWithTextAndTitleModule(input: SavePhotoWithTextAndTitleModuleInput!): SaveModulePayload!
  """
  Save a simple button module, create it if it doesn't exist, update it otherwise
  :warning: Every field that is not specified will be set to null
  """
  saveSimpleButtonModule(input: SaveSimpleButtonModuleInput!): SaveModulePayload!
  """
  Save a simple text module, create it if it doesn't exist, update it otherwise
  :warning: Every field that is not specified will be set to null
  """
  saveSimpleTextModule(input: SaveSimpleTextModuleInput!): SaveModulePayload!
  """
  Save a social links module, create it if it doesn't exist, update it otherwise
  :warning: Every field that is not specified will be set to null
  """
  saveSocialLinksModule(input: SaveSocialLinksModuleInput!): SaveModulePayload!
}

type SaveModulePayload {
  profile: Profile!
}

input SaveBlockTextModuleInput {
  moduleId: ID
  text: String!
  fontFamily: String
  fontColor: String
  textAlign: TextAlignment
  fontSize: Int
  verticalSpacing: Int
  textMarginVertical: Int
  textMarginHorizontal: Int
  marginHorizontal: Int
  marginVertical: Int
  backgroundId: ID
  backgroundStyle: ModuleBackgroundInputStyle
  textBackgroundId: ID
  textBackgroundStyle: ModuleTextBackgroundInputStyle
}


input SaveCarouselModuleInput {
  moduleId: ID
  images: [String!]!
  squareRatio: Boolean
  borderWidth: Int
  borderColor: String
  borderRadius: Int
  marginVertical: Int
  marginHorizontal: Int
  imageHeight: Int
  gap: Int
  backgroundId: ID
  backgroundStyle: ModuleBackgroundInputStyle
}

input SaveHorizontalPhotoModuleInput {
  moduleId: ID
  image: String!
  borderWidth: Int
  borderRadius: Int
  borderColor: String
  marginHorizontal: Int
  marginVertical: Int
  imageHeight: Int
  color: String
  tintColor: String
  backgroundId: ID
  backgroundStyle: ModuleBackgroundInputStyle
}

input SaveLineDividerModuleInput {
  moduleId: ID
  orientation: LineDividerOrientation
  marginTop: Int
  marginBottom: Int
  height: Int
  colorTop: String
  colorBottom: String
}

input SavePhotoWithTextAndTitleModuleInput {
  moduleId: ID
  image: String!
  text: String!
  title: String!
  fontFamily: String
  fontColor: String
  textAlign: TextAlignment
  imageMargin: CardModulePhotoWithTextAndTitleImageMargin
  horizontalArrangement: HorizontalArrangement
  verticalArrangement: VerticalArrangement
  gap: Int
  fontSize: Int
  textSize: Int
  borderRadius: Int
  marginHorizontal: Int
  marginVertical: Int
  verticalSpacing: Int
  aspectRatio: Float
  backgroundId: ID
  backgroundStyle: ModuleBackgroundInputStyle
}

input SaveSimpleButtonModuleInput {
  moduleId: ID
  buttonLabel: String!
  actionType: String!
  actionLink: String!
  fontFamily: String
  fontColor: String
  fontSize: Int
  buttonColor: String
  borderColor: String
  borderWidth: Int
  borderRadius: Int
  marginTop: Int
  marginBottom: Int
  width: Int
  height: Int
  backgroundId: ID
  backgroundStyle: ModuleBackgroundInputStyle
}

input SaveSimpleTextModuleInput {
  moduleId: ID
  kind: String!
  text: String!
  fontFamily: String
  fontSize: Int
  fontColor: String
  verticalSpacing: Int
  textAlign: TextAlignment
  marginHorizontal: Int
  marginVertical: Int
  backgroundId: ID
  backgroundStyle: ModuleBackgroundInputStyle
}

input SaveSocialLinksModuleInput {
  moduleId: ID
  links: [SocialLinkInput!]!
  iconColor: String
  arrangement: CardModuleSocialLinksArrangement
  iconSize: Int
  borderWidth: Int
  columnGap: Int
  marginTop: Int
  marginBottom: Int
  marginHorizontal: Int
  backgroundId: ID
  backgroundStyle: ModuleBackgroundInputStyle
}

input SocialLinkInput {
  socialId: String!
  link: String!
  position: Int!
}

"""
Style of the background of a module
"""
input ModuleBackgroundInputStyle {
  backgroundColor: String!
  patternColor: String!
}

input ModuleTextBackgroundInputStyle {
  backgroundColor: String!
  patternColor: String!
  opacity: Int!
}
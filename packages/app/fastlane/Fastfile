# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require 'dotenv'

default_platform(:ios)


APP_IDENT = ENV['IOS_APP_IDENTIFIER']
IOS_SCHEME = ENV["IOS_SCHEME"]
IOS_APPCLIP_SCHEME = ENV["IOS_APPCLIP_SCHEME"]
EXPORT_METHOD = ENV['IOS_EXPORT_METHOD']
P12_PASSWORD = ENV["IOS_CERTIFICATE_P12_PASSWORD"]
PROFILE_ID = ENV["IOS_PROFILE_ID"]
PROFILECLIP_ID = ENV["IOS_PROFILECLIP_ID"]
CODE_SIGNING_IDENTITY = ENV["IOS_CODE_SIGNING_IDENTITY"]
APP_STORE_CONNECT_API_KEY = ENV["APP_STORE_CONNECT_API_KEY"]
TEAM_ID = "66D3U3GLN6"

platform :ios do
  keychain_created = false

  desc 'Build IOS application.'
  lane :build do
    keychain_created = true
    create_keychain(
      name: "CI",
      password: "CI",
      default_keychain: true,
      unlock: true,
      timeout: 0,
      lock_when_sleeps: false
    )

    # Import certificate and provisioning profile
    PROFILE_PATH = "./ios/certs/#{APP_IDENT}.mobileprovision"
    PROFILE_CLIP_PATH = "./ios/certs/#{APP_IDENT}.Clip.mobileprovision"
    CERTIFICATE_PATH = "./ios/certs/cerfiticate.p12"

    import_certificate(
      keychain_name: "CI",
      keychain_password: "CI",
      certificate_path: CERTIFICATE_PATH,
      certificate_password: P12_PASSWORD,
    )

    install_provisioning_profile(path: PROFILE_PATH)
    install_provisioning_profile(path: PROFILE_CLIP_PATH)

    # Update code signing settings
    pbxprojPath = "ios/azzapp.xcodeproj/project.pbxproj"

    backup_file(path: pbxprojPath)
     
    entitlements_files = {
      "azzapp-dev" => "azzapp-devRelease.entitlements",
      "azzapp-staging" => "azzapp-stagingRelease.entitlements",
      "azzapp" => "azzapp/azzappRelease.entitlements"
    }

    # Determine the entitlements file based on the target
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "ios/azzapp.xcodeproj",
      entitlements_file_path: entitlements_files[IOS_SCHEME]
      targets: [IOS_SCHEME]
    )

    update_project_provisioning(
      xcodeproj: "ios/azzapp.xcodeproj",
      profile: PROFILE_PATH,
      target_filter: IOS_SCHEME,
      code_signing_identity: CODE_SIGNING_IDENTITY
    )

    update_project_provisioning(
      xcodeproj: "ios/azzapp.xcodeproj",
      profile: PROFILE_CLIP_PATH,
      code_signing_identity: CODE_SIGNING_IDENTITY
    )

    # Build the application
    gym(
      scheme: IOS_SCHEME, 
      workspace: "ios/azzapp.xcworkspace",
      configuration: "Release",
      output_directory: "./fastlane/builds",
      export_method: EXPORT_METHOD,
      export_team_id: TEAM_ID,
      export_options: {
        method: EXPORT_METHOD,
        signingStyle: "manual",
        provisioningProfiles: { 
          APP_IDENT => PROFILE_ID,
          "#{APP_IDENT}.Clip" => PROFILECLIP_ID,
        },
        installerSigningCertificate: CODE_SIGNING_IDENTITY
      }
    )
    
    restore_file(path: pbxprojPath)
  end

  lane :deploy do
    api_key = app_store_connect_api_key(
      key_id: "2FWWXZWMHY",
      issuer_id: "913e1653-0bf1-4fd2-8c0d-0d93a6ff4418",
      key_content: APP_STORE_CONNECT_API_KEY,
      is_key_content_base64: true,
      duration: 1200,
      in_house: false
    )

    upload_to_testflight(
      skip_waiting_for_build_processing: true, 
      ipa: "./fastlane/builds/#{IOS_SCHEME}.ipa",
      app_identifier: APP_IDENT,
      submit_beta_review: false,
      api_key: api_key
    )
  end

  after_all do |lane|
    if keychain_created
      delete_keychain(name: "CI")	
    end
  end	

  error do |lane, exception|
    if keychain_created
      delete_keychain(name: "CI")	
    end
  end
end

platform :android do
  APP_IDENT_ANDROID = ENV['ANDROID_APP_IDENTIFIER']
  KEYSTORE_PATH = ENV['ANDROID_KEYSTORE_PATH']
  KEYSTORE_PASSWORD = ENV['ANDROID_KEYSTORE_PASSWORD']
  KEY_ALIAS = ENV['ANDROID_KEY_ALIAS']
  KEY_PASSWORD = ENV['ANDROID_KEY_PASSWORD']
  PLAY_CONFIG_PATH = ENV['PLAY_CONFIG_PATH']
  ANDROID_APP_IDENTIFIER = ENV['ANDROID_APP_IDENTIFIER']
  ANDROID_BUILD_TASK = ENV['ANDROID_BUILD_TASK']

 
  desc 'Build Android application based on ANDROID_TARGET environment variable.'
  lane :build do
    android_target = capitalize_first_letter(ANDROID_BUILD_TASK)
    gradle(
      task: ":app:bundle#{android_target}",
      build_type: "Release",
      project_dir: "./android",
      properties: {
        "android.injected.signing.store.file" => PLAY_CONFIG_PATH,
        "android.injected.signing.store.password" => ANDROID_KEYSTORE_PASSWORD,
        "android.injected.signing.key.alias" => KEY_ALIAS,
        "android.injected.signing.key.password" => KEY_PASSWORD,
      }
    )
  end

   lane :deploy do   
    supply(
      json_key: PLAY_CONFIG_PATH,
      package_name: ANDROID_APP_IDENTIFIER,
      aab: "./app/build/output/bundle/#{ANDROID_BUILD_TASK}Release/app-#{ANDROID_BUILD_TASK}-release.aab",
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      skip_upload_apk: true,
      track: "internal",
    )
   end
end

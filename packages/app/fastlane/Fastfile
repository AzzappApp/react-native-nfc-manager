# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require 'dotenv'

default_platform(:ios)


APP_IDENT = ENV['IOS_APP_IDENTIFIER']
IOS_SCHEME = ENV["IOS_SCHEME"]
EXPORT_METHOD = ENV['IOS_EXPORT_METHOD']
P12_PASSWORD = ENV["IOS_CERTIFICATE_P12_PASSWORD"]
PROFILE_ID = ENV["IOS_PROFILE_ID"]
CODE_SIGNING_IDENTITY = ENV["IOS_CODE_SIGNING_IDENTITY"]
APP_STORE_CONNECT_API_KEY = ENV["APP_STORE_CONNECT_API_KEY"]
TEAM_ID = "66D3U3GLN6"

platform :ios do
  keychain_created = false

  desc 'Build IOS application.'
  lane :build do
    keychain_created = true
    create_keychain(
      name: "CI",
      password: "CI",
      default_keychain: true,
      unlock: true,
      timeout: 0,
      lock_when_sleeps: false
    )

    # Import certificate and provisioning profile
    PROFILE_PATH = "./ios/certs/#{APP_IDENT}.mobileprovision"
    CERTIFICATE_PATH = "./ios/certs/cerfiticate.p12"

    import_certificate(
      keychain_name: "CI",
      keychain_password: "CI",
      certificate_path: CERTIFICATE_PATH,
      certificate_password: P12_PASSWORD,
    )

    install_provisioning_profile(path: PROFILE_PATH)

    # Update code signing settings
    pbxprojPath = "ios/azzapp.xcodeproj/project.pbxproj"

    backup_file(path: pbxprojPath)

    update_code_signing_settings(
      use_automatic_signing: false,
      path: "ios/azzapp.xcodeproj",
    )

    update_project_provisioning(
      xcodeproj: "ios/azzapp.xcodeproj",
      profile: PROFILE_PATH,
      target_filter: IOS_SCHEME,
      code_signing_identity: CODE_SIGNING_IDENTITY
    )

     # Determine the entitlements file based on the target
    entitlements_file = case IOS_SCHEME
                        when "azzapp-dev"
                          "ios/azzapp-devRelease.entitlements"
                        when "azzapp-staging"
                          "ios/azzapp-stagingRelease.entitlements"
                        else
                          "ios/azzapp/azzappRelease.entitlements"
                        end
    
                        # Print the content of the entitlements file
    puts "Entitlements file content:"
    puts File.read(entitlements_file)
    # Build the application
    gym(
      scheme: IOS_SCHEME, 
      workspace: "ios/azzapp.xcworkspace",
      configuration: "Release",
      output_directory: "./fastlane/builds",
      export_method: EXPORT_METHOD,
      export_team_id: TEAM_ID,
      codesigning_identity: CODE_SIGNING_IDENTITY,
      export_options: {
        method: EXPORT_METHOD,
        signingStyle: "manual",
        provisioningProfiles: { 
          APP_IDENT => PROFILE_ID,
        },
        installerSigningCertificate: CODE_SIGNING_IDENTITY,
        entitlements: entitlements_file
      }
    )
    
    restore_file(path: pbxprojPath)
  end

  lane :deploy do
    api_key = app_store_connect_api_key(
      key_id: "2FWWXZWMHY",
      issuer_id: "913e1653-0bf1-4fd2-8c0d-0d93a6ff4418",
      key_content: APP_STORE_CONNECT_API_KEY,
      is_key_content_base64: true,
      duration: 1200,
      in_house: false
    )

    upload_to_testflight(
      skip_waiting_for_build_processing: true, 
      ipa: "./fastlane/builds/#{IOS_SCHEME}.ipa",
      app_identifier: APP_IDENT,
      submit_beta_review: false,
      api_key: api_key
    )
  end

  after_all do |lane|
    if keychain_created
      delete_keychain(name: "CI")	
    end
  end	

  error do |lane, exception|
    if keychain_created
      delete_keychain(name: "CI")	
    end
  end
end

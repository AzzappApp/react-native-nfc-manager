# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require 'dotenv'

default_platform(:ios)

IOS_SCHEME = ENV["IOS_SCHEME"]
EXPORT_METHOD = ENV['IOS_EXPORT_METHOD']
P12_PASSWORD = ENV["IOS_CERTIFICATE_P12_PASSWORD"]
CODE_SIGNING_IDENTITY = "iPhone Distribution: APPCORP (66D3U3GLN6)"
APP_STORE_CONNECT_API_KEY = ENV["APP_STORE_CONNECT_API_KEY"]
TEAM_ID = "66D3U3GLN6"

# Define configuration locally instead of github en variables(limit the number of variables)
ios_config = {
  'azzapp-dev' => {
    'app_ident' => 'com.azzapp.app-dev',
    'app_id' => '55b2e933-6341-425b-aa1c-ae2844175199',
    'appclip_scheme' => 'ShareContactAppClip-dev',
    'appclip_ident' => 'com.azzapp.app-dev.Clip',
    'appclip_widget_id' => 'b93817b0-8552-49fa-b2b2-2ee49f75ac97',
    'widget_scheme' => 'azzappWidgetExtension-dev',
    'widget_ident' => 'com.azzapp.app-dev.azzappWidget',
    'profile_widget_id' => 'e9c03e2f-6c53-44e2-b957-49f3af207fff'
  },
  'azzapp-staging' => {
    'app_ident' => 'com.azzapp.app-staging',
    'app_id' => '9b36aebe-540b-490d-bc2b-7d7004a4369e',
    'appclip_scheme' => 'ShareContactAppClip-staging',
    'appclip_ident' => 'com.azzapp.app-staging.Clip',
    'appclip_widget_id' => 'a754a538-920d-415e-a75a-3d20edd00288',
    'widget_scheme' => 'azzappWidgetExtension-staging',
    'widget_ident' => 'com.azzapp.app-staging.azzappWidget',
    'profile_widget_id' => '434a482f-0338-4bf1-81ad-a2abbfa0ed3a'
  },
  'azzapp' => {
    'app_ident' => 'com.azzapp.app',
    'app_id' => 'f560fb88-1a61-4a1f-bb58-ab278782ad81',
    'appclip_scheme' => 'ShareContactAppClip',
    'appclip_ident' => 'com.azzapp.app.Clip',
    'appclip_widget_id' => '9cb8081b-67e4-4e20-bba9-f590729bf5ec',
    'widget_scheme' => 'azzappWidgetExtension',
    'widget_ident' => 'com.azzapp.app.azzappWidget',
    'profile_widget_id' => '06d36134-e098-4201-8e8b-fa7176de3f8c'
  },
}

entitlements_files = {
  "azzapp-dev" => "azzapp-devRelease.entitlements",
  "azzapp-staging" => "azzapp-stagingRelease.entitlements",
  "azzapp" => "azzapp/azzappRelease.entitlements"
}

clip_entitlements_files = {
  "azzapp-dev" => "ShareContactAppClip/ShareContactAppClip-dev.entitlements",
  "azzapp-staging" => "ShareContactAppClip/ShareContactAppClip-staging.entitlements",
  "azzapp" => "ShareContactAppClip/ShareContactAppClip.entitlements"
}

widget_entitlements_files = {
  "azzapp-dev" => "azzappWidget/azzappWidgetExtension-dev.entitlements",
  "azzapp-staging" => "azzappWidget/azzappWidgetExtension-staging.entitlements",
  "azzapp" => "azzappWidget/azzappWidgetExtension.entitlements"
}

platform :ios do
  keychain_created = false

  desc 'Build iOS application native part.'
  lane :build_native do
    # Build the application
    gym(
      scheme: IOS_SCHEME,
      workspace: "ios/azzapp.xcworkspace",
      configuration: "Release",
      output_directory: "./fastlane/builds",
      archive_path: "./fastlane/builds/azzapp.xcarchive",
      skip_package_ipa: true,
      skip_codesigning: true
    )
  end

  desc 'Build IOS application.'
  lane :package do
    ###########################
    # Dynamic variables
    ###########################
    config             = ios_config[IOS_SCHEME]

    app_ident          = config['app_ident']
    clip_ident         = config['appclip_ident']
    widget_ident       = config['widget_ident']

    ios_appclip_scheme = config['appclip_scheme']
    ios_widget_scheme  = config['widget_scheme']

    profile_app_id     = config['app_id']
    profile_clip_id    = config['appclip_widget_id']
    profile_widget_id  = config['profile_widget_id']

    archive_path       = './fastlane/builds/azzapp.xcarchive'

    version_number = ENV['VERSION_NUMBER']
    build_number   = ENV['BUILD_NUMBER']

    cert_path         = './ios/certs/certificate.p12'
    profile_app_path  = "./ios/certs/#{app_ident}.mobileprovision"
    profile_clip_path = "./ios/certs/#{clip_ident}.mobileprovision"
    profile_wid_path  = "./ios/certs/#{widget_ident}.mobileprovision"

    ###########################
    # Prepare keychain + provisioning profiles
    ###########################
    keychain_created = true
    create_keychain(name: 'CI', password: 'CI', default_keychain: true, unlock: true, timeout: 0, lock_when_sleeps: false)

    import_certificate(keychain_name: 'CI', keychain_password: 'CI', certificate_path: cert_path, certificate_password: P12_PASSWORD)

    install_provisioning_profile(path: profile_app_path)
    install_provisioning_profile(path: profile_clip_path)
    install_provisioning_profile(path: profile_wid_path)

    ###########################
    # Update archive version
    ###########################
    plists = [
      "ios/azzapp/Info.plist",
      "ios/ShareContactAppClip/Info.plist",
      "#{archive_path}/Info.plist",
      "#{archive_path}/Products/Applications/AppClips/#{ios_appclip_scheme}.app/Info.plist",
      "#{archive_path}/Products/Applications/PlugIns/#{ios_widget_scheme}.appex/Info.plist",
      "#{archive_path}/dSYMs/#{IOS_SCHEME}.app.dSYM/Contents/Info.plist"
      "#{archive_path}/dSYMs/#{ios_appclip_scheme}.appex.dSYM/Contents/Info.plist",
      "#{archive_path}/dSYMs/#{widget_scheme}.appex.dSYM/Contents/Info.plist",
    ]
    plists.each do |plist|
      set_info_plist_value(path: plist, key: 'CFBundleVersion', value: version_number)
      set_info_plist_value(path: plist, key: 'CFBundleShortVersionString', value: build_number)
    end

    ############################
    # Update pbxproj
    ############################
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "ios/azzapp.xcodeproj",
      entitlements_file_path: entitlements_files[IOS_SCHEME],
      targets: [IOS_SCHEME],
      code_sign_identity: CODE_SIGNING_IDENTITY
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      path: "ios/azzapp.xcodeproj",
      entitlements_file_path: clip_entitlements_files[ios_appclip_scheme],
      targets: [ios_appclip_scheme],
      code_sign_identity: CODE_SIGNING_IDENTITY
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      path: "ios/azzapp.xcodeproj",
      entitlements_file_path: widget_entitlements_files[ios_widget_scheme],
      targets: [ios_widget_scheme],
      code_sign_identity: CODE_SIGNING_IDENTITY
    )

    update_project_provisioning(
      xcodeproj: "ios/azzapp.xcodeproj",
      profile: profile_app_path,
      target_filter: IOS_SCHEME,
      code_signing_identity: CODE_SIGNING_IDENTITY,
      build_configuration: "Release"
    )

    update_project_provisioning(
      xcodeproj: "ios/azzapp.xcodeproj",
      profile: profile_clip_path,
      code_signing_identity: CODE_SIGNING_IDENTITY,
      target_filter: ios_appclip_scheme,
      build_configuration: "Release"
    )

    update_project_provisioning(
      xcodeproj: "ios/azzapp.xcodeproj",
      profile: profile_wid_path,
      code_signing_identity: CODE_SIGNING_IDENTITY,
      target_filter: ios_widget_scheme,
      build_configuration: "Release"
    )


    ###########################
    # Export IPA from the archive
    ###########################
    gym(
      scheme: IOS_SCHEME,
      workspace: "ios/azzapp.xcworkspace",
      configuration: "Release",
      output_directory: "./fastlane/builds",
      export_method: EXPORT_METHOD,
      export_team_id: TEAM_ID,
      skip_build_archive: true,
      skip_profile_detection: true,
      archive_path: "./fastlane/builds/azzapp.xcarchive",
      export_options: {
        method: EXPORT_METHOD,
        signingStyle: "manual",
        provisioningProfiles: {
          app_ident => profile_app_id,
          clip_ident => profile_clip_id,
          widget_ident => profile_widget_id
        },
        installerSigningCertificate: CODE_SIGNING_IDENTITY,
        distributionBundleIdentifier: app_ident,
      }
    )

    ###########################
    # SENTRY SOURCEMAP UPLOAD
    ###########################
    release_name = "#{app_ident}@#{version_number}+#{build_number}"

    # Upload vers Sentry via le plugin officiel
    sentry_upload_sourcemap(
      auth_token: ENV['SENTRY_AUTH_TOKEN'],
      org_slug: ENV['SENTRY_ORG'],
      project_slug: ENV['SENTRY_PROJECT'],
      version: release_name,
      app_identifier: app_ident,
      build: build_number,
      dist: build_number,
      sourcemap: [
        './fastlane/builds/sourcemaps/main.jsbundle', 
        './fastlane/builds/sourcemaps/main.jsbundle.map'
      ],
      rewrite: true
    )
  end

  lane :deploy do
    api_key = app_store_connect_api_key(
      key_id: "2FWWXZWMHY",
      issuer_id: "913e1653-0bf1-4fd2-8c0d-0d93a6ff4418",
      key_content: APP_STORE_CONNECT_API_KEY,
      is_key_content_base64: true,
      duration: 1200,
      in_house: false
    )

    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      ipa: "./fastlane/builds/#{IOS_SCHEME}.ipa",
      app_identifier: ios_config[IOS_SCHEME]['app_ident'],
      submit_beta_review: false,
      api_key: api_key
    )
  end

  after_all do |lane|
    if keychain_created
      delete_keychain(name: "CI")
    end
  end

  error do |lane, exception|
    if keychain_created
      delete_keychain(name: "CI")
    end
  end
end

platform :android do
  APP_IDENT_ANDROID = ENV['ANDROID_APP_IDENTIFIER']
  KEYSTORE_PATH = ENV['ANDROID_KEYSTORE_PATH']
  KEYSTORE_PASSWORD = ENV['ANDROID_KEYSTORE_PASSWORD']
  KEY_ALIAS = ENV['ANDROID_KEY_ALIAS']
  KEY_PASSWORD = ENV['ANDROID_KEY_PASSWORD']
  PLAY_CONFIG_PATH = ENV['PLAY_CONFIG_PATH']
  ANDROID_APP_IDENTIFIER = ENV['ANDROID_APP_IDENTIFIER']
  ANDROID_BUILD_TASK = ENV['ANDROID_BUILD_TASK'] || "development"
  android_target = ANDROID_BUILD_TASK[0].upcase + ANDROID_BUILD_TASK[1..-1]

  desc 'Build Android application based on ANDROID_TARGET environment variable.'
  lane :build do
    flags = "--build-cache"
    flags << " -PreactNativeArchitectures=arm64-v8a" if ENV["DEVELOPMENT_BUILD"] == "true"
    gradle(
      task: "app:bundle#{android_target}",
      build_type: "Release",
      project_dir: "./android",
      print_command_output: true,
      print_command: true,
      flags: flags,
      properties: {
        "android.injected.signing.store.file" => KEYSTORE_PATH,
        "android.injected.signing.store.password" => KEYSTORE_PASSWORD,
        "android.injected.signing.key.alias" => KEY_ALIAS,
        "android.injected.signing.key.password" => KEY_PASSWORD
      }
    )
    puts Actions.lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
    puts Actions.lane_context[SharedValues::GRADLE_ALL_AAB_OUTPUT_PATHS]
    puts Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    puts Actions.lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
  end
  
  lane :deploy do
    AAB_PATH = ENV['AAB_PATH']
    puts "deploy"
    puts Actions.lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
    puts Actions.lane_context[SharedValues::GRADLE_ALL_AAB_OUTPUT_PATHS]
    puts Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    puts Actions.lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
    supply(
      json_key: PLAY_CONFIG_PATH,
      package_name: ANDROID_APP_IDENTIFIER,
      aab: AAB_PATH,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      skip_upload_apk: true,
      track: "internal"
    )
  end
end

def update_project_version(xcodeproj:, target:, version:, value:)
  require 'xcodeproj'

  project_path = xcodeproj
  project = Xcodeproj::Project.open(project_path)

  project.targets.each do |proj_target|
    if proj_target.name == target
      proj_target.build_configurations.each do |config|
        config.build_settings[value] = version
      end
    end
  end

  project.save
end

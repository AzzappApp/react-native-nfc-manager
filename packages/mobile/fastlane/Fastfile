
platform :ios do
  MATCH_TYPE = ENV['MATCH_TYPE']
  EXPORT_METHOD = ENV['EXPORT_METHOD']
  GIT_BASIC_AUTH = ENV['GIT_BASIC_AUTH']


  desc "Generate provisioning profile and register test devices"
  lane :generate_profiles do 
    register_devices(devices_file: "./fastlane/test-devices.txt")
    match(
      type: MATCH_TYPE, 
      git_basic_authorization: GIT_BASIC_AUTH,
      force_for_new_devices: true,
      api_key_path: "./fastlane/appstore_api_key.json",
    )
  end

  desc "Build IOS application"
  lane :build do
    app_identifier = "com.fadioit.azzapp"
    pbxprojPath = "ios/azzapp.xcodeproj/project.pbxproj"

    setup_ci if ENV['CI']
    backup_file(path: pbxprojPath)

    match(
      type: MATCH_TYPE, 
      git_basic_authorization: GIT_BASIC_AUTH,
      api_key_path: "./fastlane/appstore_api_key.json",
      readonly: true
    )

    profile = ENV["sigh_#{app_identifier}_#{MATCH_TYPE}_profile-name"]
    profile_path = ENV["sigh_#{app_identifier}_#{MATCH_TYPE}_profile-path"]

    puts "sigh_#{app_identifier}_#{MATCH_TYPE}_profile-name"
    puts profile
    puts "sigh_#{app_identifier}_#{MATCH_TYPE}_profile-path"
    puts profile_path


    update_code_signing_settings(
      use_automatic_signing: false,
      path: "ios/azzapp.xcodeproj",
    )

    update_project_provisioning(
      xcodeproj: "ios/azzapp.xcodeproj",
      profile: profile_path,
      target_filter: "azzapp"
    )
    
    gym(
      scheme: "azzapp", 
      workspace: "ios/azzapp.xcworkspace", 
      configuration: "Release",
      output_directory: "./fastlane/builds",
      export_method: EXPORT_METHOD,
      export_options: {
        method: EXPORT_METHOD,
        signingStyle: "manual",
        provisioningProfiles: { 
          app_identifier => profile,
        }
      }
    )

    restore_file(path: pbxprojPath)
  end
end

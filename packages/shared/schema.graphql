"""GraphQL Schema Root Query object"""
type Query {
  viewer: Viewer!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
}

"""Represent an Application Viewer"""
type Viewer {
  user: User

  """
  Return a list of User that this user might possibility be interested in (followed User or promoted one)
  """
  recommandedUsers(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): UserConnection!
}

"""Represent an Azzapp User"""
type User implements Node {
  id: ID!
  revision: String!
  firstName: String
  lastName: String

  """
  Return a list of User that this user might possibility be interested in (followed User or promoted one)
  """
  recommandedUsers(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int
  ): UserConnection!
}

"""An object with an ID"""
interface Node {
  id: ID!
  revision: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}
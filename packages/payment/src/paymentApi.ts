/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/api/accounting-sequences": {
    /**
     * Retrieves the collection of AccountingSequence resources.
     * @description Retrieves the collection of AccountingSequence resources.
     */
    get: operations["api_accounting-sequences_get_collection"];
    /**
     * Creates a AccountingSequence resource.
     * @description Creates a AccountingSequence resource.
     */
    post: operations["api_accounting-sequences_post"];
  };
  "/api/accounting-sequences/create-unique-sequence": {
    /**
     * Create new Accounting Sequence
     * @description Create new Accounting Sequence
     */
    post: operations["api_accounting-sequencescreate-unique-sequence_post"];
  };
  "/api/accounting-sequences/{id}": {
    /**
     * Retrieves a AccountingSequence resource.
     * @description Retrieves a AccountingSequence resource.
     */
    get: operations["api_accounting-sequences_id_get"];
  };
  "/api/callbacks/{id}": {
    /**
     * Retrieves a Callback resource.
     * @description Retrieves a Callback resource.
     */
    get: operations["api_callbacks_id_get"];
  };
  "/api/client-payment-request-results/{id}": {
    /**
     * Retrieves a ClientPaymentRequestResult resource.
     * @description Retrieves a ClientPaymentRequestResult resource.
     */
    get: operations["api_client-payment-request-results_id_get"];
  };
  "/api/client-payment-requests/check-rebill-manager": {
    /**
     * Check RebillManager
     * @description Check RebillManager and retrieve related transactions infos if any
     */
    post: operations["api_client-payment-requestscheck-rebill-manager_post"];
  };
  "/api/client-payment-requests/create-from-legacy": {
    /**
     * Create ClientRequest from legacy format
     * @description Create ClientRequest from legacy format
     */
    post: operations["api_client-payment-requestscreate-from-legacy_post"];
  };
  "/api/client-payment-requests/create-from-legacy-one-step": {
    /**
     * Create ClientRequest from legacy format with one step
     * @description Create ClientRequest from legacy payment method selection is already done
     */
    post: operations["api_client-payment-requestscreate-from-legacy-one-step_post"];
  };
  "/api/client-payment-requests/create-rebill-manager": {
    /**
     * Create RebillManager from ClientPayementRequest
     * @description Create RebillManager from ClientPayementRequest
     */
    post: operations["api_client-payment-requestscreate-rebill-manager_post"];
  };
  "/api/client-payment-requests/create-rebill-manager-invoice": {
    /**
     * Create Invoice from RebillManager.Transaction from ClientPayementRequest
     * @description Create Invoice from RebillManager.Transaction from ClientPayementRequest
     */
    post: operations["api_client-payment-requestscreate-rebill-manager-invoice_post"];
  };
  "/api/client-payment-requests/rebill-manager-transaction-infos": {
    /**
     * Get RebillManager transaction Infos
     * @description Get RebillManager transaction Infos
     */
    post: operations["api_client-payment-requestsrebill-manager-transaction-infos_post"];
  };
  "/api/client-payment-requests/rebill-transaction": {
    /**
     * Rebill Transaction
     * @description Rebill Transaction using ALIAS AND Provider ID
     */
    post: operations["api_client-payment-requestsrebill-transaction_post"];
  };
  "/api/client-payment-requests/refund-transaction": {
    /**
     * Refund Transaction
     * @description Refund Transaction
     */
    post: operations["api_client-payment-requestsrefund-transaction_post"];
  };
  "/api/client-payment-requests/stop-rebill-manager": {
    /**
     * Stop RebillManager
     * @description Stop RebillManager
     */
    post: operations["api_client-payment-requestsstop-rebill-manager_post"];
  };
  "/api/client-payment-requests/ulid/{ulid}": {
    /**
     * Retrieves a ClientPaymentRequest resource.
     * @description Retrieves a ClientPaymentRequest resource.
     */
    get: operations["api_client-payment-requestsulid_ulid_get"];
  };
  "/api/client-payment-requests/{id}": {
    /**
     * Retrieves a ClientPaymentRequest resource.
     * @description Retrieves a ClientPaymentRequest resource.
     */
    get: operations["api_client-payment-requests_id_get"];
  };
  "/api/clients/{id}": {
    /**
     * Retrieves a Client resource.
     * @description Retrieves a Client resource.
     */
    get: operations["api_clients_id_get"];
  };
  "/api/login_check": {
    /**
     * Creates a user token.
     * @description Creates a user token.
     */
    post: operations["login_check_post"];
  };
  "/api/payment-method-group-members": {
    /**
     * Retrieves the collection of PaymentMethodGroupMember resources.
     * @description Retrieves the collection of PaymentMethodGroupMember resources.
     */
    get: operations["api_payment-method-group-members_get_collection"];
  };
  "/api/payment-method-group-members/{id}": {
    /**
     * Retrieves a PaymentMethodGroupMember resource.
     * @description Retrieves a PaymentMethodGroupMember resource.
     */
    get: operations["api_payment-method-group-members_id_get"];
  };
  "/api/payment-method-group/{paymentMethodGroupId}/members": {
    /**
     * Retrieves the collection of PaymentMethodGroupMember resources.
     * @description Retrieves the collection of PaymentMethodGroupMember resources.
     */
    get: operations["api_payment-method-group_paymentMethodGroupIdmembers_get_collection"];
  };
  "/api/payment-method-groups": {
    /**
     * Retrieves the collection of PaymentMethodGroup resources.
     * @description Retrieves the collection of PaymentMethodGroup resources.
     */
    get: operations["api_payment-method-groups_get_collection"];
  };
  "/api/payment-method-groups/name/{name}": {
    /**
     * Retrieves a PaymentMethodGroup resource.
     * @description Retrieves a PaymentMethodGroup resource.
     */
    get: operations["api_payment-method-groupsname_name_get"];
  };
  "/api/payment-method-groups/{id}": {
    /**
     * Retrieves a PaymentMethodGroup resource.
     * @description Retrieves a PaymentMethodGroup resource.
     */
    get: operations["api_payment-method-groups_id_get"];
  };
  "/api/payment-methods/{id}": {
    /**
     * Retrieves a PaymentMethod resource.
     * @description Retrieves a PaymentMethod resource.
     */
    get: operations["api_payment-methods_id_get"];
  };
  "/api/psp-accounts/{id}": {
    /**
     * Retrieves a PspAccount resource.
     * @description Retrieves a PspAccount resource.
     */
    get: operations["api_psp-accounts_id_get"];
  };
  "/api/psps/{id}": {
    /**
     * Retrieves a Psp resource.
     * @description Retrieves a Psp resource.
     */
    get: operations["api_psps_id_get"];
  };
  "/api/redirects/{id}": {
    /**
     * Retrieves a Redirect resource.
     * @description Retrieves a Redirect resource.
     */
    get: operations["api_redirects_id_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    "AccountingSequence.AccountingSequenceCreatorDto.jsonld": {
      /**
       * Format: iri-reference
       * @description Accounting Sequence Iri
       * @example /api/accounting-sequences/1
       */
      accountingSequence: Record<string, never>;
    };
    "AccountingSequence.AccountingSequenceCreatorResultDto.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      /**
       * @description number
       * @example 200
       */
      number?: Record<string, never>;
    };
    "AccountingSequence.jsonld-accountingSequence.create": Record<string, never>;
    "AccountingSequence.jsonld-accountingSequence.read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
    };
    "Callback.jsonld-ClientPaymentRequest.read": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      /**
       * @description Callback Method
       * @example POST
       * @enum {string}
       */
      method?: "POST" | "GET";
      /**
       * @description Callback data
       * @example {"var":"value"}
       */
      data?: Record<string, never>;
      /**
       * @description Callback target response http code
       * @example 200
       */
      responseCode?: number;
      /**
       * @description Callback target Url response body
       * @example ACK OK
       */
      responseBody?: string;
      /**
       * Format: date-time
       * @description Callback stamp
       * @example 2023-11-11 02:02:02
       */
      createdAt?: Record<string, never>;
    };
    "Client.jsonld-ClientPaymentRequest.read": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
    };
    "ClientPaymentRequest.ClientPaymentRequestOneStepDto.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      /**
       * @description ClientPaymentRequest ulid
       * @example xxxxxx
       */
      clientPaymentRequestUlid: string;
      /**
       * @description Redirection url where to send the customer
       * @example http://path/to/redirect
       */
      redirectUrl: string;
    };
    "ClientPaymentRequest.LegacyTransactionDto.jsonld": {
      /**
       * @description Transaction Amount in cnts
       * @example 119
       */
      AMOUNT: number;
      /**
       * @description CreditCard holder name
       * @example John Doe
       */
      CARDFULLNAME: string;
      /**
       * @description Unique identifier of the user in your application (e.g. a login or a primary key)
       * @example John.Doe
       */
      CLIENTIDENT: string;
      /**
       * Format: email
       * @description CreditCard holder email
       * @example John.Doe@gmail.com
       */
      CLIENTEMAIL: string;
      /**
       * @description A short description of the operation, can be used to trigger fraud actions.
       * @example CreditCard tokenization for john.doe
       */
      DESCRIPTION: string;
      /**
       * @description Free field will send you back the content of the EXTRADATA you specified ahead.
       * @example some crazy json
       */
      EXTRADATA?: string;
      /**
       * @description Hide the CLIENTEMAIL input on the hosted form. You must supply the CLIENTEMAIL. See the dedicated section for more informations.
       * @example 1 or 0
       */
      HIDECLIENTEMAIL: string;
      /**
       * @description Your processing account technical identifier.
       * @example POOL_XYZ
       */
      IDENTIFIER: string;
      /**
       * @description Your processing account technical identifier.
       * @example fr
       * @enum {string}
       */
      LANGUAGE: "fr" | "en" | "de" | "es" | "it" | "nl" | "zh" | "ru" | "pt" | "sk" | "sv" | "da" | "no";
      /**
       * @description The action you want to process.
       * @example payment
       * @enum {string}
       */
      OPERATIONTYPE: "authorization" | "payment" | "capture" | "refund" | "credit" | "void";
      /**
       * @description Unique ID associated to an order in the merchant’s database (as specified in your initial POST request)
       * @example 1234.111.11.0
       */
      ORDERID: string;
      /**
       * @description Timezone / default value : UTC. Please see the Data sheet dedicated list of available timezones.
       * @example Europe/Paris
       */
      TIMEZONE?: string;
      /**
       * @description Form expiration date. By default, the date is UTC, the timezone can be specified by using the TIMEZONE parameter. yyyy-MM-dd HH:mm:ss
       * @example 2023-01-01 00:11:22
       */
      TRANSACTIONEXPIRATIONDATE?: string;
      /**
       * @description The API protocol version.
       * @example 3.0
       */
      VERSION: string;
      /**
       * @description Merchant’s request for 3D Secure authentication.
       * @example yes
       * @enum {string}
       */
      "3DSECURE": "yes" | "no";
      /**
       * @description Amount of the authentication in the smallest money decimal (e.g. cents for euro). Example: 10 EUR is submitted as 1000. Shall be used if the authentication amount differs from the transaction amount. By default, Dalenys considers that the authentication amount equals the transaction amount.
       * @example 1000
       */
      "3DSECUREAUTHENTICATIONAMOUNT"?: number;
      /**
       * @description The date the cardholder made a change to his/her account on the merchant’s website, including billing or shipping address, new means of payment, or adding new user(s).
       * @example 2018-01-10
       */
      ACCOUNTCHANGEDATE?: string;
      /**
       * @description The date on which the cardholder opened his/her account on the merchant site.
       * @example 2018-01-10
       */
      ACCOUNTCREATIONDATE?: string;
      /**
       * @description The billing address. Be careful not to integrate any line breaks.
       * @example 120 Avenue du Marechal Leclerc
       */
      BILLINGADDRESS?: string;
      /**
       * @description The billing address. Be careful not to integrate any line breaks.
       * @example PARIS
       */
      BILLINGCITY?: string;
      /**
       * @description The country code (ISO_3166-1_alpha-2).
       * @example FR
       */
      BILLINGCOUNTRY?: string;
      /**
       * @description The billing postal code.
       * @example 75001
       */
      BILLINGPOSTALCODE?: string;
      /**
       * @description Indicates the merchandise delivery timeframe.
       * @example electronic
       * @enum {string}
       */
      DELIVERYTIMEFRAME?: "electronic" | "sameday" | "overnight" | "longer";
      /**
       * @description The date the cardholder made a password change or account reset on the merchant site.
       * @example 2011-11-11
       */
      PASSWORDCHANGEDATE?: string;
      /**
       * @description The shipping address.
       * @example 55 rue de la liberté
       */
      SHIPTOADDRESS?: string;
      /**
       * @description The shipping address.
       * @example PARIS
       */
      SHIPTOCITY?: string;
      /**
       * @description The country code (ISO_3166-1_alpha-2).
       * @example FR
       */
      SHIPTOCOUNTRY?: string;
      /**
       * @description The shipping postal code.
       * @example 75001
       */
      SHIPTOPOSTALCODE?: string;
      /**
       * @description Shipping indicator. The parameter DELIVERYEMAIL is mandatory when edelivery mode is set.
       * The other ship to address fields are optional when ‘storepickup’, travelpickup or other is set.
       * Possible values:
       * billing: Ship to cardholder’s billing address
       * verified: Ship to another verified address on file with merchant
       * new: Ship to address that is different than the cardholder’s billing address
       * storepickup: Pick-up at local store (Store address shall be populated in shipping address fields)
       * edelivery: Digital goods (includes online services, electronic gift cards and redemption codes)
       * travelpickup: Travel and Event tickets, not shipped
       * other: Other (for example, Gaming, digital services not shipped, emedia subscriptions, etc.)
       * @example edelivery
       * @enum {string}
       */
      SHIPTOADDRESSTYPE?: "billing" | "verified" | "new" | "storepickup" | "edelivery" | "travelpickup" | "other";
      /**
       * @description The transaction’s hash as described in the dedicated section.
       * @example XXXXXXXXXXXXXX
       */
      HASH: string;
      /**
       * @description Url where the shopper is redirected post payement
       * @example https://path/to/redirectKO
       */
      REDIRECTURLSUCCESS?: string;
      /**
       * @description Url where the shopper is redirected post payement in case of success
       * @example https://path/to/redirectOK
       */
      REDIRECTURLCANCEL?: string;
      /**
       * @description Url where the callback is sent post payement in case of failure
       * @example https://path/to/callback
       */
      CALLBACKURL?: string;
      /**
       * @description Force Alias Creation in certain PSP
       * @example YES
       */
      CREATEALIAS?: string;
    };
    "ClientPaymentRequest.LegacyTransactionOneStepDto.jsonld": {
      /**
       * @description Transaction Amount in cnts
       * @example 119
       */
      AMOUNT: number;
      /**
       * @description CreditCard holder name
       * @example John Doe
       */
      CARDFULLNAME: string;
      /**
       * @description Unique identifier of the user in your application (e.g. a login or a primary key)
       * @example John.Doe
       */
      CLIENTIDENT: string;
      /**
       * Format: email
       * @description CreditCard holder email
       * @example John.Doe@gmail.com
       */
      CLIENTEMAIL: string;
      /**
       * @description A short description of the operation, can be used to trigger fraud actions.
       * @example CreditCard tokenization for john.doe
       */
      DESCRIPTION: string;
      /**
       * @description Free field will send you back the content of the EXTRADATA you specified ahead.
       * @example some crazy json
       */
      EXTRADATA?: string;
      /**
       * @description Hide the CLIENTEMAIL input on the hosted form. You must supply the CLIENTEMAIL. See the dedicated section for more informations.
       * @example 1 or 0
       */
      HIDECLIENTEMAIL: string;
      /**
       * @description Your processing account technical identifier.
       * @example POOL_XYZ
       */
      IDENTIFIER: string;
      /**
       * @description Your processing account technical identifier.
       * @example fr
       * @enum {string}
       */
      LANGUAGE: "fr" | "en" | "de" | "es" | "it" | "nl" | "zh" | "ru" | "pt" | "sk" | "sv" | "da" | "no";
      /**
       * @description The action you want to process.
       * @example payment
       * @enum {string}
       */
      OPERATIONTYPE: "authorization" | "payment" | "capture" | "refund" | "credit" | "void";
      /**
       * @description Unique ID associated to an order in the merchant’s database (as specified in your initial POST request)
       * @example 1234.111.11.0
       */
      ORDERID: string;
      /**
       * @description Timezone / default value : UTC. Please see the Data sheet dedicated list of available timezones.
       * @example Europe/Paris
       */
      TIMEZONE?: string;
      /**
       * @description Form expiration date. By default, the date is UTC, the timezone can be specified by using the TIMEZONE parameter. yyyy-MM-dd HH:mm:ss
       * @example 2023-01-01 00:11:22
       */
      TRANSACTIONEXPIRATIONDATE?: string;
      /**
       * @description The API protocol version.
       * @example 3.0
       */
      VERSION: string;
      /**
       * @description Merchant’s request for 3D Secure authentication.
       * @example yes
       * @enum {string}
       */
      "3DSECURE": "yes" | "no";
      /**
       * @description Amount of the authentication in the smallest money decimal (e.g. cents for euro). Example: 10 EUR is submitted as 1000. Shall be used if the authentication amount differs from the transaction amount. By default, Dalenys considers that the authentication amount equals the transaction amount.
       * @example 1000
       */
      "3DSECUREAUTHENTICATIONAMOUNT"?: number;
      /**
       * @description The date the cardholder made a change to his/her account on the merchant’s website, including billing or shipping address, new means of payment, or adding new user(s).
       * @example 2018-01-10
       */
      ACCOUNTCHANGEDATE?: string;
      /**
       * @description The date on which the cardholder opened his/her account on the merchant site.
       * @example 2018-01-10
       */
      ACCOUNTCREATIONDATE?: string;
      /**
       * @description The billing address. Be careful not to integrate any line breaks.
       * @example 120 Avenue du Marechal Leclerc
       */
      BILLINGADDRESS?: string;
      /**
       * @description The billing address. Be careful not to integrate any line breaks.
       * @example PARIS
       */
      BILLINGCITY?: string;
      /**
       * @description The country code (ISO_3166-1_alpha-2).
       * @example FR
       */
      BILLINGCOUNTRY?: string;
      /**
       * @description The billing postal code.
       * @example 75001
       */
      BILLINGPOSTALCODE?: string;
      /**
       * @description Indicates the merchandise delivery timeframe.
       * @example electronic
       * @enum {string}
       */
      DELIVERYTIMEFRAME?: "electronic" | "sameday" | "overnight" | "longer";
      /**
       * @description The date the cardholder made a password change or account reset on the merchant site.
       * @example 2011-11-11
       */
      PASSWORDCHANGEDATE?: string;
      /**
       * @description The shipping address.
       * @example 55 rue de la liberté
       */
      SHIPTOADDRESS?: string;
      /**
       * @description The shipping address.
       * @example PARIS
       */
      SHIPTOCITY?: string;
      /**
       * @description The country code (ISO_3166-1_alpha-2).
       * @example FR
       */
      SHIPTOCOUNTRY?: string;
      /**
       * @description The shipping postal code.
       * @example 75001
       */
      SHIPTOPOSTALCODE?: string;
      /**
       * @description Shipping indicator. The parameter DELIVERYEMAIL is mandatory when edelivery mode is set.
       * The other ship to address fields are optional when ‘storepickup’, travelpickup or other is set.
       * Possible values:
       * billing: Ship to cardholder’s billing address
       * verified: Ship to another verified address on file with merchant
       * new: Ship to address that is different than the cardholder’s billing address
       * storepickup: Pick-up at local store (Store address shall be populated in shipping address fields)
       * edelivery: Digital goods (includes online services, electronic gift cards and redemption codes)
       * travelpickup: Travel and Event tickets, not shipped
       * other: Other (for example, Gaming, digital services not shipped, emedia subscriptions, etc.)
       * @example edelivery
       * @enum {string}
       */
      SHIPTOADDRESSTYPE?: "billing" | "verified" | "new" | "storepickup" | "edelivery" | "travelpickup" | "other";
      /**
       * @description The transaction’s hash as described in the dedicated section.
       * @example XXXXXXXXXXXXXX
       */
      HASH: string;
      /**
       * @description Url where the shopper is redirected post payement
       * @example https://path/to/redirectKO
       */
      REDIRECTURLSUCCESS?: string;
      /**
       * @description Url where the shopper is redirected post payement in case of success
       * @example https://path/to/redirectOK
       */
      REDIRECTURLCANCEL?: string;
      /**
       * @description Url where the callback is sent post payement in case of failure
       * @example https://path/to/callback
       */
      CALLBACKURL?: string;
      /**
       * @description paymentMethodGroupMemberUlid obtainted on selection step
       * @example XXXXXXXXX
       */
      paymentMethodGroupMemberUlid?: string;
      /**
       * @description paymentMethodGroupUlid obtainted on selection step
       * @example XXXXXXXXX
       */
      paymentMethodGroupUlid?: string;
    };
    "ClientPaymentRequest.RebillManagerCheckDto.jsonld": {
      /**
       * @description ClientPayementRequest.ulid
       * @example 00000000-0000-0000-0000-000000000000
       */
      clientPaymentRequestUlid: string;
      rebillManagerId: string;
    };
    "ClientPaymentRequest.RebillManagerCheckResultDto.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      /**
       * @description State of rebillManager
       * @example OFF
       * @enum {string}
       */
      rebill_manager_state: "ON" | "OFF" | "PAUSED";
      /**
       * @description Reason why rebillManager is stopped
       * @example Stopped by support
       */
      rebill_manager_cancel_reason: string;
      /**
       * @description External Reference for rebillManager
       * @example ABCD-AZZP
       */
      rebill_manager_external_reference: string;
      /**
       * @description State of rebillManager lookup
       * @example OK
       * @enum {string}
       */
      status?: "OK" | "KO";
      /**
       * @description Reason of rebillManager lookup failure
       * @example Not found
       */
      reason?: string;
      transactions?: components["schemas"]["RebillManagerTransactionDto.jsonld"][];
    };
    "ClientPaymentRequest.RebillManagerCreateDto.jsonld": {
      /**
       * @description ClientPayementRequest.ulid
       * @example 00000000-0000-0000-0000-000000000000
       */
      clientPaymentRequestUlid: string;
      /**
       * @description Meaningful description of the subscription
       * @example Monthly Subscription for 1 seat
       */
      billing_description: string;
      /**
       * @description Type of the initial period for the subscription, FREE means trial, PAID mean immediate billing
       * @example FREE
       * @enum {string}
       */
      rebill_manager_initial_type: "PREAUTH" | "FREE" | "PAID";
      /**
       * @description Initial Period duration in minutes, example 7 days trial will be 10080 minutes
       * @example 10080
       */
      rebill_manager_initial_duration_min: string;
      /**
       * @description Initial Period Price in cents, 0 if rebill_manager_initial_type = FREE
       * @example 0
       */
      rebill_manager_initial_price_cnts: string;
      /**
       * @description Rebill duration in minute, 0 if ulimited RebillManager will attempt to bill the card untill its stopped or card expired
       * @example 0
       */
      rebill_manager_rebill_duration_mins: string;
      /**
       * @description Rebill Price in cnts, example 29.90 will be 2990
       * @example 2990
       */
      rebill_manager_rebill_price_cnts: string;
      /**
       * @description Rebill Period in Minutes, for example evry 30 days will be 43200 minutes
       * @example 43200
       */
      rebill_manager_rebill_period_mins: string;
      /**
       * @description Retry Rule for failed transactions in https://en.wikipedia.org/wiki/ISO_8601#Durations
       * @example PT1M:PT2M:PT3M
       */
      rebill_manager_fail_rule: string;
      /**
       * @description External Reference for rebillManager
       * @example ABCD-AZZP
       */
      rebill_manager_external_reference: string;
      /**
       * @description Callback url where the rebill manager will notify subscription events
       * @example https://path/to/ur
       */
      rebill_manager_callback_url: string;
    };
    "ClientPaymentRequest.RebillManagerCreateResultDto.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      /**
       * @description RebillManagerId
       * @example 12122
       */
      rebillManagerId: string;
      /**
       * @description State of rebillManager creation
       * @example OK
       * @enum {string}
       */
      status: "OK" | "CREATED" | "KO";
      /**
       * @description Reason of rebillManager creation failure
       * @example Not found
       */
      reason?: string;
    };
    "ClientPaymentRequest.RebillManagerInvoiceCreateDto.jsonld": {
      /**
       * @description ClientPayementRequest.ulid
       * @example 00000000-0000-0000-0000-000000000000
       */
      clientPaymentRequestUlid: string;
      /**
       * @description rebillManagerId returned by /api/client-payment-requests/create-rebill-manager
       * @example 120193210
       */
      rebillManagerId: string;
      /**
       * @description rebillManagerTransactionId returned by /api/client-payment-requests/check-rebill-manager
       * @example 120193210
       */
      rebillManagerTransactionId: string;
      /**
       * @description Invoicing Corp
       * @example Acme Corp
       */
      invoicingCompany?: string;
      /**
       * @description Invoicing Corp address1
       * @example 1 rue de Acmpe
       */
      invoicingAddress1?: string;
      /**
       * @description Invoicing Corp address2
       * @example PO 123
       */
      invoicingAddress2?: string;
      /**
       * @description Invoicing Corp Zip
       * @example 75001
       */
      invoicingZip?: string;
      /**
       * @description Invoicing Corp City
       * @example Paris
       */
      invoicingCity?: string;
      /**
       * @description Invoicing Corp Country
       * @example France
       */
      invoicingCountry?: string;
      /**
       * @description Invoicing Corp Vat number
       * @example FRXXXXXX
       */
      invoicingVat?: string;
      /**
       * @description Invoicing Corp Email
       * @example support@acme-corp.com
       */
      invoicingEmail?: string;
      /**
       * @description Invoiced Customer Company
       * @example Customer Acme
       */
      invoicedCompany?: string;
      /**
       * @description Invoiced Customer firstname
       * @example Customer Firstname
       */
      invoicedFirstname?: string;
      /**
       * @description Invoiced Customer lastname
       * @example Customer Lastname
       */
      invoicedLastname?: string;
      /**
       * @description Invoiced Corp address1
       * @example 1 rue de Acmpe
       */
      invoicedAddress1?: string;
      /**
       * @description Invoiced Corp address2
       * @example PO 123
       */
      invoicedAddress2?: string;
      /**
       * @description Invoiced Corp Zip
       * @example 75001
       */
      invoicedZip?: string;
      /**
       * @description Invoiced Corp City
       * @example Paris
       */
      invoicedCity?: string;
      /**
       * @description Invoiced Corp Country
       * @example France
       */
      invoicedCountry?: string;
      /**
       * @description Invoiced Corp Vat number
       * @example FRXXXXXX
       */
      invoicedVat?: string;
      /**
       * @description Invoiced Customer Email
       * @example customer@example.com
       */
      invoicedEmail?: string;
      /**
       * @description Invoiced Customer Phone
       * @example +33146740817
       */
      invoicedPhone?: string;
      /**
       * @description Invoiced Product Name
       * @example Monthly Subscription for XYZ
       */
      invoicedProduct?: string;
    };
    "ClientPaymentRequest.RebillManagerInvoiceCreateResultDto.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      /**
       * @description RebillManagerTransactionId
       * @example 12122
       */
      rebillManagerId: string;
      /**
       * @description Path to download PDF invoice
       * @example http://path/to/invoice.pdf
       */
      invoicePdfPath?: string;
      /**
       * @description Path to view HTML invoice
       * @example http://path/to/invoice.html
       */
      invoiceHtmlPath?: string;
      /**
       * @description Invoice Ulid
       * @example 0000000333-33333
       */
      invoiceUlid?: string;
      /**
       * @description Invoice Id
       * @example 111111
       */
      invoiceId?: string;
      /**
       * @description Invoice Number
       * @example 123
       */
      invoiceNumber?: Record<string, never>;
      /**
       * Format: date-time
       * @description Invoice Creation stamp
       * @example 2023-11-11 23:33:33
       */
      invoiceCreatedAt?: Record<string, never>;
    };
    "ClientPaymentRequest.RebillManagerStopDto.jsonld": {
      /**
       * @description ClientPayementRequest.ulid
       * @example 00000000-0000-0000-0000-000000000000
       */
      clientPaymentRequestUlid: string;
      /**
       * @description rebillManagerId returned by /api/client-payment-requests/create-rebill-manager
       * @example 120193210
       */
      rebillManagerId: string;
      /**
       * @description Reason why RebillManager is stopped
       * @example Customer requested subscription to end
       */
      stopReason: string;
    };
    "ClientPaymentRequest.RebillManagerStopResultDto.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      /**
       * @description RebillManagerId
       * @example 12122
       */
      rebillManagerId: string;
      /**
       * @description State of rebillManager termination
       * @example OK
       * @enum {string}
       */
      status: "OK" | "KO";
      /**
       * @description Reason of rebillManager termination failure
       * @example Not found
       */
      reason?: string;
    };
    "ClientPaymentRequest.RebillManagerTransactionInfosDto.jsonld": {
      /**
       * @description ClientPayementRequest.ulid
       * @example 00000000-0000-0000-0000-000000000000
       */
      clientPaymentRequestUlid: string;
      /**
       * @description rebillManagerId returned by /api/client-payment-requests/create-rebill-manager
       * @example 120193210
       */
      rebillManagerId: string;
      /**
       * @description rebillManagerTransactionId returned by /api/client-payment-requests/check-rebill-manager
       * @example 120193210
       */
      rebillManagerTransactionId: string;
    };
    "ClientPaymentRequest.RebillManagerTransactionInfosResultDto.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      /**
       * @description RebillManagerId
       * @example 12122
       */
      rebill_manager_id: string;
      /**
       * @description rebillManagerTransactionId
       * @example 120193210
       */
      rebill_manager_transaction_id: string;
      /**
       * @description client_id
       * @example 1231
       */
      client_id: number;
      /**
       * @description paccount_id
       * @example 1231
       */
      paccount_id: number;
      /**
       * Format: date-time
       * @description transaction stamp
       * @example 2024-03-30 22:12:53
       */
      rebill_manager_transaction_stamp: Record<string, never>;
      /**
       * @description transaction_type
       * @example REBILL
       * @enum {string}
       */
      transaction_type: "BILL" | "REBILL" | "REFUND" | "PREAUTH" | "ENCAISSEMENT_PREAUTH";
      transaction?: components["schemas"]["RebillManagerPspTransactionDto.jsonld"];
    };
    "ClientPaymentRequest.RebillTransactionDto.jsonld": {
      /**
       * @description ClientPayementRequest.ulid
       * @example 00000000-0000-0000-0000-000000000000
       */
      MULTIPSP_C_ULID: string;
      /**
       * @description PspAccount.ulid
       * @example 00000000-0000-0000-0000-000000000000
       */
      MULTIPSP_A_ULID: string;
      /**
       * @description Reason of the refund
       * @example Client refund xyz
       */
      REASON?: string;
      /**
       * @description Initial PSP TRANSACTIONID returned in the redirect or callback
       * @example Initial PSP TRANSACTIONID
       */
      TRANSACTIONID?: string;
      /**
       * @description ORDERID unique string
       * @example ORDERID unique string
       */
      ORDERID?: string;
      /**
       * @description Amount in cents
       * @example 100
       */
      AMOUNT: string;
      /**
       * @description ALIAS returned in Transaction
       * @example XUUUUUUUZUUU
       */
      ALIAS: string;
      /**
       * @description CLIENTIDENT
       * @example XUUUUUUUZUUU
       */
      CLIENTIDENT: string;
      /**
       * Format: email
       * @description CLIENTEMAIL
       * @example toto@toto.com
       */
      CLIENTEMAIL: string;
      /**
       * @description CLIENTREFERRER
       * @example http://path/to/url
       */
      CLIENTREFERRER: string;
      /**
       * @description CLIENTUSERAGENT
       * @example Chrome 1.2.3
       */
      CLIENTUSERAGENT: string;
      /**
       * @description CLIENTIP
       * @example Chrome 1.2.3
       */
      CLIENTIP: string;
    };
    "ClientPaymentRequest.RefundTransactionDto.jsonld": {
      /**
       * @description ClientPayementRequest.ulid
       * @example 00000000-0000-0000-0000-000000000000
       */
      MULTIPSP_C_ULID: string;
      /**
       * @description PspAccount.ulid
       * @example 00000000-0000-0000-0000-000000000000
       */
      MULTIPSP_A_ULID: string;
      /**
       * @description Reason of the refund
       * @example Client refund xyz
       */
      REASON?: string;
      /**
       * @description Initial PSP TRANSACTIONID returned in the redirect or callback
       * @example Initial PSP TRANSACTIONID
       */
      TRANSACTIONID?: string;
      /**
       * @description ORDERID unique string
       * @example ORDERID unique string
       */
      ORDERID?: string;
      /**
       * @description Amount in cents
       * @example 100
       */
      AMOUNT: string;
      /**
       * @description Client ip
       * @example 127.0.0.1
       */
      CLIENTIP: string;
      /**
       * @description Client email
       * @example 127.0.0.1
       */
      CLIENTEMAIL: string;
      /**
       * @description ALIAS returned in the redirect
       * @example XXX
       */
      ALIAS: string;
    };
    "ClientPaymentRequest.UnifiedRebillResponseDto.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      IDENTIFIER: string;
      TRANSACTIONID: string;
      ORDERID: string;
      EXECCODE: string;
      MESSAGE: string;
      DESCRIPTOR: string;
      MULTIPSP_C_ULID: string;
      MULTIPSP_A_ULID: string;
      MULTIPSP_UNIFIED_STATUS: string;
    };
    "ClientPaymentRequest.UnifiedRefundResponseDto.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      IDENTIFIER: string;
      TRANSACTIONID: string;
      ORDERID: string;
      AMOUNT: string;
      EXECCODE: string;
      MESSAGE: string;
      DESCRIPTOR: string;
      MULTIPSP_C_ULID: string;
      MULTIPSP_A_ULID: string;
      MULTIPSP_UNIFIED_STATUS: string;
    };
    "ClientPaymentRequest.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      id?: number;
      /**
       * Format: iri-reference
       * @example https://example.com/
       */
      client?: string;
      /** @description serialized LegacyTransactionDto */
      legacyTransactionDto?: string;
      /**
       * Format: date-time
       * @description Creation stamp
       * @example 2023-11-11 22:22:22
       */
      createdAt?: Record<string, never>;
      /**
       * Format: ulid
       * @description ClientPayementRequest.ulid
       * @example 00000000-0000-0000-0000-000000000000
       */
      ulid?: string;
      /**
       * @description LegacyTransactionDto.ORDERID unique request identifier
       * @example 00000000-0000-0000-0000-000000000000
       */
      customerRequestId?: string;
      /**
       * Format: iri-reference
       * @example https://example.com/
       */
      clientPaymentRequestResult?: string | null;
      /**
       * @description Request status
       * @example pending
       * @enum {string}
       */
      status?: "finished" | "pending" | "OTP_DONE";
      /**
       * @description Url where redirect user after ClientPaymentRequest Creation
       * @example http://path/to/redirect
       */
      clientRedirectUrl?: string;
      rebillManagers?: components["schemas"]["RebillManager.jsonld"][];
      callbacks?: string[];
      redirects?: string[];
      rebillManagerCallbackProxies?: components["schemas"]["RebillManagerCallbackProxy.jsonld"][];
      pspCallbackProxies?: components["schemas"]["PspCallbackProxy.jsonld"][];
      pspRedirectProxies?: components["schemas"]["PspRedirectProxy.jsonld"][];
      ipnCallbackProxies?: components["schemas"]["IpnCallbackProxy.jsonld"][];
      rebillManagerInvoices?: components["schemas"]["RebillManagerInvoice.jsonld"][];
      ulidAsString?: string | null;
    };
    "ClientPaymentRequest.jsonld-ClientPaymentRequest.read": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      /** @description serialized LegacyTransactionDto */
      legacyTransactionDto?: string;
      /**
       * Format: date-time
       * @description Creation stamp
       * @example 2023-11-11 22:22:22
       */
      createdAt?: Record<string, never>;
      /**
       * Format: ulid
       * @description ClientPayementRequest.ulid
       * @example 00000000-0000-0000-0000-000000000000
       */
      ulid?: string;
      /**
       * @description LegacyTransactionDto.ORDERID unique request identifier
       * @example 00000000-0000-0000-0000-000000000000
       */
      customerRequestId?: string;
      clientPaymentRequestResult?: components["schemas"]["ClientPaymentRequestResult.jsonld-ClientPaymentRequest.read"] | null;
      /**
       * @description Request status
       * @example pending
       * @enum {string}
       */
      status?: "finished" | "pending" | "OTP_DONE";
      /**
       * @description Url where redirect user after ClientPaymentRequest Creation
       * @example http://path/to/redirect
       */
      clientRedirectUrl?: string;
      callbacks?: components["schemas"]["Callback.jsonld-ClientPaymentRequest.read"][];
      redirects?: components["schemas"]["Redirect.jsonld-ClientPaymentRequest.read"][];
    };
    "ClientPaymentRequestResult.jsonld-ClientPaymentRequest.read": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      /**
       * @description Result status
       * @example pending
       * @enum {string}
       */
      status?: "finished" | "pending" | "OTP_DONE";
      /**
       * @description Psp transaction status
       * @example OK
       * @enum {string}
       */
      transactionStatus?: "OK" | "FAILED" | "PENDING" | "ERROR";
      /**
       * @description Our transaction id, used for RebillManager creation
       * @example 1231231
       */
      transactionId?: string;
      /**
       * @description Psp message explaing the transactionStatus
       * @example The transaction is refused by bank network
       */
      providerResponse?: string;
      /**
       * @description Psp transaction id, used to find the transaction on PSP backoffice
       * @example 1231231
       */
      providerId?: string;
      /**
       * @description Internal Otp Key to acces payment token
       * @example XXXXXXXXX
       */
      otpKey?: string;
      /**
       * @description Internal Otp Token to acces payment token
       * @example 411111_1722_84072082_44654251_BB731e4b930de7004ff8327cebce0d508aeefddaaae6195c5be18e069df61d28_49545e5031f2986bd41c62f8dc01eb0c03e45ce30cba29050606953c432c0973_e1b44c8b3de5ee30550a0ef16d7916c95b65a6e72fb9891cd5c55fc3dee27590_1111
       */
      otpToken?: string;
      /**
       * @description Masked Card Representation
       * @example 411111XXXXX11111
       */
      maskedCard?: string;
      pspAccount?: components["schemas"]["PspAccount.jsonld-ClientPaymentRequest.read"] | null;
      /**
       * @description Unified Status
       * @example OK
       * @enum {string}
       */
      unifiedStatus?: "OK" | "FAILED" | "ERROR";
    };
    "IpnCallbackProxy.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      id?: number;
      /** Format: date-time */
      createdAt?: string;
      /**
       * Format: iri-reference
       * @example https://example.com/
       */
      clientPaymentRequest?: string;
      targetUrl?: string;
      /** Format: ulid */
      ulid?: string;
      method?: string;
      publicUrl?: unknown;
    };
    "PaymentMethod.jsonld-ClientPaymentRequest.read": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      pspAccount?: components["schemas"]["PspAccount.jsonld-ClientPaymentRequest.read"] | null;
      /**
       * @description Payment Method Name
       * @example creditcard
       */
      name?: string;
      /** Format: ulid */
      ulid?: string;
    };
    "PaymentMethodGroup.jsonld-ClientPaymentRequest.read": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
      paymentMethodGroupMembers?: components["schemas"]["PaymentMethodGroupMember.jsonld-ClientPaymentRequest.read"][];
      /** Format: ulid */
      ulid?: string;
    };
    "PaymentMethodGroupMember.jsonld-ClientPaymentRequest.read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      isActive?: boolean;
      paymentMethod?: components["schemas"]["PaymentMethod.jsonld-ClientPaymentRequest.read"];
      /** Format: ulid */
      ulid?: string;
    };
    "Psp.jsonld-ClientPaymentRequest.read": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      name?: string;
    };
    "PspAccount.jsonld-ClientPaymentRequest.read": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      psp?: components["schemas"]["Psp.jsonld-ClientPaymentRequest.read"];
      /**
       * @description Account Name on PSP
       * @example Account Name
       */
      name?: string;
      paymentMethods?: components["schemas"]["PaymentMethod.jsonld-ClientPaymentRequest.read"][];
      /**
       * @description Psp account Currency
       * @example EUR
       * @enum {string}
       */
      currency?: "EUR" | "USD" | "GBP";
      /**
       * @description Psp account sandbox Status
       * @example true
       */
      isSandbox?: boolean;
      /**
       * @description Default Callback url for provider account
       * @example https://path/to/a.com
       */
      callbackUrl?: string;
      /**
       * @description Default Redirect url for provider account
       * @example https://path/to/a.com
       */
      redirectUrl?: string;
    };
    "PspCallbackProxy.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      id?: number;
      /** Format: date-time */
      createdAt?: string;
      /**
       * Format: iri-reference
       * @example https://example.com/
       */
      clientPaymentRequest?: string;
      targetUrl?: string;
      /** Format: ulid */
      ulid?: string;
      method?: string;
      publicUrl?: unknown;
      ulidAsString?: string | null;
    };
    "PspRedirectProxy.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      id?: number;
      /** Format: date-time */
      createdAt?: string;
      /**
       * Format: iri-reference
       * @example https://example.com/
       */
      clientPaymentRequest?: string;
      targetUrlSuccess?: string;
      targetUrlCancel?: string;
      /** Format: ulid */
      ulid?: string;
      method?: string;
      ulidAsString?: string | null;
    };
    "RebillManager.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      id?: number;
      /**
       * Format: iri-reference
       * @example https://example.com/
       */
      clientPayementRequest?: string;
      rebillManagerId?: number | null;
      /** Format: date-time */
      createdAt?: string;
      status?: string;
      reason?: string | null;
    };
    "RebillManagerCallbackProxy.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      id?: number;
      /** Format: date-time */
      createdAt?: string;
      /**
       * Format: iri-reference
       * @example https://example.com/
       */
      clientPaymentRequest?: string;
      targetUrl?: string;
      /** Format: ulid */
      ulid?: string;
      method?: string;
      publicUrl?: unknown;
    };
    "RebillManagerInvoice.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      id?: number;
      number?: number;
      /** Format: ulid */
      ulid?: string;
      /** Format: date-time */
      createAt?: string;
      rebillManagerId?: number;
      rebillManagerTransactionId?: number;
      /**
       * Format: iri-reference
       * @example https://example.com/
       */
      clientPaymentRequest?: string;
      data?: string[];
    };
    "RebillManagerPspTransactionDto.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      /**
       * @description internal transaction id
       * @example 12412
       */
      transaction_id?: string;
      /**
       * Format: date-time
       * @description Transaction stamp
       * @example 2023-01-01 00:00:00
       */
      transaction_stamp: Record<string, never>;
      /**
       * @description Transaction Status
       * @example OK
       * @enum {string}
       */
      transaction_status?: "OK" | "FAILED" | "PENDING" | "ERROR";
      /**
       * @description Psp reason for transaction
       * @example Error psp xyz
       */
      transaction_status_reason?: string;
      /**
       * @description Transaction Amount in cnts
       * @example 119
       */
      amount_cnts?: string;
      /**
       * @description Transaction currency 3Letter code
       * @example EUR
       */
      transaction_currency?: string;
      /**
       * @description Transaction currency 3Letter code
       * @example BILL
       * @enum {string}
       */
      transaction_type?: "BILL" | "REBILL" | "PREAUTH" | "REFUND" | "ENCAISSEMENT_PREAUTH";
      /**
       * @description Transaction Client Reference
       * @example XXXX
       */
      client_reference?: string;
      /**
       * @description External PSP response
       * @example OIZJAOIEJ
       */
      provider_response?: string;
      /**
       * @description External PSP id
       * @example OIZJAOIEJ
       */
      provider_id?: string;
      /**
       * @description Bank descriptor as it appear on customer statement
       * @example azzap.com
       */
      provider_bank_descriptor?: string;
      /**
       * @description Transaction Ip
       * @example 127.0.0.1
       */
      transaction_ip?: string;
    };
    "RebillManagerTransactionDto.jsonld": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      /**
       * @description rebill transaction id
       * @example 12412
       */
      rebill_manager_transaction_id?: string;
      /**
       * @description client_id
       * @example 12412
       */
      client_id?: string;
      /**
       * @description paccount_id
       * @example 12412
       */
      paccount_id?: string;
      /**
       * @description rebill_manager_id
       * @example 12412
       */
      rebill_manager_id?: string;
      /**
       * Format: date-time
       * @description Transaction stamp
       * @example 2023-01-01 00:00:00
       */
      rebill_manager_transaction_stamp: Record<string, never>;
      /**
       * @description transaction_id
       * @example 12412
       */
      transaction_id?: string;
      /**
       * @description Transaction currency 3Letter code
       * @example BILL
       * @enum {string}
       */
      transaction_type?: "BILL" | "REBILL" | "PREAUTH" | "REFUND" | "ENCAISSEMENT_PREAUTH";
      transaction?: components["schemas"]["RebillManagerPspTransactionDto.jsonld"];
    };
    "Redirect.jsonld-ClientPaymentRequest.read": {
      "@context"?: OneOf<[string, {
        "@vocab": string;
        /** @enum {string} */
        hydra: "http://www.w3.org/ns/hydra/core#";
        [key: string]: unknown;
      }]>;
      "@id"?: string;
      "@type"?: string;
      /**
       * Format: date-time
       * @description Callback stamp
       * @example 2023-11-11 02:02:02
       */
      createdAt?: Record<string, never>;
    };
  };
  responses: {
  };
  parameters: {
  };
  requestBodies: {
  };
  headers: {
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Retrieves the collection of AccountingSequence resources.
   * @description Retrieves the collection of AccountingSequence resources.
   */
  "api_accounting-sequences_get_collection": {
    parameters: {
      query?: {
        /** @description The collection page number */
        page?: number;
      };
    };
    responses: {
      /** @description AccountingSequence collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["AccountingSequence.jsonld-accountingSequence.read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: ({
                  "@type"?: string;
                  variable?: string;
                  property?: string | null;
                  required?: boolean;
                })[];
            };
          };
        };
      };
    };
  };
  /**
   * Creates a AccountingSequence resource.
   * @description Creates a AccountingSequence resource.
   */
  "api_accounting-sequences_post": {
    /** @description The new AccountingSequence resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["AccountingSequence.jsonld-accountingSequence.create"];
      };
    };
    responses: {
      /** @description AccountingSequence resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["AccountingSequence.jsonld-accountingSequence.read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Unprocessable entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Create new Accounting Sequence
   * @description Create new Accounting Sequence
   */
  "api_accounting-sequencescreate-unique-sequence_post": {
    /** @description The new AccountingSequence resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["AccountingSequence.AccountingSequenceCreatorDto.jsonld"];
      };
    };
    responses: {
      /** @description AccountingSequence resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["AccountingSequence.AccountingSequenceCreatorResultDto.jsonld"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Unprocessable entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Retrieves a AccountingSequence resource.
   * @description Retrieves a AccountingSequence resource.
   */
  "api_accounting-sequences_id_get": {
    parameters: {
      path: {
        /** @description AccountingSequence identifier */
        id: string;
      };
    };
    responses: {
      /** @description AccountingSequence resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["AccountingSequence.jsonld-accountingSequence.read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Retrieves a Callback resource.
   * @description Retrieves a Callback resource.
   */
  api_callbacks_id_get: {
    parameters: {
      path: {
        /** @description Callback identifier */
        id: string;
      };
    };
    responses: {
      /** @description Callback resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Callback.jsonld-ClientPaymentRequest.read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Retrieves a ClientPaymentRequestResult resource.
   * @description Retrieves a ClientPaymentRequestResult resource.
   */
  "api_client-payment-request-results_id_get": {
    parameters: {
      path: {
        /** @description ClientPaymentRequestResult identifier */
        id: string;
      };
    };
    responses: {
      /** @description ClientPaymentRequestResult resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["ClientPaymentRequestResult.jsonld-ClientPaymentRequest.read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Check RebillManager
   * @description Check RebillManager and retrieve related transactions infos if any
   */
  "api_client-payment-requestscheck-rebill-manager_post": {
    /** @description The new ClientPaymentRequest resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["ClientPaymentRequest.RebillManagerCheckDto.jsonld"];
      };
    };
    responses: {
      /** @description ClientPaymentRequest resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ClientPaymentRequest.RebillManagerCheckResultDto.jsonld"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Unprocessable entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Create ClientRequest from legacy format
   * @description Create ClientRequest from legacy format
   */
  "api_client-payment-requestscreate-from-legacy_post": {
    /** @description The new ClientPaymentRequest resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["ClientPaymentRequest.LegacyTransactionDto.jsonld"];
      };
    };
    responses: {
      /** @description ClientPaymentRequest resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ClientPaymentRequest.jsonld"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Unprocessable entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Create ClientRequest from legacy format with one step
   * @description Create ClientRequest from legacy payment method selection is already done
   */
  "api_client-payment-requestscreate-from-legacy-one-step_post": {
    /** @description The new ClientPaymentRequest resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["ClientPaymentRequest.LegacyTransactionOneStepDto.jsonld"];
      };
    };
    responses: {
      /** @description ClientPaymentRequest resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ClientPaymentRequest.ClientPaymentRequestOneStepDto.jsonld"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Unprocessable entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Create RebillManager from ClientPayementRequest
   * @description Create RebillManager from ClientPayementRequest
   */
  "api_client-payment-requestscreate-rebill-manager_post": {
    /** @description The new ClientPaymentRequest resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["ClientPaymentRequest.RebillManagerCreateDto.jsonld"];
      };
    };
    responses: {
      /** @description ClientPaymentRequest resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ClientPaymentRequest.RebillManagerCreateResultDto.jsonld"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Unprocessable entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Create Invoice from RebillManager.Transaction from ClientPayementRequest
   * @description Create Invoice from RebillManager.Transaction from ClientPayementRequest
   */
  "api_client-payment-requestscreate-rebill-manager-invoice_post": {
    /** @description The new ClientPaymentRequest resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["ClientPaymentRequest.RebillManagerInvoiceCreateDto.jsonld"];
      };
    };
    responses: {
      /** @description ClientPaymentRequest resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ClientPaymentRequest.RebillManagerInvoiceCreateResultDto.jsonld"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Unprocessable entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Get RebillManager transaction Infos
   * @description Get RebillManager transaction Infos
   */
  "api_client-payment-requestsrebill-manager-transaction-infos_post": {
    /** @description The new ClientPaymentRequest resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["ClientPaymentRequest.RebillManagerTransactionInfosDto.jsonld"];
      };
    };
    responses: {
      /** @description ClientPaymentRequest resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ClientPaymentRequest.RebillManagerTransactionInfosResultDto.jsonld"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Unprocessable entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Rebill Transaction
   * @description Rebill Transaction using ALIAS AND Provider ID
   */
  "api_client-payment-requestsrebill-transaction_post": {
    /** @description The new ClientPaymentRequest resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["ClientPaymentRequest.RebillTransactionDto.jsonld"];
      };
    };
    responses: {
      /** @description ClientPaymentRequest resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ClientPaymentRequest.UnifiedRebillResponseDto.jsonld"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Unprocessable entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Refund Transaction
   * @description Refund Transaction
   */
  "api_client-payment-requestsrefund-transaction_post": {
    /** @description The new ClientPaymentRequest resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["ClientPaymentRequest.RefundTransactionDto.jsonld"];
      };
    };
    responses: {
      /** @description ClientPaymentRequest resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ClientPaymentRequest.UnifiedRefundResponseDto.jsonld"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Unprocessable entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Stop RebillManager
   * @description Stop RebillManager
   */
  "api_client-payment-requestsstop-rebill-manager_post": {
    /** @description The new ClientPaymentRequest resource */
    requestBody: {
      content: {
        "application/ld+json": components["schemas"]["ClientPaymentRequest.RebillManagerStopDto.jsonld"];
      };
    };
    responses: {
      /** @description ClientPaymentRequest resource created */
      201: {
        content: {
          "application/ld+json": components["schemas"]["ClientPaymentRequest.RebillManagerStopResultDto.jsonld"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Unprocessable entity */
      422: {
        content: never;
      };
    };
  };
  /**
   * Retrieves a ClientPaymentRequest resource.
   * @description Retrieves a ClientPaymentRequest resource.
   */
  "api_client-payment-requestsulid_ulid_get": {
    parameters: {
      path: {
        /** @description ClientPaymentRequest identifier */
        ulid: string;
      };
    };
    responses: {
      /** @description ClientPaymentRequest resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["ClientPaymentRequest.jsonld-ClientPaymentRequest.read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Retrieves a ClientPaymentRequest resource.
   * @description Retrieves a ClientPaymentRequest resource.
   */
  "api_client-payment-requests_id_get": {
    parameters: {
      path: {
        /** @description ClientPaymentRequest identifier */
        id: string;
      };
    };
    responses: {
      /** @description ClientPaymentRequest resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["ClientPaymentRequest.jsonld-ClientPaymentRequest.read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Retrieves a Client resource.
   * @description Retrieves a Client resource.
   */
  api_clients_id_get: {
    parameters: {
      path: {
        /** @description Client identifier */
        id: string;
      };
    };
    responses: {
      /** @description Client resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Client.jsonld-ClientPaymentRequest.read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Creates a user token.
   * @description Creates a user token.
   */
  login_check_post: {
    /** @description The login data */
    requestBody: {
      content: {
        "application/json": {
          name: string;
          password: string;
        };
      };
    };
    responses: {
      /** @description User token created */
      200: {
        content: {
          "application/json": {
            token: string;
          };
        };
      };
    };
  };
  /**
   * Retrieves the collection of PaymentMethodGroupMember resources.
   * @description Retrieves the collection of PaymentMethodGroupMember resources.
   */
  "api_payment-method-group-members_get_collection": {
    parameters: {
      query?: {
        /** @description The collection page number */
        page?: number;
        paymentMethodGroup?: string;
        "paymentMethodGroup[]"?: string[];
      };
    };
    responses: {
      /** @description PaymentMethodGroupMember collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["PaymentMethodGroupMember.jsonld-ClientPaymentRequest.read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: ({
                  "@type"?: string;
                  variable?: string;
                  property?: string | null;
                  required?: boolean;
                })[];
            };
          };
        };
      };
    };
  };
  /**
   * Retrieves a PaymentMethodGroupMember resource.
   * @description Retrieves a PaymentMethodGroupMember resource.
   */
  "api_payment-method-group-members_id_get": {
    parameters: {
      path: {
        /** @description PaymentMethodGroupMember identifier */
        id: string;
      };
    };
    responses: {
      /** @description PaymentMethodGroupMember resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["PaymentMethodGroupMember.jsonld-ClientPaymentRequest.read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Retrieves the collection of PaymentMethodGroupMember resources.
   * @description Retrieves the collection of PaymentMethodGroupMember resources.
   */
  "api_payment-method-group_paymentMethodGroupIdmembers_get_collection": {
    parameters: {
      query?: {
        /** @description The collection page number */
        page?: number;
        paymentMethodGroup?: string;
        "paymentMethodGroup[]"?: string[];
      };
      path: {
        /** @description PaymentMethodGroupMember identifier */
        paymentMethodGroupId: string;
      };
    };
    responses: {
      /** @description PaymentMethodGroupMember collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["PaymentMethodGroupMember.jsonld-ClientPaymentRequest.read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: ({
                  "@type"?: string;
                  variable?: string;
                  property?: string | null;
                  required?: boolean;
                })[];
            };
          };
        };
      };
    };
  };
  /**
   * Retrieves the collection of PaymentMethodGroup resources.
   * @description Retrieves the collection of PaymentMethodGroup resources.
   */
  "api_payment-method-groups_get_collection": {
    parameters: {
      query?: {
        /** @description The collection page number */
        page?: number;
        name?: string;
        "name[]"?: string[];
      };
    };
    responses: {
      /** @description PaymentMethodGroup collection */
      200: {
        content: {
          "application/ld+json": {
            "hydra:member": components["schemas"]["PaymentMethodGroup.jsonld-ClientPaymentRequest.read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: ({
                  "@type"?: string;
                  variable?: string;
                  property?: string | null;
                  required?: boolean;
                })[];
            };
          };
        };
      };
    };
  };
  /**
   * Retrieves a PaymentMethodGroup resource.
   * @description Retrieves a PaymentMethodGroup resource.
   */
  "api_payment-method-groupsname_name_get": {
    parameters: {
      path: {
        /** @description PaymentMethodGroup identifier */
        name: string;
      };
    };
    responses: {
      /** @description PaymentMethodGroup resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["PaymentMethodGroup.jsonld-ClientPaymentRequest.read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Retrieves a PaymentMethodGroup resource.
   * @description Retrieves a PaymentMethodGroup resource.
   */
  "api_payment-method-groups_id_get": {
    parameters: {
      path: {
        /** @description PaymentMethodGroup identifier */
        id: string;
      };
    };
    responses: {
      /** @description PaymentMethodGroup resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["PaymentMethodGroup.jsonld-ClientPaymentRequest.read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Retrieves a PaymentMethod resource.
   * @description Retrieves a PaymentMethod resource.
   */
  "api_payment-methods_id_get": {
    parameters: {
      path: {
        /** @description PaymentMethod identifier */
        id: string;
      };
    };
    responses: {
      /** @description PaymentMethod resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["PaymentMethod.jsonld-ClientPaymentRequest.read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Retrieves a PspAccount resource.
   * @description Retrieves a PspAccount resource.
   */
  "api_psp-accounts_id_get": {
    parameters: {
      path: {
        /** @description PspAccount identifier */
        id: string;
      };
    };
    responses: {
      /** @description PspAccount resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["PspAccount.jsonld-ClientPaymentRequest.read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Retrieves a Psp resource.
   * @description Retrieves a Psp resource.
   */
  api_psps_id_get: {
    parameters: {
      path: {
        /** @description Psp identifier */
        id: string;
      };
    };
    responses: {
      /** @description Psp resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Psp.jsonld-ClientPaymentRequest.read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Retrieves a Redirect resource.
   * @description Retrieves a Redirect resource.
   */
  api_redirects_id_get: {
    parameters: {
      path: {
        /** @description Redirect identifier */
        id: string;
      };
    };
    responses: {
      /** @description Redirect resource */
      200: {
        content: {
          "application/ld+json": components["schemas"]["Redirect.jsonld-ClientPaymentRequest.read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: never;
      };
    };
  };
}

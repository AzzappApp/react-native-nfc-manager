diff --git a/android/src/main/java/com/swmansion/rnscreens/ScreenViewManager.kt b/android/src/main/java/com/swmansion/rnscreens/ScreenViewManager.kt
index 3c655d369fd54ff6150ef057d26388143ea152f6..6c8bf822a6b99312d9f9ce8ff047a9e725937f94 100644
--- a/android/src/main/java/com/swmansion/rnscreens/ScreenViewManager.kt
+++ b/android/src/main/java/com/swmansion/rnscreens/ScreenViewManager.kt
@@ -44,6 +44,7 @@ open class ScreenViewManager :
     ) {
         setActivityState(view, activityState.toInt())
     }
+    
 
     override fun addView(
         parent: Screen,
@@ -271,6 +272,11 @@ open class ScreenViewManager :
         view?.sheetElevation = value.toFloat()
     }
 
+    @ReactProp(name = "stackAnimationOptions")
+    override fun setStackAnimationOptions(view: Screen, value: ReadableMap?) {
+        // not handled on android
+    }
+
     // these props are not available on Android, however we must override their setters
     override fun setFullScreenSwipeEnabled(
         view: Screen?,
diff --git a/ios/RNSConvert.mm b/ios/RNSConvert.mm
index fcb4bf6ed095c7637f971b28f0a08ada54dbe25b..ebd44911429804179e239be54a2c03fc50dd57c9 100644
--- a/ios/RNSConvert.mm
+++ b/ios/RNSConvert.mm
@@ -85,6 +85,8 @@ + (RNSScreenStackAnimation)RNSScreenStackAnimationFromCppEquivalent:(react::RNSS
       return RNSScreenStackAnimationSlideFromBottom;
     case Fade_from_bottom:
       return RNSScreenStackAnimationFadeFromBottom;
+    case Custom:
+      return RNSScreenStackAnimationCustom;
   }
 }
 
diff --git a/ios/RNSEnums.h b/ios/RNSEnums.h
index 7a82e43b87081a6297fccbe3250d093dcaeb82e8..6507cc41b5971b407c57169a82bd59762a6149e6 100644
--- a/ios/RNSEnums.h
+++ b/ios/RNSEnums.h
@@ -18,6 +18,7 @@ typedef NS_ENUM(NSInteger, RNSScreenStackAnimation) {
   RNSScreenStackAnimationSlideFromBottom,
   RNSScreenStackAnimationSimplePush,
   RNSScreenStackAnimationSlideFromLeft,
+  RNSScreenStackAnimationCustom,
 };
 
 typedef NS_ENUM(NSInteger, RNSScreenReplaceAnimation) {
diff --git a/ios/RNSScreen.h b/ios/RNSScreen.h
index 558ed17b08924711d1682c468c8d33ba6d373355..cdf9b6c99ab5be0245b0e4cd2fe4381101dcee5a 100644
--- a/ios/RNSScreen.h
+++ b/ios/RNSScreen.h
@@ -66,6 +66,7 @@ namespace react = facebook::react;
 @property (nonatomic) BOOL hasHomeIndicatorHiddenSet;
 @property (nonatomic) BOOL hasOrientationSet;
 @property (nonatomic) RNSScreenStackAnimation stackAnimation;
+@property (nonatomic, copy) NSDictionary* stackAnimationOptions;
 @property (nonatomic) RNSScreenStackPresentation stackPresentation;
 @property (nonatomic) RNSScreenSwipeDirection swipeDirection;
 @property (nonatomic) RNSScreenReplaceAnimation replaceAnimation;
diff --git a/ios/RNSScreen.mm b/ios/RNSScreen.mm
index b4ce15ec8eca3655eb38528b8b8f85483579b69a..bca1c6196f6c25b1d8a0acf1ddf3a4a2fba1a05f 100644
--- a/ios/RNSScreen.mm
+++ b/ios/RNSScreen.mm
@@ -335,6 +335,7 @@ - (void)setStackAnimation:(RNSScreenStackAnimation)stackAnimation
     case RNSScreenStackAnimationSlideFromBottom:
     case RNSScreenStackAnimationFadeFromBottom:
     case RNSScreenStackAnimationSlideFromLeft:
+    case RNSScreenStackAnimationCustom:
       // Default
       break;
   }
@@ -1300,6 +1301,27 @@ - (void)updateProps:(react::Props::Shared const &)props oldProps:(react::Props::
   if (newScreenProps.stackAnimation != oldScreenProps.stackAnimation) {
     [self setStackAnimation:[RNSConvert RNSScreenStackAnimationFromCppEquivalent:newScreenProps.stackAnimation]];
   }
+ 
+  auto options = newScreenProps.stackAnimationOptions;
+  NSDictionary* stackAnimationOptions = @{
+    @"animator": [NSString stringWithUTF8String:options.animator.c_str()],
+    @"fromRectangle": @{
+      @"x": @(options.fromRectangle.x),
+      @"y": @(options.fromRectangle.y),
+      @"width": @(options.fromRectangle.width),
+      @"height": @(options.fromRectangle.height)
+    },
+    @"toRectangle": @{
+      @"x": @(options.toRectangle.x),
+      @"y": @(options.toRectangle.y),
+      @"width": @(options.toRectangle.width),
+      @"height": @(options.toRectangle.height)
+    },
+    @"fromRadius": @(options.fromRadius),
+    @"toRadius": @(options.toRadius),
+  };
+  [self setStackAnimationOptions:stackAnimationOptions]; 
+
 
   if (newScreenProps.replaceAnimation != oldScreenProps.replaceAnimation) {
     [self setReplaceAnimation:[RNSConvert RNSScreenReplaceAnimationFromCppEquivalent:newScreenProps.replaceAnimation]];
@@ -1965,6 +1987,7 @@ @implementation RNSScreenManager
 RCT_EXPORT_VIEW_PROPERTY(replaceAnimation, RNSScreenReplaceAnimation)
 RCT_EXPORT_VIEW_PROPERTY(stackPresentation, RNSScreenStackPresentation)
 RCT_EXPORT_VIEW_PROPERTY(stackAnimation, RNSScreenStackAnimation)
+RCT_EXPORT_VIEW_PROPERTY(stackAnimationOptions, NSDictionary)
 RCT_EXPORT_VIEW_PROPERTY(swipeDirection, RNSScreenSwipeDirection)
 RCT_EXPORT_VIEW_PROPERTY(transitionDuration, NSNumber)
 
@@ -2066,6 +2089,7 @@ @implementation RCTConvert (RNSScreen)
       @"slide_from_left" : @(RNSScreenStackAnimationSlideFromLeft),
       @"ios_from_right" : @(RNSScreenStackAnimationDefault),
       @"ios_from_left" : @(RNSScreenStackAnimationSlideFromLeft),
+      @"custom" : @(RNSScreenStackAnimationCustom),
     }),
     RNSScreenStackAnimationDefault,
     integerValue)
diff --git a/ios/RNSScreenStackAnimator.h b/ios/RNSScreenStackAnimator.h
index 0870f8d1ead7c66b3f29828591fd6a24d7914194..a63d4ed63dde5f240e7f0a2f940efce431f6232a 100644
--- a/ios/RNSScreenStackAnimator.h
+++ b/ios/RNSScreenStackAnimator.h
@@ -2,6 +2,18 @@
 
 #import "RNSScreen.h"
 
+@protocol RNSScreenCustomStackAnimator <NSObject>
+
+- (void)animateCustomWithTransitionContext:(id<UIViewControllerContextTransitioning>)transitionContext
+                                      toVC:(UIViewController *)toViewController
+                                    fromVC:(UIViewController *)fromViewController
+                              forOperation:(UINavigationControllerOperation)operation
+                               andDuration:(NSTimeInterval)duration
+                               withOptions:(NSDictionary *)options;
+
+@end
+
+
 @interface RNSScreenStackAnimator : NSObject <UIViewControllerAnimatedTransitioning>
 
 /// This property is filled whenever there is an ongoing animation and cleared on animation end.
@@ -19,4 +31,6 @@
 
 + (BOOL)isCustomAnimation:(RNSScreenStackAnimation)animation;
 
++ (void)registerCustomAnimator:(id<RNSScreenCustomStackAnimator>)animator forName:(NSString *)name;
+
 @end
diff --git a/ios/RNSScreenStackAnimator.mm b/ios/RNSScreenStackAnimator.mm
index 89caf8d00dca1b6c387acdacd658cd15e9ca1170..82ffe3bb80659d2157a1f0233879e3388cd35c99 100644
--- a/ios/RNSScreenStackAnimator.mm
+++ b/ios/RNSScreenStackAnimator.mm
@@ -554,6 +554,9 @@ - (void)animateTransitionWithStackAnimation:(RNSScreenStackAnimation)animation
     case RNSScreenStackAnimationFadeFromBottom:
       [self animateFadeFromBottomWithTransitionContext:transitionContext toVC:toVC fromVC:fromVC];
       return;
+    case RNSScreenStackAnimationCustom:
+      [self animateCustomWithTransitionContext:transitionContext toVC:toVC fromVC:fromVC];
+      return;
     case RNSScreenStackAnimationNone:
       [self animateNoneWithTransitionContext:transitionContext toVC:toVC fromVC:fromVC];
       return;
@@ -566,6 +569,51 @@ - (void)animateTransitionWithStackAnimation:(RNSScreenStackAnimation)animation
   }
 }
 
+ 
+static NSMutableDictionary<NSString *, id<RNSScreenCustomStackAnimator>> *customAnimators;
++ (void)registerCustomAnimator:(id<RNSScreenCustomStackAnimator>)animator forName:(NSString *)name {
+  if (customAnimators == nil) {
+    customAnimators = [[NSMutableDictionary alloc] init];
+  }
+  customAnimators[name] = animator;
+}
+
+- (void)animateCustomWithTransitionContext:(id<UIViewControllerContextTransitioning>)transitionContext
+                                      toVC:(UIViewController *)toViewController
+                                    fromVC:(UIViewController *)fromViewController
+{
+  RNSScreenView *screen;
+  if (_operation == UINavigationControllerOperationPush) {
+    screen = ((RNSScreen *)toViewController).screenView;
+  } else if (_operation == UINavigationControllerOperationPop) {
+    screen = ((RNSScreen *)fromViewController).screenView;
+  }
+  if (screen == nil || screen.stackAnimationOptions == nil) {
+    [self animateSimplePushWithShadowEnabled:false
+                                            transitionContext:transitionContext
+                                            toVC:toViewController
+                                          fromVC:fromViewController];
+    return;
+  }
+  NSDictionary *options = screen.stackAnimationOptions;
+  NSString *animatorName = options[@"animator"];
+  id<RNSScreenCustomStackAnimator> animator = customAnimators[animatorName];
+  if (animator == nil) {
+    [self animateSimplePushWithShadowEnabled:false
+                                            transitionContext:transitionContext
+                                            toVC:toViewController
+                                          fromVC:fromViewController];
+    return;
+  }
+  [animator animateCustomWithTransitionContext:transitionContext
+                                          toVC:toViewController
+                                        fromVC:fromViewController
+                                  forOperation:_operation
+                                   andDuration:[self transitionDuration:transitionContext]
+                                   withOptions:options];
+}
+
+
 + (UISpringTimingParameters *)defaultSpringTimingParametersApprox
 {
   // Default curve provider is as defined below, however spring timing defined this way
diff --git a/lib/typescript/fabric/ScreenNativeComponent.d.ts b/lib/typescript/fabric/ScreenNativeComponent.d.ts
index 69725069e041ac2aaff2551c1fd0ec414359258a..b456869cb2353c006e8d044012aa920f889ecc26 100644
--- a/lib/typescript/fabric/ScreenNativeComponent.d.ts
+++ b/lib/typescript/fabric/ScreenNativeComponent.d.ts
@@ -24,7 +24,7 @@ type GestureResponseDistanceType = Readonly<{
     bottom: Float;
 }>;
 type StackPresentation = 'push' | 'modal' | 'transparentModal' | 'fullScreenModal' | 'formSheet' | 'pageSheet' | 'containedModal' | 'containedTransparentModal';
-type StackAnimation = 'default' | 'flip' | 'simple_push' | 'none' | 'fade' | 'slide_from_right' | 'slide_from_left' | 'slide_from_bottom' | 'fade_from_bottom' | 'ios_from_right' | 'ios_from_left';
+type StackAnimation = 'default' | 'flip' | 'simple_push' | 'none' | 'fade' | 'slide_from_right' | 'slide_from_left' | 'slide_from_bottom' | 'fade_from_bottom' | 'ios_from_right' | 'ios_from_left' | 'custom';
 type SwipeDirection = 'vertical' | 'horizontal';
 type ReplaceAnimation = 'pop' | 'push';
 export interface NativeProps extends ViewProps {
@@ -61,6 +61,7 @@ export interface NativeProps extends ViewProps {
     gestureResponseDistance?: GestureResponseDistanceType;
     stackPresentation?: WithDefault<StackPresentation, 'push'>;
     stackAnimation?: WithDefault<StackAnimation, 'default'>;
+    stackAnimationOptions?: { animator: string } & Record<string, any>;
     transitionDuration?: WithDefault<Int32, 500>;
     replaceAnimation?: WithDefault<ReplaceAnimation, 'pop'>;
     swipeDirection?: WithDefault<SwipeDirection, 'horizontal'>;
diff --git a/lib/typescript/types.d.ts b/lib/typescript/types.d.ts
index 9827e3126095a0053dfa3bc15a53b8e700515369..fd58b24a96f13517165bf57ba875b26d0151c01a 100644
--- a/lib/typescript/types.d.ts
+++ b/lib/typescript/types.d.ts
@@ -11,7 +11,7 @@ export type SearchBarCommands = {
 };
 export type BackButtonDisplayMode = 'default' | 'generic' | 'minimal';
 export type StackPresentationTypes = 'push' | 'modal' | 'transparentModal' | 'containedModal' | 'containedTransparentModal' | 'fullScreenModal' | 'formSheet' | 'pageSheet';
-export type StackAnimationTypes = 'default' | 'fade' | 'fade_from_bottom' | 'flip' | 'none' | 'simple_push' | 'slide_from_bottom' | 'slide_from_right' | 'slide_from_left' | 'ios_from_right' | 'ios_from_left';
+export type StackAnimationTypes = 'default' | 'fade' | 'fade_from_bottom' | 'flip' | 'none' | 'simple_push' | 'slide_from_bottom' | 'slide_from_right' | 'slide_from_left' | 'ios_from_right' | 'ios_from_left' | 'custom';
 export type BlurEffectTypes = 'none' | 'extraLight' | 'light' | 'dark' | 'regular' | 'prominent' | 'systemUltraThinMaterial' | 'systemThinMaterial' | 'systemMaterial' | 'systemThickMaterial' | 'systemChromeMaterial' | 'systemUltraThinMaterialLight' | 'systemThinMaterialLight' | 'systemMaterialLight' | 'systemThickMaterialLight' | 'systemChromeMaterialLight' | 'systemUltraThinMaterialDark' | 'systemThinMaterialDark' | 'systemMaterialDark' | 'systemThickMaterialDark' | 'systemChromeMaterialDark';
 export type ScreenReplaceTypes = 'push' | 'pop';
 export type SwipeDirectionTypes = 'vertical' | 'horizontal';
@@ -341,6 +341,10 @@ export interface ScreenProps extends ViewProps {
      * - "none" – the screen appears/dissapears without an animation
      */
     stackAnimation?: StackAnimationTypes;
+    /**
+     * Custom animator options
+     */
+    stackAnimationOptions?: { animator: string } & Record<string, any>
     /**
      * How should the screen be presented.
      * The following values are currently supported:
diff --git a/src/fabric/ScreenNativeComponent.ts b/src/fabric/ScreenNativeComponent.ts
index 2a7ae3d8e1e3943d0acf9e280d766ce7d35a8d6c..c157067952d260b2dba05a3065159af93d32b362 100644
--- a/src/fabric/ScreenNativeComponent.ts
+++ b/src/fabric/ScreenNativeComponent.ts
@@ -60,12 +60,31 @@ type StackAnimation =
   | 'slide_from_bottom'
   | 'fade_from_bottom'
   | 'ios_from_right'
-  | 'ios_from_left';
+  | 'ios_from_left'
+  | 'custom';
 
 type SwipeDirection = 'vertical' | 'horizontal';
 
 type ReplaceAnimation = 'pop' | 'push';
 
+ 
+type StackAnimationOptionsRect = Readonly<{
+       x: Double;
+       y: Double;
+       width: Double;
+       height: Double;
+     }>;
+     
+type StackAnimationOptions = Readonly<{
+       animator: string;
+       fromRectangle: StackAnimationOptionsRect;
+       toRectangle: StackAnimationOptionsRect;
+       fromRadius: Double;
+       toRadius: Double;
+     }>;
+   
+  
+
 export interface NativeProps extends ViewProps {
   onAppear?: DirectEventHandler<ScreenEvent>;
   onDisappear?: DirectEventHandler<ScreenEvent>;
@@ -100,6 +119,7 @@ export interface NativeProps extends ViewProps {
   gestureResponseDistance?: GestureResponseDistanceType;
   stackPresentation?: WithDefault<StackPresentation, 'push'>;
   stackAnimation?: WithDefault<StackAnimation, 'default'>;
+  stackAnimationOptions?: StackAnimationOptions;
   transitionDuration?: WithDefault<Int32, 500>;
   replaceAnimation?: WithDefault<ReplaceAnimation, 'pop'>;
   swipeDirection?: WithDefault<SwipeDirection, 'horizontal'>;
diff --git a/src/types.tsx b/src/types.tsx
index f1f9f63b301b9283d421c6299a721faf9651064f..240e91503b7a9d6bf17009f66e448153e2467d30 100644
--- a/src/types.tsx
+++ b/src/types.tsx
@@ -40,7 +40,8 @@ export type StackAnimationTypes =
   | 'slide_from_right'
   | 'slide_from_left'
   | 'ios_from_right'
-  | 'ios_from_left';
+  | 'ios_from_left'
+  | 'custom';
 export type BlurEffectTypes =
   | 'none'
   | 'extraLight'
@@ -416,6 +417,10 @@ export interface ScreenProps extends ViewProps {
    * - "none" – the screen appears/dissapears without an animation
    */
   stackAnimation?: StackAnimationTypes;
+  /**
+   * Custom animator options
+   */
+  stackAnimationOptions?: { animator: string } & Record<string, any>
   /**
    * How should the screen be presented.
    * The following values are currently supported:

diff --git a/cpp/rnskia/RNSkDomView.h b/cpp/rnskia/RNSkDomView.h
index 27bb74720fdec62871d0639e3a2cd12479612a7a..d38687206aaf2a0e7165f76f23cbccb8cc4b306c 100644
--- a/cpp/rnskia/RNSkDomView.h
+++ b/cpp/rnskia/RNSkDomView.h
@@ -10,6 +10,7 @@
 #include <jsi/jsi.h>
 
 #include "JsiValueWrapper.h"
+#include "JsiSkCanvas.h"
 #include "RNSkView.h"
 
 #include "JsiDomRenderNode.h"
@@ -32,7 +33,6 @@ class SkRect;
 class SkImage;
 
 namespace RNSkia {
-class JsiSkCanvas;
 namespace jsi = facebook::jsi;
 
 class RNSkDomRenderer : public RNSkRenderer,
@@ -136,5 +136,20 @@ public:
       }
     }
   }
+  
+  jsi::Value callJsiMethod(jsi::Runtime &runtime,
+                          const std::string &name,
+                          const jsi::Value *arguments, size_t count) override {
+    if (name == "renderToCanvas") {
+      auto callback = std::make_shared<jsi::Function>(
+          arguments[0].asObject(runtime).asFunction(runtime));
+      getCanvasProvider()->renderToCanvas([=, &runtime](SkCanvas *canvas) {
+        auto jsiCanvas = jsi::Object::createFromHostObject(
+            runtime, std::make_shared<JsiSkCanvas>(getPlatformContext(), canvas));
+        callback->call(runtime, jsiCanvas);
+      });
+    }
+    return jsi::Value::undefined();
+  }
 };
 } // namespace RNSkia
diff --git a/cpp/rnskia/RNSkJsiViewApi.h b/cpp/rnskia/RNSkJsiViewApi.h
index 82195da9b09e86ec6f206a96602cabfe706af3db..62cd7046b38e6658e60f544df3bfe3ada243fe47 100644
--- a/cpp/rnskia/RNSkJsiViewApi.h
+++ b/cpp/rnskia/RNSkJsiViewApi.h
@@ -70,6 +70,52 @@ public:
     return jsi::Value::undefined();
   }
 
+  /**
+   Calls a custom command / method on a view by the view id.
+   */
+  JSI_HOST_FUNCTION(callJsiMethod) {
+    if (count < 2) {
+      _platformContext->raiseError(
+          std::string("callCustomCommand: Expected at least 2 arguments, got " +
+                      std::to_string(count) + "."));
+
+      return jsi::Value::undefined();
+    }
+
+    if (!arguments[0].isNumber()) {
+      _platformContext->raiseError(
+          "callCustomCommand: First argument must be a number");
+
+      return jsi::Value::undefined();
+    }
+
+    if (!arguments[1].isString()) {
+      _platformContext->raiseError("callCustomCommand: Second argument must be "
+                                   "the name of the action to call.");
+
+      return jsi::Value::undefined();
+    }
+
+    auto nativeId = arguments[0].asNumber();
+    auto action = arguments[1].asString(runtime).utf8(runtime);
+
+    auto info = getEnsuredViewInfo(nativeId);
+
+    if (info->view == nullptr) {
+      throw jsi::JSError(
+          runtime, std::string("callCustomCommand: Could not call action " +
+                               action + " on view - view not ready.")
+                       .c_str());
+
+      return jsi::Value::undefined();
+    }
+
+    // Get arguments
+    size_t paramsCount = count - 2;
+    const jsi::Value *params = paramsCount > 0 ? &arguments[2] : nullptr;
+    return info->view->callJsiMethod(runtime, action, params, paramsCount);
+  }
+
   JSI_HOST_FUNCTION(requestRedraw) {
     if (count != 1) {
       _platformContext->raiseError(
@@ -190,6 +236,7 @@ public:
   }
 
   JSI_EXPORT_FUNCTIONS(JSI_EXPORT_FUNC(RNSkJsiViewApi, setJsiProperty),
+                       JSI_EXPORT_FUNC(RNSkJsiViewApi, callJsiMethod),
                        JSI_EXPORT_FUNC(RNSkJsiViewApi, requestRedraw),
                        JSI_EXPORT_FUNC(RNSkJsiViewApi, makeImageSnapshotAsync),
                        JSI_EXPORT_FUNC(RNSkJsiViewApi, makeImageSnapshot))
diff --git a/cpp/rnskia/RNSkView.h b/cpp/rnskia/RNSkView.h
index 90c46f4a4f8e45722638f2a6371006e76c920cd8..50f73bcf7076a8a0f0e6fe63be5a6f487a0b8f07 100644
--- a/cpp/rnskia/RNSkView.h
+++ b/cpp/rnskia/RNSkView.h
@@ -173,12 +173,24 @@ public:
     // Nothing here...
   }
 
+  /**
+   Calls a custom action.
+   */
+  virtual jsi::Value callJsiMethod(jsi::Runtime &runtime,
+                                   const std::string &name,
+                                   const jsi::Value *arguments, size_t count) {
+    throw std::runtime_error(
+        "The base Skia View does not support any commands. Command " + name +
+        " not found.");
+  }
+  
   /**
    * Repaints the Skia view using the underlying context and the drawcallback.
    * This method schedules a draw request that will be run on the correct
    * thread and js runtime.
    */
   void requestRedraw() { _redrawRequestCounter++; }
+  
 
   /**
    Renders immediate. Be carefull to not call this method from another thread
diff --git a/src/views/SkiaDomView.tsx b/src/views/SkiaDomView.tsx
index 25d07873a00eda96bbe662f435dc85b408bf8e1f..878ec00152735086f896ce899cfd529a1abafee7 100644
--- a/src/views/SkiaDomView.tsx
+++ b/src/views/SkiaDomView.tsx
@@ -115,6 +115,7 @@ const assertSkiaViewApi = () => {
     SkiaViewApi === null ||
     SkiaViewApi.setJsiProperty === null ||
     SkiaViewApi.requestRedraw === null ||
+    SkiaViewApi.callJsiMethod === null ||
     SkiaViewApi.makeImageSnapshot === null
   ) {
     throw Error("Skia View Api was not found.");
diff --git a/src/views/types.ts b/src/views/types.ts
index 022c941d9052630769ee63d60a7dfcd9dbb87f48..1f1b363adf1f0d593f39494f23557aaa599ec3e5 100644
--- a/src/views/types.ts
+++ b/src/views/types.ts
@@ -50,6 +50,11 @@ export type TouchHandler = (touchInfo: Array<Array<TouchInfo>>) => void;
 
 export interface ISkiaViewApi {
   setJsiProperty: <T>(nativeId: number, name: string, value: T) => void;
+  callJsiMethod: <T extends Array<unknown>>(
+    nativeId: number,
+    name: string,
+    ...args: T
+  ) => void;
   requestRedraw: (nativeId: number) => void;
   makeImageSnapshot: (nativeId: number, rect?: SkRect) => SkImage;
   makeImageSnapshotAsync: (nativeId: number, rect?: SkRect) => Promise<SkImage>;

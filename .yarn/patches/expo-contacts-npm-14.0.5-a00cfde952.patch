diff --git a/android/src/main/java/expo/modules/contacts/ContactsModule.kt b/android/src/main/java/expo/modules/contacts/ContactsModule.kt
index e768f9877838f879da445c0dfb0bceea9f1672e0..375b6331aa29ee36f42ea161c32c43d4dcdfdaa5 100644
--- a/android/src/main/java/expo/modules/contacts/ContactsModule.kt
+++ b/android/src/main/java/expo/modules/contacts/ContactsModule.kt
@@ -248,6 +248,15 @@ class ContactsModule : Module() {
       uri.toString()
     }
 
+    AsyncFunction("displayContactAsync") { contactId: String, promise: Promise ->
+      val uri = Uri.withAppendedPath(ContactsContract.Contacts.CONTENT_URI, contactId)
+      val intent = Intent(Intent.ACTION_VIEW).apply {
+        setData(uri)
+      }  
+      currentActivity.startActivity(intent)
+      promise.resolve(true)
+     }
+
     AsyncFunction("presentFormAsync") { contactId: String?, contactData: Map<String, Any>?, _: Map<String, Any?>?, promise: Promise ->
       ensureReadPermission()
 
diff --git a/build/Contacts.d.ts b/build/Contacts.d.ts
index 9401111ddcb52b0dec8ab3d5dc2ab221b5586275..260c2a136257fa0c2429e0eb08ddc8055e1d9971 100644
--- a/build/Contacts.d.ts
+++ b/build/Contacts.d.ts
@@ -586,6 +586,15 @@ export declare function getContactByIdAsync(id: string, fields?: FieldType[]): P
  * ```
  */
 export declare function addContactAsync(contact: Contact, containerId?: string): Promise<string>;
+/**
+ * Displays contact details from contacts book
+ * @example
+ * ```js
+ * await Contacts.getContactsAsync(contactId);
+ *
+ * ```
+ */
+export declare function displayContactAsync(contactId: string): Promise<boolean>
 /**
  * Mutate the information of an existing contact. Due to an iOS bug, `nonGregorianBirthday` field cannot be modified.
  * > **info** On Android, you can use [`presentFormAsync`](#contactspresentformasynccontactid-contact-formoptions) to make edits to contacts.
diff --git a/build/Contacts.js b/build/Contacts.js
index d6ab6c776f96aa68e185d15e64d84aee97b520a6..50ae7ca0111fbcc7d2644b831c21cd1796be6af7 100644
--- a/build/Contacts.js
+++ b/build/Contacts.js
@@ -25,6 +25,19 @@ export async function shareContactAsync(contactId, message, shareOptions = {}) {
     }
     return await ExpoContacts.shareContactAsync(contactId, message);
 }
+/**
+  * Displays contact details from contacts book
+  * @example
+  * ```js
+  * await Contacts.displayContactAsync(contactId);
+  * ```
+  */
+export async function displayContactAsync(contactId) {
+    if (!ExpoContacts.displayContactAsync) {
+      throw new UnavailabilityError('Contacts', 'displayContactAsync');
+    }
+    return await ExpoContacts.displayContactAsync(contactId);
+}
 /**
  * Return a list of contacts that fit a given criteria. You can get all of the contacts by passing no criteria.
  * @param contactQuery Object used to query contacts.
diff --git a/ios/ContactsModule.swift b/ios/ContactsModule.swift
index cfa92965fae0aac77986cf516af95429bb7213a3..deae367b73501b596bb1446959789c91f7af35f5 100644
--- a/ios/ContactsModule.swift
+++ b/ios/ContactsModule.swift
@@ -163,6 +163,41 @@ public class ContactsModule: Module, OnContactPickingResultHandler {
       currentController?.present(pickerController, animated: true)
     }.runOnQueue(.main)
 
+    AsyncFunction("displayContactAsync") { (contactId: String, promise: Promise) -> Void in
+      // swiftlint:enable closure_body_length
+      var controller: ContactsViewController?
+      if let foundContact = try? getContact(withId: contactId) {
+        controller = ContactsViewController.init(for: foundContact)
+      }
+      guard let controller else {
+        promise.reject(FailedToCreateViewControllerException())
+        return
+      }
+      controller.contactStore = contactStore
+      controller.delegate = delegate
+      controller.allowsEditing = true
+      controller.allowsActions = true
+      controller.shouldShowLinkedContacts = true
+      let parent = appContext?.utilities?.currentViewController()
+      let navController = UINavigationController(rootViewController: controller)
+        if #available(iOS 16.0, *) {
+            controller.navigationItem.backAction = UIAction(handler: { [] action in
+                controller.dismiss(animated: true)
+            })
+        } else {
+            controller.navigationItem.hidesBackButton = false
+        }
+      presentingViewController = navController
+      let animated = true
+      controller.onViewDisappeared = {
+        promise.resolve(true)
+        self.contactManipulationPromise = nil
+      }
+      contactManipulationPromise = promise
+      parent?.present(navController, animated: animated)
+    }.runOnQueue(.main)
+
+
     AsyncFunction("addExistingContactToGroupAsync") { (identifier: String, groupId: String) in
       let saveRequest = CNSaveRequest()
       let keysToFetch = contactKeysToFetch(from: nil)
diff --git a/ios/Decoding.swift b/ios/Decoding.swift
index 2f6f500041a80fa86d0a7398896949c4370ec39c..b0f3c68540c2ce0abc00ce212109b2cde1ac7c56 100644
--- a/ios/Decoding.swift
+++ b/ios/Decoding.swift
@@ -38,7 +38,7 @@ func decodeSocialProfiles(_ input: [SocialProfile]?) -> [CNLabeledValue<CNSocial
     let username = item.username
     let userId = item.userId
     let service = item.service
-    let profile = CNSocialProfile(urlString: urlString?.path, username: username, userIdentifier: userId, service: service)
+    let profile = CNSocialProfile(urlString: urlString?.absoluteString, username: username, userIdentifier: userId, service: service)
     output.append(CNLabeledValue(label: label, value: profile))
   }
   return output
diff --git a/src/Contacts.ts b/src/Contacts.ts
index 8eba72e00177583ab88658eaf3d57faf6565c6a7..92183aadb662b25c75622d94a538a6b08a97e29a 100644
--- a/src/Contacts.ts
+++ b/src/Contacts.ts
@@ -563,6 +563,22 @@ export type Container = {
 
 export { PermissionStatus, PermissionResponse, PermissionExpiration };
 
+ 
+/**
+  * Displays contact details from contacts book
+  * @example
+  * ```js
+  * await Contacts.displayContactAsync(contactId);
+  * ```
+  */
+export async function displayContactAsync(contactId: string): Promise<boolean> {
+  if (!ExpoContacts.displayContactAsync) {
+    throw new UnavailabilityError('Contacts', 'displayContactAsync');
+  }
+  return await ExpoContacts.displayContactAsync(contactId);
+}
+
+
 /**
  * Returns whether the Contacts API is enabled on the current device. This method does not check the app permissions.
  * @returns A promise that fulfills with a `boolean`, indicating whether the Contacts API is available on the current device. It always resolves to `false` on web.

diff --git a/android/src/main/java/expo/modules/contacts/Contact.kt b/android/src/main/java/expo/modules/contacts/Contact.kt
index 36467b992b66363f808ee53deae643325794b838..79a763bf515d8935dd6d1d6beec17050801db938 100644
--- a/android/src/main/java/expo/modules/contacts/Contact.kt
+++ b/android/src/main/java/expo/modules/contacts/Contact.kt
@@ -2,9 +2,10 @@ package expo.modules.contacts
 
 import android.content.ContentProviderOperation
 import android.content.ContentValues
+import android.content.Context
 import android.database.Cursor
 import android.graphics.Bitmap
-import android.graphics.BitmapFactory
+import android.graphics.ImageDecoder
 import android.net.Uri
 import android.os.Bundle
 import android.provider.ContactsContract
@@ -29,7 +30,7 @@ import java.util.Calendar
 import java.util.Locale
 
 // TODO: MaidenName Nickname
-class Contact(var contactId: String) {
+class Contact(var contactId: String, val context: Context) {
   private var rawContactId: String? = null
   var lookupKey: String? = null
   private var displayName: String? = null
@@ -263,7 +264,7 @@ class Contact(var contactId: String) {
       .withValue(CommonDataKinds.Organization.DEPARTMENT, department)
     ops.add(op.build())
     op = ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)
-      .withSelection(selection, arrayOf(contactId, CommonDataKinds.Note.CONTENT_ITEM_TYPE))
+      .withSelection(selection, selectionArgs)
       .withValue(CommonDataKinds.Note.NOTE, note)
     ops.add(op.build())
     op.withYieldAllowed(true)
@@ -512,7 +513,7 @@ class Contact(var contactId: String) {
     }
 
   private fun getThumbnailBitmap(photoUri: String?): Bitmap {
-    val path = Uri.parse(photoUri).path
-    return BitmapFactory.decodeFile(path)
+    val uri = Uri.parse(photoUri)
+    return ImageDecoder.decodeBitmap(ImageDecoder.createSource(context.contentResolver, uri))
   }
 }
diff --git a/android/src/main/java/expo/modules/contacts/ContactsModule.kt b/android/src/main/java/expo/modules/contacts/ContactsModule.kt
index 410b498d19dd34bcd3c11d0ed62870b25b1991c5..26d8da160d03162c114f7b389904e1be54168a86 100644
--- a/android/src/main/java/expo/modules/contacts/ContactsModule.kt
+++ b/android/src/main/java/expo/modules/contacts/ContactsModule.kt
@@ -341,7 +341,7 @@ class ContactsModule : Module() {
         )
         if (contact.emails.size >= 3) {
           email = contact.emails[2]
-          intent.putExtra(ContactsContract.Intents.Insert.SECONDARY_EMAIL, email.data);
+          intent.putExtra(ContactsContract.Intents.Insert.TERTIARY_EMAIL, email.data);
           intent.putExtra(
             ContactsContract.Intents.Insert.TERTIARY_EMAIL_TYPE,
             email.mapStringToType(email.type)
@@ -390,7 +390,7 @@ class ContactsModule : Module() {
     get() = (appContext.reactContext ?: throw Exceptions.ReactContextLost()).contentResolver
 
   private fun mutateContact(initContact: Contact?, data: Map<String, Any>): Contact {
-    val contact = initContact ?: Contact(UUID.randomUUID().toString())
+    val contact = initContact ?: Contact(UUID.randomUUID().toString(), activity)
 
     data.safeGet<String>("firstName")?.let { contact.firstName = it }
     data.safeGet<String>("middleName")?.let { contact.middleName = it }
@@ -716,7 +716,7 @@ class ContactsModule : Module() {
 
       // add or update existing contact for iterating data based on contact id
       if (!map.containsKey(contactId)) {
-        map[contactId] = Contact(contactId)
+        map[contactId] = Contact(contactId, activity)
       }
       val contact = map[contactId]
       contact!!.fromCursor(cursor)
diff --git a/build/Contacts.js b/build/Contacts.js
index 6068f582ac6f3575b445228a74aa853c0d4ef26e..718489b236e5c84f59df4a3086f75d9d44fdc961 100644
--- a/build/Contacts.js
+++ b/build/Contacts.js
@@ -134,7 +134,8 @@ export async function updateContactAsync(contact) {
     if (!ExpoContacts.updateContactAsync) {
         throw new UnavailabilityError('Contacts', 'updateContactAsync');
     }
-    return await ExpoContacts.updateContactAsync(contact);
+    const noIdContact = removeKeyIds(contact);
+    return await ExpoContacts.updateContactAsync(noIdContact);
 }
 // @needs-audit
 /**
@@ -416,11 +417,18 @@ export async function requestPermissionsAsync() {
 }
 /** @private */
 function removeIds(contact) {
-    const updatedContact = { ...contact };
+    let updatedContact = { ...contact };
     if (contact.id && __DEV__) {
         console.warn(`You have set an id = ${contact.id} for the contact. This value will be ignored, because the id will be generated by the OS`);
         delete updatedContact.id;
     }
+    updatedContact = removeKeyIds(contact)
+    return updatedContact;
+}
+
+/** @private */
+function removeKeyIds(contact) {
+    const updatedContact = { ...contact };
     for (const key of Object.keys(contact)) {
         if (Array.isArray(contact[key])) {
             updatedContact[key] = contact[key].map((item, index) => {
@@ -435,6 +443,7 @@ function removeIds(contact) {
     }
     return updatedContact;
 }
+
 /**
  * Possible fields to retrieve for a contact.
  */
diff --git a/src/Contacts.ts b/src/Contacts.ts
index 147e55750d166851067768689d4b569e4affd59a..787413f47af02f1793c3e300f284ee4fce7d0bf6 100644
--- a/src/Contacts.ts
+++ b/src/Contacts.ts
@@ -727,7 +727,8 @@ export async function updateContactAsync(contact: Contact): Promise<string> {
   if (!ExpoContacts.updateContactAsync) {
     throw new UnavailabilityError('Contacts', 'updateContactAsync');
   }
-  return await ExpoContacts.updateContactAsync(contact);
+  const noIdContact = removeKeyIds(contact);
+  return await ExpoContacts.updateContactAsync(noIdContact);
 }
 
 // @needs-audit

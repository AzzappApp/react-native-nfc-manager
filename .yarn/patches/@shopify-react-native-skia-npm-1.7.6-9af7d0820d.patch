diff --git a/cpp/api/JsiSkImageFilterFactory.h b/cpp/api/JsiSkImageFilterFactory.h
index 3488401b04d08e4f4b7b0ea7624b2aa97a920482..a200b7429147f81df4f15a77ef0018f5d710ce00 100644
--- a/cpp/api/JsiSkImageFilterFactory.h
+++ b/cpp/api/JsiSkImageFilterFactory.h
@@ -36,6 +36,14 @@ public:
                      SkImageFilters::Blur(sigmaX, sigmaY, (SkTileMode)tileMode,
                                           imageFilter)));
   }
+  
+  JSI_HOST_FUNCTION(MakeImage) {
+    auto image = JsiSkImage::fromValue(runtime, arguments[0]);
+    auto sampling = SkSamplingOptions(SkFilterMode::kLinear, SkMipmapMode::kNone);
+    return jsi::Object::createFromHostObject(
+        runtime, std::make_shared<JsiSkImageFilter>(
+                     getContext(), SkImageFilters::Image(std::move(image), sampling)));
+  }
 
   JSI_HOST_FUNCTION(MakeColorFilter) {
     auto cf = JsiSkColorFilter::fromValue(runtime, arguments[0]);
@@ -48,6 +56,32 @@ public:
                      getContext(), SkImageFilters::ColorFilter(
                                        std::move(cf), std::move(input))));
   }
+  
+  JSI_HOST_FUNCTION(MakeMatrixTransform) {
+    auto matrix = JsiSkMatrix::fromValue(runtime, arguments[0]);
+    auto sampling = SkSamplingOptions(SkFilterMode::kLinear, SkMipmapMode::kNone);
+    sk_sp<SkImageFilter> input;
+    if (!arguments[1].isNull()) {
+      input = JsiSkImageFilter::fromValue(runtime, arguments[1]);
+    }
+    return jsi::Object::createFromHostObject(
+        runtime, std::make_shared<JsiSkImageFilter>(
+                     getContext(), SkImageFilters::MatrixTransform(
+                                       *matrix, sampling, std::move(input))));
+  }
+  
+  JSI_HOST_FUNCTION(MakeCrop) {
+    auto rect = JsiSkRect::fromValue(runtime, arguments[0]);
+    sk_sp<SkImageFilter> input;
+    if (!arguments[1].isNull()) {
+      input = JsiSkImageFilter::fromValue(runtime, arguments[1]);
+    }
+    
+    return jsi::Object::createFromHostObject(
+        runtime, std::make_shared<JsiSkImageFilter>(
+                     getContext(), SkImageFilters::Crop(
+                                       *rect, SkTileMode::kDecal, std::move(input))));
+  }
 
   JSI_HOST_FUNCTION(MakeOffset) {
     auto x = arguments[0].asNumber();
@@ -218,11 +252,49 @@ public:
                      getContext(), SkImageFilters::RuntimeShader(
                                        *rtb, childName, std::move(input))));
   }
+  
+  JSI_HOST_FUNCTION(MakeRuntimeShaderWithChildren) {
+    auto rtb = JsiSkRuntimeShaderBuilder::fromValue(runtime, arguments[0]);
+
+    std::vector<std::string> childNames;
+    auto childNamesJS = arguments[1].asObject(runtime).asArray(runtime);
+    size_t length = childNamesJS.size(runtime);
+    for (size_t i = 0; i < length; ++i) {
+      auto element = childNamesJS.getValueAtIndex(runtime, i);
+      childNames.push_back(element.asString(runtime).utf8(runtime).c_str());
+    }
+    std::vector<std::string_view> childNamesStringView;
+    childNamesStringView.reserve(childNames.size());
+    for (const auto& name : childNames) {
+        childNamesStringView.push_back(std::string_view(name));
+    }
+    
+    std::vector<sk_sp<SkImageFilter>> inputs;
+    auto inputsJS = arguments[2].asObject(runtime).asArray(runtime);
+    if (inputsJS.size(runtime) != length) {
+      return jsi::Value::null();
+    }
+    for (size_t i = 0; i < length; ++i) {
+      auto element = inputsJS.getValueAtIndex(runtime, i);
+      if (element.isNull()) {
+        inputs.push_back(nullptr);
+      } else {
+        inputs.push_back(JsiSkImageFilter::fromValue(runtime, element));
+      }
+    }
+    return jsi::Object::createFromHostObject(
+        runtime, std::make_shared<JsiSkImageFilter>(
+                     getContext(), SkImageFilters::RuntimeShader(
+                                       *rtb, childNamesStringView.data(), inputs.data(), length)));
+  }
 
   JSI_EXPORT_FUNCTIONS(
       JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeBlur),
       JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeOffset),
       JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeColorFilter),
+      JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeCrop),
+      JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeMatrixTransform),
+      JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeImage),
       JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeShader),
       JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeDisplacementMap),
       JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeCompose),
@@ -231,7 +303,8 @@ public:
       JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeBlend),
       JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeDropShadow),
       JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeDropShadowOnly),
-      JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeRuntimeShader))
+      JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeRuntimeShader),
+      JSI_EXPORT_FUNC(JsiSkImageFilterFactory, MakeRuntimeShaderWithChildren))
 
   explicit JsiSkImageFilterFactory(std::shared_ptr<RNSkPlatformContext> context)
       : JsiSkHostObject(std::move(context)) {}
diff --git a/lib/commonjs/skia/types/ImageFilter/ImageFilterFactory.d.ts b/lib/commonjs/skia/types/ImageFilter/ImageFilterFactory.d.ts
index 3ccb1e20cd143d0d8f64970f000705e72f2485db..9a31f238a8b43d2b5416ac703e2d9257a3701bdb 100644
--- a/lib/commonjs/skia/types/ImageFilter/ImageFilterFactory.d.ts
+++ b/lib/commonjs/skia/types/ImageFilter/ImageFilterFactory.d.ts
@@ -1,5 +1,7 @@
 import type { SkColor } from "../Color";
 import type { SkColorFilter } from "../ColorFilter/ColorFilter";
+import { SkImage } from "../Image/Image";
+import { SkMatrix } from "../Matrix";
 import type { BlendMode } from "../Paint";
 import type { SkRect } from "../Rect";
 import type { SkRuntimeShaderBuilder } from "../RuntimeEffect";
@@ -127,4 +129,9 @@ export interface ImageFilterFactory {
      *                         shader. If null the implicit source image is used instead
      */
     MakeRuntimeShader: (builder: SkRuntimeShaderBuilder, childShaderName: string | null, input: SkImageFilter | null) => SkImageFilter;
+
+  MakeCrop(rect: SkRect, input: SkImageFilter | null): SkImageFilter;
+  MakeMatrixTransform(matrix: SkMatrix, filter: SkImageFilter | null): SkImageFilter;
+  MakeImage(image: SkImage): SkImageFilter;
+  MakeRuntimeShaderWithChildren: (builder: SkRuntimeShaderBuilder, childNames: string[], children: (SkImageFilter | null)[]) => SkImageFilter;
 }
diff --git a/lib/module/skia/types/ImageFilter/ImageFilterFactory.d.ts b/lib/module/skia/types/ImageFilter/ImageFilterFactory.d.ts
index 3ccb1e20cd143d0d8f64970f000705e72f2485db..9a31f238a8b43d2b5416ac703e2d9257a3701bdb 100644
--- a/lib/module/skia/types/ImageFilter/ImageFilterFactory.d.ts
+++ b/lib/module/skia/types/ImageFilter/ImageFilterFactory.d.ts
@@ -1,5 +1,7 @@
 import type { SkColor } from "../Color";
 import type { SkColorFilter } from "../ColorFilter/ColorFilter";
+import { SkImage } from "../Image/Image";
+import { SkMatrix } from "../Matrix";
 import type { BlendMode } from "../Paint";
 import type { SkRect } from "../Rect";
 import type { SkRuntimeShaderBuilder } from "../RuntimeEffect";
@@ -127,4 +129,9 @@ export interface ImageFilterFactory {
      *                         shader. If null the implicit source image is used instead
      */
     MakeRuntimeShader: (builder: SkRuntimeShaderBuilder, childShaderName: string | null, input: SkImageFilter | null) => SkImageFilter;
+
+  MakeCrop(rect: SkRect, input: SkImageFilter | null): SkImageFilter;
+  MakeMatrixTransform(matrix: SkMatrix, filter: SkImageFilter | null): SkImageFilter;
+  MakeImage(image: SkImage): SkImageFilter;
+  MakeRuntimeShaderWithChildren: (builder: SkRuntimeShaderBuilder, childNames: string[], children: (SkImageFilter | null)[]) => SkImageFilter;
 }
diff --git a/lib/typescript/src/skia/types/ImageFilter/ImageFilterFactory.d.ts b/lib/typescript/src/skia/types/ImageFilter/ImageFilterFactory.d.ts
index 3ccb1e20cd143d0d8f64970f000705e72f2485db..9a31f238a8b43d2b5416ac703e2d9257a3701bdb 100644
--- a/lib/typescript/src/skia/types/ImageFilter/ImageFilterFactory.d.ts
+++ b/lib/typescript/src/skia/types/ImageFilter/ImageFilterFactory.d.ts
@@ -1,5 +1,7 @@
 import type { SkColor } from "../Color";
 import type { SkColorFilter } from "../ColorFilter/ColorFilter";
+import { SkImage } from "../Image/Image";
+import { SkMatrix } from "../Matrix";
 import type { BlendMode } from "../Paint";
 import type { SkRect } from "../Rect";
 import type { SkRuntimeShaderBuilder } from "../RuntimeEffect";
@@ -127,4 +129,9 @@ export interface ImageFilterFactory {
      *                         shader. If null the implicit source image is used instead
      */
     MakeRuntimeShader: (builder: SkRuntimeShaderBuilder, childShaderName: string | null, input: SkImageFilter | null) => SkImageFilter;
+
+  MakeCrop(rect: SkRect, input: SkImageFilter | null): SkImageFilter;
+  MakeMatrixTransform(matrix: SkMatrix, filter: SkImageFilter | null): SkImageFilter;
+  MakeImage(image: SkImage): SkImageFilter;
+  MakeRuntimeShaderWithChildren: (builder: SkRuntimeShaderBuilder, childNames: string[], children: (SkImageFilter | null)[]) => SkImageFilter;
 }
diff --git a/src/skia/types/ImageFilter/ImageFilterFactory.ts b/src/skia/types/ImageFilter/ImageFilterFactory.ts
index ee691877c50d7f8e8f6f7e7fe0657ae7f59cd9bd..748e1d8320750282fa07565312e03c2c0037f5f6 100644
--- a/src/skia/types/ImageFilter/ImageFilterFactory.ts
+++ b/src/skia/types/ImageFilter/ImageFilterFactory.ts
@@ -1,5 +1,7 @@
 import type { SkColor } from "../Color";
 import type { SkColorFilter } from "../ColorFilter/ColorFilter";
+import { SkImage } from "../Image/Image";
+import { SkMatrix } from "../Matrix";
 import type { BlendMode } from "../Paint";
 import type { SkRect } from "../Rect";
 import type { SkRuntimeShaderBuilder } from "../RuntimeEffect";
@@ -189,4 +191,9 @@ export interface ImageFilterFactory {
     childShaderName: string | null,
     input: SkImageFilter | null
   ) => SkImageFilter;
+
+  MakeCrop(rect: SkRect, input: SkImageFilter | null): SkImageFilter;
+  MakeMatrixTransform(matrix: SkMatrix, filter: SkImageFilter | null): SkImageFilter;
+  MakeImage(image: SkImage): SkImageFilter;
+  MakeRuntimeShaderWithChildren: (builder: SkRuntimeShaderBuilder, childNames: string[], children: (SkImageFilter | null)[]) => SkImageFilter;
 }

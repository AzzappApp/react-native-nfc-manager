diff --git a/android/src/main/java/com/swmansion/rnscreens/ScreenViewManager.kt b/android/src/main/java/com/swmansion/rnscreens/ScreenViewManager.kt
index 3889c2f362cf6198822570662c2e18f0f7be82b2..989a9cb86868d151bf4eb8f5e6b44dc02cff21f0 100644
--- a/android/src/main/java/com/swmansion/rnscreens/ScreenViewManager.kt
+++ b/android/src/main/java/com/swmansion/rnscreens/ScreenViewManager.kt
@@ -271,6 +271,11 @@ open class ScreenViewManager :
         view?.sheetElevation = value.toFloat()
     }
 
+    @ReactProp(name = "stackAnimationOptions")
+    override fun setStackAnimationOptions(view: Screen, value: ReadableMap?) {
+        // not handled on android
+    }
+
     // these props are not available on Android, however we must override their setters
     override fun setFullScreenSwipeEnabled(
         view: Screen?,
diff --git a/ios/RNSConvert.mm b/ios/RNSConvert.mm
index c8ba0d1c6a4e3d3cc879170ad56db495f0b1600e..1cdf02cda86aface93dd6ea76fa04894d0f0229c 100644
--- a/ios/RNSConvert.mm
+++ b/ios/RNSConvert.mm
@@ -83,6 +83,8 @@ + (RNSScreenStackAnimation)RNSScreenStackAnimationFromCppEquivalent:(react::RNSS
       return RNSScreenStackAnimationSlideFromBottom;
     case Fade_from_bottom:
       return RNSScreenStackAnimationFadeFromBottom;
+    case Custom:
+      return RNSScreenStackAnimationCustom;
   }
 }
 
diff --git a/ios/RNSEnums.h b/ios/RNSEnums.h
index 2d05610b48f3a30d2ff8f4d8a1be738f789c5086..d766f216378b16a0feb3d4bd91a8a93b064a0bdf 100644
--- a/ios/RNSEnums.h
+++ b/ios/RNSEnums.h
@@ -17,6 +17,7 @@ typedef NS_ENUM(NSInteger, RNSScreenStackAnimation) {
   RNSScreenStackAnimationSlideFromBottom,
   RNSScreenStackAnimationSimplePush,
   RNSScreenStackAnimationSlideFromLeft,
+  RNSScreenStackAnimationCustom,
 };
 
 typedef NS_ENUM(NSInteger, RNSScreenReplaceAnimation) {
diff --git a/ios/RNSScreen.h b/ios/RNSScreen.h
index 558ed17b08924711d1682c468c8d33ba6d373355..cdf9b6c99ab5be0245b0e4cd2fe4381101dcee5a 100644
--- a/ios/RNSScreen.h
+++ b/ios/RNSScreen.h
@@ -66,6 +66,7 @@ namespace react = facebook::react;
 @property (nonatomic) BOOL hasHomeIndicatorHiddenSet;
 @property (nonatomic) BOOL hasOrientationSet;
 @property (nonatomic) RNSScreenStackAnimation stackAnimation;
+@property (nonatomic, copy) NSDictionary* stackAnimationOptions;
 @property (nonatomic) RNSScreenStackPresentation stackPresentation;
 @property (nonatomic) RNSScreenSwipeDirection swipeDirection;
 @property (nonatomic) RNSScreenReplaceAnimation replaceAnimation;
diff --git a/ios/RNSScreen.mm b/ios/RNSScreen.mm
index 8481d2125f37e81e65f1e94b9b10a210813fdecd..dab1ac5834a7df222d6738951777d185902139a9 100644
--- a/ios/RNSScreen.mm
+++ b/ios/RNSScreen.mm
@@ -321,6 +321,7 @@ - (void)setStackAnimation:(RNSScreenStackAnimation)stackAnimation
     case RNSScreenStackAnimationSlideFromBottom:
     case RNSScreenStackAnimationFadeFromBottom:
     case RNSScreenStackAnimationSlideFromLeft:
+    case RNSScreenStackAnimationCustom:
       // Default
       break;
   }
@@ -1288,6 +1289,27 @@ - (void)updateProps:(react::Props::Shared const &)props oldProps:(react::Props::
     [self setStackAnimation:[RNSConvert RNSScreenStackAnimationFromCppEquivalent:newScreenProps.stackAnimation]];
   }
 
+   
+  auto options = newScreenProps.stackAnimationOptions;
+  NSDictionary* stackAnimationOptions = @{
+    @"animator": [NSString stringWithUTF8String:options.animator.c_str()],
+    @"fromRectangle": @{
+      @"x": @(options.fromRectangle.x),
+      @"y": @(options.fromRectangle.y),
+      @"width": @(options.fromRectangle.width),
+      @"height": @(options.fromRectangle.height)
+    },
+    @"toRectangle": @{
+      @"x": @(options.toRectangle.x),
+      @"y": @(options.toRectangle.y),
+      @"width": @(options.toRectangle.width),
+      @"height": @(options.toRectangle.height)
+    },
+    @"fromRadius": @(options.fromRadius),
+    @"toRadius": @(options.toRadius),
+  };
+  [self setStackAnimationOptions:stackAnimationOptions]; 
+
   if (newScreenProps.replaceAnimation != oldScreenProps.replaceAnimation) {
     [self setReplaceAnimation:[RNSConvert RNSScreenReplaceAnimationFromCppEquivalent:newScreenProps.replaceAnimation]];
   }
@@ -1957,6 +1979,7 @@ @implementation RNSScreenManager
 RCT_EXPORT_VIEW_PROPERTY(replaceAnimation, RNSScreenReplaceAnimation)
 RCT_EXPORT_VIEW_PROPERTY(stackPresentation, RNSScreenStackPresentation)
 RCT_EXPORT_VIEW_PROPERTY(stackAnimation, RNSScreenStackAnimation)
+RCT_EXPORT_VIEW_PROPERTY(stackAnimationOptions, NSDictionary)
 RCT_EXPORT_VIEW_PROPERTY(swipeDirection, RNSScreenSwipeDirection)
 RCT_EXPORT_VIEW_PROPERTY(transitionDuration, NSNumber)
 
@@ -2057,6 +2080,7 @@ @implementation RCTConvert (RNSScreen)
       @"slide_from_left" : @(RNSScreenStackAnimationSlideFromLeft),
       @"ios_from_right" : @(RNSScreenStackAnimationDefault),
       @"ios_from_left" : @(RNSScreenStackAnimationSlideFromLeft),
+      @"custom" : @(RNSScreenStackAnimationCustom),
     }),
     RNSScreenStackAnimationDefault,
     integerValue)
diff --git a/ios/RNSScreenStackAnimator.h b/ios/RNSScreenStackAnimator.h
index 0870f8d1ead7c66b3f29828591fd6a24d7914194..59ce728d05abe106723fa33efa9395e1b058688a 100644
--- a/ios/RNSScreenStackAnimator.h
+++ b/ios/RNSScreenStackAnimator.h
@@ -2,6 +2,17 @@
 
 #import "RNSScreen.h"
 
+@protocol RNSScreenCustomStackAnimator <NSObject>
+
+- (void)animateCustomWithTransitionContext:(id<UIViewControllerContextTransitioning>)transitionContext
+                                      toVC:(UIViewController *)toViewController
+                                    fromVC:(UIViewController *)fromViewController
+                              forOperation:(UINavigationControllerOperation)operation
+                               andDuration:(NSTimeInterval)duration
+                               withOptions:(NSDictionary *)options;
+
+@end
+
 @interface RNSScreenStackAnimator : NSObject <UIViewControllerAnimatedTransitioning>
 
 /// This property is filled whenever there is an ongoing animation and cleared on animation end.
@@ -19,4 +30,6 @@
 
 + (BOOL)isCustomAnimation:(RNSScreenStackAnimation)animation;
 
++ (void)registerCustomAnimator:(id<RNSScreenCustomStackAnimator>)animator forName:(NSString *)name;
+
 @end
diff --git a/ios/RNSScreenStackAnimator.mm b/ios/RNSScreenStackAnimator.mm
index 89caf8d00dca1b6c387acdacd658cd15e9ca1170..dedeb7329a5bd7d726f7909356c724e16444ed05 100644
--- a/ios/RNSScreenStackAnimator.mm
+++ b/ios/RNSScreenStackAnimator.mm
@@ -554,6 +554,9 @@ - (void)animateTransitionWithStackAnimation:(RNSScreenStackAnimation)animation
     case RNSScreenStackAnimationFadeFromBottom:
       [self animateFadeFromBottomWithTransitionContext:transitionContext toVC:toVC fromVC:fromVC];
       return;
+    case RNSScreenStackAnimationCustom:
+      [self animateCustomWithTransitionContext:transitionContext toVC:toVC fromVC:fromVC];
+      return;
     case RNSScreenStackAnimationNone:
       [self animateNoneWithTransitionContext:transitionContext toVC:toVC fromVC:fromVC];
       return;
@@ -566,6 +569,50 @@ - (void)animateTransitionWithStackAnimation:(RNSScreenStackAnimation)animation
   }
 }
 
+ 
+static NSMutableDictionary<NSString *, id<RNSScreenCustomStackAnimator>> *customAnimators;
++ (void)registerCustomAnimator:(id<RNSScreenCustomStackAnimator>)animator forName:(NSString *)name {
+  if (customAnimators == nil) {
+    customAnimators = [[NSMutableDictionary alloc] init];
+  }
+  customAnimators[name] = animator;
+}
+
+- (void)animateCustomWithTransitionContext:(id<UIViewControllerContextTransitioning>)transitionContext
+                                      toVC:(UIViewController *)toViewController
+                                    fromVC:(UIViewController *)fromViewController
+{
+  RNSScreenView *screen;
+  if (_operation == UINavigationControllerOperationPush) {
+    screen = ((RNSScreen *)toViewController).screenView;
+  } else if (_operation == UINavigationControllerOperationPop) {
+    screen = ((RNSScreen *)fromViewController).screenView;
+  }
+  if (screen == nil || screen.stackAnimationOptions == nil) {
+    [self animateSimplePushWithShadowEnabled:false
+                                            transitionContext:transitionContext
+                                            toVC:toViewController
+                                          fromVC:fromViewController];
+    return;
+  }
+  NSDictionary *options = screen.stackAnimationOptions;
+  NSString *animatorName = options[@"animator"];
+  id<RNSScreenCustomStackAnimator> animator = customAnimators[animatorName];
+  if (animator == nil) {
+    [self animateSimplePushWithShadowEnabled:false
+                                            transitionContext:transitionContext
+                                            toVC:toViewController
+                                          fromVC:fromViewController];
+    return;
+  }
+  [animator animateCustomWithTransitionContext:transitionContext
+                                          toVC:toViewController
+                                        fromVC:fromViewController
+                                  forOperation:_operation
+                                   andDuration:[self transitionDuration:transitionContext]
+                                   withOptions:options];
+}
+
 + (UISpringTimingParameters *)defaultSpringTimingParametersApprox
 {
   // Default curve provider is as defined below, however spring timing defined this way
diff --git a/lib/typescript/fabric/ScreenNativeComponent.d.ts b/lib/typescript/fabric/ScreenNativeComponent.d.ts
index 34013f9ac1cb80e4ea6fd933ccb82c01cfbe7149..f8d03668c885eb87b683bd030534b1ad4f8ac182 100644
--- a/lib/typescript/fabric/ScreenNativeComponent.d.ts
+++ b/lib/typescript/fabric/ScreenNativeComponent.d.ts
@@ -24,7 +24,7 @@ type GestureResponseDistanceType = Readonly<{
     bottom: Float;
 }>;
 type StackPresentation = 'push' | 'modal' | 'transparentModal' | 'fullScreenModal' | 'formSheet' | 'containedModal' | 'containedTransparentModal';
-type StackAnimation = 'default' | 'flip' | 'simple_push' | 'none' | 'fade' | 'slide_from_right' | 'slide_from_left' | 'slide_from_bottom' | 'fade_from_bottom' | 'ios_from_right' | 'ios_from_left';
+type StackAnimation = 'default' | 'flip' | 'simple_push' | 'none' | 'fade' | 'slide_from_right' | 'slide_from_left' | 'slide_from_bottom' | 'fade_from_bottom' | 'ios_from_right' | 'ios_from_left' | 'custom';
 type SwipeDirection = 'vertical' | 'horizontal';
 type ReplaceAnimation = 'pop' | 'push';
 export interface NativeProps extends ViewProps {
@@ -61,6 +61,7 @@ export interface NativeProps extends ViewProps {
     gestureResponseDistance?: GestureResponseDistanceType;
     stackPresentation?: WithDefault<StackPresentation, 'push'>;
     stackAnimation?: WithDefault<StackAnimation, 'default'>;
+    stackAnimationOptions?: { animator: string } & Record<string, any>;
     transitionDuration?: WithDefault<Int32, 500>;
     replaceAnimation?: WithDefault<ReplaceAnimation, 'pop'>;
     swipeDirection?: WithDefault<SwipeDirection, 'horizontal'>;
diff --git a/lib/typescript/types.d.ts b/lib/typescript/types.d.ts
index 4bc388eff4ba614ad66c4aa29b0ec567bdbac5dd..1c7bd38965266aacf90f027a8fe84a394613d0a9 100644
--- a/lib/typescript/types.d.ts
+++ b/lib/typescript/types.d.ts
@@ -11,7 +11,7 @@ export type SearchBarCommands = {
 };
 export type BackButtonDisplayMode = 'default' | 'generic' | 'minimal';
 export type StackPresentationTypes = 'push' | 'modal' | 'transparentModal' | 'containedModal' | 'containedTransparentModal' | 'fullScreenModal' | 'formSheet';
-export type StackAnimationTypes = 'default' | 'fade' | 'fade_from_bottom' | 'flip' | 'none' | 'simple_push' | 'slide_from_bottom' | 'slide_from_right' | 'slide_from_left' | 'ios_from_right' | 'ios_from_left';
+export type StackAnimationTypes = 'default' | 'fade' | 'fade_from_bottom' | 'flip' | 'none' | 'simple_push' | 'slide_from_bottom' | 'slide_from_right' | 'slide_from_left' | 'ios_from_right' | 'ios_from_left' | 'custom';
 export type BlurEffectTypes = 'none' | 'extraLight' | 'light' | 'dark' | 'regular' | 'prominent' | 'systemUltraThinMaterial' | 'systemThinMaterial' | 'systemMaterial' | 'systemThickMaterial' | 'systemChromeMaterial' | 'systemUltraThinMaterialLight' | 'systemThinMaterialLight' | 'systemMaterialLight' | 'systemThickMaterialLight' | 'systemChromeMaterialLight' | 'systemUltraThinMaterialDark' | 'systemThinMaterialDark' | 'systemMaterialDark' | 'systemThickMaterialDark' | 'systemChromeMaterialDark';
 export type ScreenReplaceTypes = 'push' | 'pop';
 export type SwipeDirectionTypes = 'vertical' | 'horizontal';
@@ -341,6 +341,10 @@ export interface ScreenProps extends ViewProps {
      * - "none" – the screen appears/dissapears without an animation
      */
     stackAnimation?: StackAnimationTypes;
+    /**
+     * Custom animator options
+     */
+    stackAnimationOptions?: { animator: string } & Record<string, any>
     /**
      * How should the screen be presented.
      * The following values are currently supported:
diff --git a/src/fabric/ScreenNativeComponent.ts b/src/fabric/ScreenNativeComponent.ts
index 37dbf94c683c08864ed518e504880ec2e1af58a9..7846de352172c88c2e57a1d4d710150a8644b6c1 100644
--- a/src/fabric/ScreenNativeComponent.ts
+++ b/src/fabric/ScreenNativeComponent.ts
@@ -59,12 +59,31 @@ type StackAnimation =
   | 'slide_from_bottom'
   | 'fade_from_bottom'
   | 'ios_from_right'
-  | 'ios_from_left';
+  | 'ios_from_left'
+  | 'custom';
 
 type SwipeDirection = 'vertical' | 'horizontal';
 
 type ReplaceAnimation = 'pop' | 'push';
 
+ 
+type StackAnimationOptionsRect = Readonly<{
+       x: Double;
+       y: Double;
+       width: Double;
+       height: Double;
+     }>;
+     
+type StackAnimationOptions = Readonly<{
+       animator: string;
+       fromRectangle: StackAnimationOptionsRect;
+       toRectangle: StackAnimationOptionsRect;
+       fromRadius: Double;
+       toRadius: Double;
+     }>;
+   
+  
+
 export interface NativeProps extends ViewProps {
   onAppear?: DirectEventHandler<ScreenEvent>;
   onDisappear?: DirectEventHandler<ScreenEvent>;
@@ -99,6 +118,7 @@ export interface NativeProps extends ViewProps {
   gestureResponseDistance?: GestureResponseDistanceType;
   stackPresentation?: WithDefault<StackPresentation, 'push'>;
   stackAnimation?: WithDefault<StackAnimation, 'default'>;
+  stackAnimationOptions?: StackAnimationOptions;
   transitionDuration?: WithDefault<Int32, 500>;
   replaceAnimation?: WithDefault<ReplaceAnimation, 'pop'>;
   swipeDirection?: WithDefault<SwipeDirection, 'horizontal'>;
diff --git a/src/types.tsx b/src/types.tsx
index 0f4dddaba340186a274312e13344ffb0b03f405a..72f4b0f88e00d88c98d116cdd4b2748e481b5141 100644
--- a/src/types.tsx
+++ b/src/types.tsx
@@ -39,7 +39,8 @@ export type StackAnimationTypes =
   | 'slide_from_right'
   | 'slide_from_left'
   | 'ios_from_right'
-  | 'ios_from_left';
+  | 'ios_from_left'
+  | 'custom';
 export type BlurEffectTypes =
   | 'none'
   | 'extraLight'
@@ -415,6 +416,10 @@ export interface ScreenProps extends ViewProps {
    * - "none" – the screen appears/dissapears without an animation
    */
   stackAnimation?: StackAnimationTypes;
+  /**
+   * Custom animator options
+   */
+  stackAnimationOptions?: { animator: string } & Record<string, any>
   /**
    * How should the screen be presented.
    * The following values are currently supported:

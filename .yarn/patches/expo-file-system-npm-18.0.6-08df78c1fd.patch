diff --git a/src/next/ExpoFileSystem.types.ts b/src/next/ExpoFileSystem.types.ts
index 8b83595a69f22cb754bbbebbd91eddbc7ddb7ac7..461cc8dd163b2420f9ee86410f11780fbcdafc3f 100644
--- a/src/next/ExpoFileSystem.types.ts
+++ b/src/next/ExpoFileSystem.types.ts
@@ -43,12 +43,12 @@ export declare class Directory {
   /**
    * Copies a directory.
    */
-  copy(destination: Directory | File);
+  copy(destination: Directory | File): void;
 
   /**
    * Moves a directory. Updates the `uri` property that now points to the new location.
    */
-  move(destination: Directory | File);
+  move(destination: Directory | File): void;
 
   /**
    * @hidden
@@ -132,12 +132,12 @@ export declare class File {
   /**
    * Copies a file.
    */
-  copy(destination: Directory | File);
+  copy(destination: Directory | File): void;
 
   /**
    * Moves a directory. Updates the `uri` property that now points to the new location.
    */
-  move(destination: Directory | File);
+  move(destination: Directory | File): void;
 
   /**
    * Returns a FileHandle object that can be used to read and write data to the file.
diff --git a/src/next/FileSystem.ts b/src/next/FileSystem.ts
index 8bc8cc5badd6f7d5e548b44493ce0d292290c458..cce47f9232d1d23f03c9e9237015d205017690de 100644
--- a/src/next/FileSystem.ts
+++ b/src/next/FileSystem.ts
@@ -50,7 +50,7 @@ export class FileBlob extends Blob {
   }
 
   async arrayBuffer(): Promise<ArrayBuffer> {
-    return this.file.bytes().buffer;
+    return this.file.bytes().buffer as ArrayBuffer;
   }
 
   async text(): Promise<string> {
diff --git a/src/next/pathUtilities/path.ts b/src/next/pathUtilities/path.ts
index e434d9bd288a5a3c8bd716a07dda5abd22ec755b..a79dc6e1537f4072553d622bd8956366431d601d 100644
--- a/src/next/pathUtilities/path.ts
+++ b/src/next/pathUtilities/path.ts
@@ -19,7 +19,7 @@
 // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 // USE OR OTHER DEALINGS IN THE SOFTWARE.
 
-function isPathSeparator(code) {
+function isPathSeparator(code: string): boolean {
   return code === '/';
 }
 
@@ -85,7 +85,7 @@ function normalizeString(path: string, allowAboveRoot: boolean, separator: strin
   return res;
 }
 
-function formatExt(ext) {
+function formatExt(ext?: string): string {
   return ext ? `${ext[0] === '.' ? '' : '.'}${ext}` : '';
 }
 
diff --git a/src/next/pathUtilities/url.ts b/src/next/pathUtilities/url.ts
index 0c30006e707c01f21471e6d561125cfb506e9d45..fdaed64255d4cd6e324b13d94f31917c29bce640 100644
--- a/src/next/pathUtilities/url.ts
+++ b/src/next/pathUtilities/url.ts
@@ -61,7 +61,7 @@ export function pathToFileURL(filepath: string) {
   return new URL(pathToFileURLString(filepath));
 }
 
-function getPathFromURLPosix(url) {
+function getPathFromURLPosix(url: URL) {
   if (url.hostname !== '') {
     throw new Error(
       'URL host must be localhost or empty â€“ are you sure your url starts with `file:///`?'
@@ -70,7 +70,7 @@ function getPathFromURLPosix(url) {
   const pathname = url.pathname;
   for (let n = 0; n < pathname.length; n++) {
     if (pathname[n] === '%') {
-      const third = pathname.charAt(pathname, n + 2) | 0x20;
+      const third = pathname.charCodeAt(n + 2) | 0x20;
       if (pathname[n + 1] === '2' && third === 102) {
         throw new Error('pathname must not include encoded / characters');
       }
diff --git a/src/next/streams.ts b/src/next/streams.ts
index bfa37c849e14fd575caddde3fc29c4a98d3277b9..1087d844dc80dc4bce80c2b54ce41659c7d451b5 100644
--- a/src/next/streams.ts
+++ b/src/next/streams.ts
@@ -5,7 +5,7 @@ export class FileSystemReadableStreamSource implements UnderlyingByteSource {
   size: number = 1024;
   type = 'bytes' as const;
 
-  constructor(handle) {
+  constructor(handle: FileHandle) {
     this.handle = handle;
   }
 
@@ -15,7 +15,7 @@ export class FileSystemReadableStreamSource implements UnderlyingByteSource {
 
   pull(controller: ReadableByteStreamController) {
     const theView = controller.byobRequest?.view;
-    if (!theView) {
+    if (!theView) { 
       const bytes = this.handle.readBytes(this.size);
       if (bytes.length === 0) {
         controller.close();
@@ -36,6 +36,7 @@ export class FileSystemReadableStreamSource implements UnderlyingByteSource {
       theView.set(bytes, theView.byteOffset);
     } else {
       for (let i = 0; i < bytes.length; i++) {
+        // @ts-ignore
         theView[i + theView.byteOffset] = bytes[i];
       }
     }
@@ -46,7 +47,7 @@ export class FileSystemReadableStreamSource implements UnderlyingByteSource {
 export class FileSystemWritableSink implements UnderlyingSink {
   handle: FileHandle;
 
-  constructor(handle) {
+  constructor(handle: FileHandle) {
     this.handle = handle;
   }
 

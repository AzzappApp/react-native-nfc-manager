diff --git a/android/src/main/java/expo/modules/contacts/ContactsModule.kt b/android/src/main/java/expo/modules/contacts/ContactsModule.kt
index 4461b9f5d90ec2fd37938eed1ff5ce63bda6b239..410b498d19dd34bcd3c11d0ed62870b25b1991c5 100644
--- a/android/src/main/java/expo/modules/contacts/ContactsModule.kt
+++ b/android/src/main/java/expo/modules/contacts/ContactsModule.kt
@@ -244,6 +244,15 @@ class ContactsModule : Module() {
       uri.toString()
     }
 
+    AsyncFunction("displayContactAsync") { contactId: String, promise: Promise ->
+      val uri = Uri.withAppendedPath(ContactsContract.Contacts.CONTENT_URI, contactId)
+      val intent = Intent(Intent.ACTION_VIEW).apply {
+        setData(uri)
+      }
+      activity.startActivity(intent)
+      promise.resolve()
+    }
+
     AsyncFunction("presentFormAsync") { contactId: String?, contactData: Map<String, Any>?, _: Map<String, Any?>?, promise: Promise ->
       ensureReadPermission()
 
diff --git a/ios/ContactsModule.swift b/ios/ContactsModule.swift
index 9651fad9f1e51aaa76cd8b20c68fd0fdf66415e4..cf0e272aa85c3118dc2dd9aa621205abdf97e146 100644
--- a/ios/ContactsModule.swift
+++ b/ios/ContactsModule.swift
@@ -184,6 +184,43 @@ public class ContactsModule: Module, OnContactPickingResultHandler {
       return person.identifier
     }
 
+      
+      AsyncFunction("displayContactAsync") { (contactId: String, promise: Promise) -> Void in
+          // swiftlint:enable closure_body_length
+          var controller: ContactsViewController?
+          
+          if let foundContact = try? getContact(withId: contactId) {
+              controller = ContactsViewController.init(for: foundContact)
+          }
+          guard let controller else {
+              promise.reject(FailedToCreateViewControllerException())
+              return
+          }
+          
+          controller.contactStore = contactStore
+          controller.delegate = delegate
+          controller.allowsEditing = false
+          controller.allowsActions = true
+          controller.shouldShowLinkedContacts = true
+          let parent = appContext?.utilities?.currentViewController()
+          let navController = UINavigationController(rootViewController: controller)
+          controller.navigationItem.backAction = UIAction(handler: { [] action in
+              controller.dismiss(animated: true)
+          })
+          
+          presentingViewController = navController
+          let animated = true
+          
+          controller.onViewDisappeared = {
+              promise.resolve()
+              self.contactManipulationPromise = nil
+          }
+          
+          contactManipulationPromise = promise
+
+          parent?.present(navController, animated: animated)
+    }.runOnQueue(.main)
+      
     AsyncFunction("updateContactAsync") { (contact: Contact) -> String in
       let keysToFetch = contactKeysToFetch(from: nil)
       let saveRequest = CNSaveRequest()
diff --git a/src/Contacts.ts b/src/Contacts.ts
index 1fe0e51ab13a35282247eb2492b85dc62ba828b3..147e55750d166851067768689d4b569e4affd59a 100644
--- a/src/Contacts.ts
+++ b/src/Contacts.ts
@@ -612,6 +612,22 @@ export async function getContactsAsync(contactQuery: ContactQuery = {}): Promise
   return await ExpoContacts.getContactsAsync(contactQuery);
 }
 
+
+/**
+ * Displays contact details from contacts book
+ * @example
+ * ```js
+ * await Contacts.getContactsAsync(contactId);
+ *
+ * ```
+ */
+export async function displayContactAsync(contactId: string): Promise<boolean> {
+  if (!ExpoContacts.displayContactAsync) {
+    throw new UnavailabilityError('Contacts', 'displayContactAsync');
+  }
+  return await ExpoContacts.displayContactAsync(contactId);
+}
+
 export async function getPagedContactsAsync(
   contactQuery: ContactQuery = {}
 ): Promise<ContactResponse> {

diff --git a/bin.cjs b/bin.cjs
index 70941f2a5aec6dcd1218e8a699fb5aafb4025f35..41a44bf9e8c64dba8ad4128a4e617abceac2ddec 100755
--- a/bin.cjs
+++ b/bin.cjs
@@ -5430,6 +5430,7 @@ var init_mysqlSchema = __esm({
       name: stringType(),
       columns: stringType().array(),
       isUnique: booleanType(),
+      isFulltext: booleanType().optional(),
       using: enumType(["btree", "hash"]).optional(),
       algorithm: enumType(["default", "inplace", "copy"]).optional(),
       lock: enumType(["default", "none", "shared", "exclusive"]).optional()
@@ -5600,14 +5601,15 @@ var init_mysqlSchema = __esm({
     MySqlSquasher = {
       squashIdx: (idx) => {
         index.parse(idx);
-        return `${idx.name};${idx.columns.join(",")};${idx.isUnique};${idx.using ?? ""};${idx.algorithm ?? ""};${idx.lock ?? ""}`;
+        return `${idx.name};${idx.columns.join(",")};${idx.isUnique};${idx.isFulltext};${idx.using ?? ""};${idx.algorithm ?? ""};${idx.lock ?? ""}`;
       },
       unsquashIdx: (input) => {
-        const [name, columnsString, isUnique, using, algorithm, lock] = input.split(";");
+        const [name, columnsString, isUnique, isFulltext, using, algorithm, lock] = input.split(";");
         const destructed = {
           name,
           columns: columnsString.split(","),
           isUnique: isUnique === "true",
+          isFulltext: isFulltext === "true",
           using: using ? using : void 0,
           algorithm: algorithm ? algorithm : void 0,
           lock: lock ? lock : void 0
@@ -17791,6 +17793,7 @@ We have encountered a collision between the index name on columns ${source_defau
             name,
             columns: indexColumns,
             isUnique: value.config.unique ?? false,
+            isFulltext: value.config.fulltext ? value.config.fulltext : undefined,
             using: value.config.using,
             algorithm: value.config.algorythm,
             lock: value.config.lock
@@ -18049,7 +18052,7 @@ ${withStyle.errorWarning(
       const tablePks = await db.query(
         `SELECT table_name, column_name, ordinal_position
   FROM information_schema.table_constraints t
-  LEFT JOIN information_schema.key_column_usage k
+  INNER JOIN information_schema.key_column_usage k
   USING(constraint_name,table_schema,table_name)
   WHERE t.constraint_type='PRIMARY KEY'
       and table_name != '__drizzle_migrations'
@@ -18155,6 +18158,7 @@ ${withStyle.errorWarning(
         const constraintName = idxRow["INDEX_NAME"];
         const columnName = idxRow["COLUMN_NAME"];
         const isUnique = idxRow["NON_UNIQUE"] === 0;
+        const isFulltext = idxRow["INDEX_TYPE"] === "FULLTEXT" ? true : undefined;
         const tableInResult = result[tableName];
         if (typeof tableInResult === "undefined")
           continue;
@@ -18181,7 +18185,8 @@ ${withStyle.errorWarning(
               tableInResult.indexes[constraintName] = {
                 name: constraintName,
                 columns: [columnName],
-                isUnique
+                isUnique,
+                isFulltext
               };
             }
           }
@@ -21159,6 +21164,7 @@ The unique index ${source_default.underline.blue(
         const constraintName = idxRow["INDEX_NAME"];
         const columnName = idxRow["COLUMN_NAME"];
         const isUnique = idxRow["NON_UNIQUE"] === 0;
+        const isFulltext = idxRow["INDEX_TYPE"] === "FULLTEXT" ? true : undefined;
         const tableInResult = result[tableName];
         if (typeof tableInResult === "undefined")
           continue;
@@ -26537,10 +26543,10 @@ ${BREAKPOINT}ALTER TABLE ${tableNameWithSchema} ADD CONSTRAINT "${statement.newC
         return statement.type === "create_index" && dialect6 === "mysql";
       }
       convert(statement) {
-        const { name, columns, isUnique } = MySqlSquasher.unsquashIdx(
+        const { name, columns, isUnique, isFulltext } = MySqlSquasher.unsquashIdx(
           statement.data
         );
-        const indexPart = isUnique ? "UNIQUE INDEX" : "INDEX";
+        const indexPart = isFulltext ? "FULLTEXT INDEX" : isUnique ? "UNIQUE INDEX" : "INDEX";
         const uniqueString = columns.map((it) => {
           var _a, _b, _c, _d;
           return ((_a = statement.internal) == null ? void 0 : _a.indexes) ? ((_d = (_c = (_b = statement.internal) == null ? void 0 : _b.indexes[name]) == null ? void 0 : _c.columns[it]) == null ? void 0 : _d.isExpression) ? it : `\`${it}\`` : `\`${it}\``;
@@ -27596,7 +27602,7 @@ var init_jsonStatements = __esm({
             schema: schema6
           });
         }
-        if (((_d = column11.type) == null ? void 0 : _d.type) === "changed") {
+        if (((_d = column11.type) == null ? void 0 : _d.type) === "changed" && (column11.type.old !== "tinyint(1)" && column11.type.new !== "boolean")) {
           statements.push({
             type: "alter_table_alter_column_set_type",
             tableName,
@@ -27635,7 +27641,7 @@ var init_jsonStatements = __esm({
             columnPk
           });
         }
-        if (((_h = column11.default) == null ? void 0 : _h.type) === "changed") {
+        if (((_h = column11.default) == null ? void 0 : _h.type) === "changed" && column11.default.new != column11.default.old && `(${column11.default.new})` !== column11.default.old) {
           statements.push({
             type: "alter_table_alter_column_set_default",
             tableName,

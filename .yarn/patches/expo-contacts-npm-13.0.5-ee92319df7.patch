diff --git a/android/src/main/java/expo/modules/contacts/ContactsModule.kt b/android/src/main/java/expo/modules/contacts/ContactsModule.kt
index 77266bbdc437dc3bda9fb1552db4afc82ff303fb..f06d9078576b1fbac77ac6b7ffd9a79034b1347e 100644
--- a/android/src/main/java/expo/modules/contacts/ContactsModule.kt
+++ b/android/src/main/java/expo/modules/contacts/ContactsModule.kt
@@ -67,6 +67,7 @@ private val defaultFields = setOf(
 
 const val RC_EDIT_CONTACT = 2137
 const val RC_PICK_CONTACT = 2138
+const val RC_ADD_CONTACT = 2139
 
 // TODO: Evan: default API is confusing. Duplicate data being requested.
 private val DEFAULT_PROJECTION = listOf(
@@ -253,20 +254,17 @@ class ContactsModule : Module() {
       if (contactId != null) {
         val contact = getContactById(contactId, defaultFields) ?: throw ContactNotFoundException()
         presentEditForm(contact, promise)
-        return@AsyncFunction
       }
       // Create contact from supplied data.
       if (contactData != null) {
         val contact = mutateContact(null, contactData)
-        contactManipulationPromise = promise
-        presentForm(contact)
+        presentForm(contact, promise)
       }
-      promise.resolve()
     }
 
     OnActivityResult { _, payload ->
       val (requestCode, resultCode, intent) = payload
-      if (requestCode == RC_EDIT_CONTACT) {
+      if (requestCode == RC_EDIT_CONTACT || requestCode == RC_ADD_CONTACT) {
         val pendingPromise = contactManipulationPromise ?: return@OnActivityResult
 
         pendingPromise.resolve(0)
@@ -276,14 +274,12 @@ class ContactsModule : Module() {
       if (requestCode == RC_PICK_CONTACT) {
         val pendingPromise = contactPickingPromise ?: return@OnActivityResult
 
-        if (resultCode == Activity.RESULT_CANCELED) {
-          pendingPromise.resolve()
-        }
-
         if (resultCode == Activity.RESULT_OK) {
           val contactId = intent?.data?.lastPathSegment
           val contact = getContactById(contactId, defaultFields)
           pendingPromise.resolve(contact?.toMap(defaultFields))
+        } else {
+          pendingPromise.resolve()
         }
 
         contactPickingPromise = null
@@ -303,12 +299,12 @@ class ContactsModule : Module() {
     }
   }
 
-  private fun presentForm(contact: Contact) {
+  private fun presentForm(contact: Contact, promise: Promise) {
     val intent = Intent(Intent.ACTION_INSERT, ContactsContract.Contacts.CONTENT_URI)
     intent.putExtra(ContactsContract.Intents.Insert.NAME, contact.getFinalDisplayName())
     intent.putParcelableArrayListExtra(ContactsContract.Intents.Insert.DATA, contact.contentValues)
-    intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK
-    activity.startActivity(intent)
+    contactManipulationPromise = promise
+    activity.startActivityForResult(intent, RC_ADD_CONTACT)
   }
 
   private fun presentEditForm(contact: Contact, promise: Promise) {
diff --git a/android/src/main/java/expo/modules/contacts/models/DateModel.kt b/android/src/main/java/expo/modules/contacts/models/DateModel.kt
index 9ff83690ab4d7ceec1e8e0142b5f08fd3101fc5d..c8ff38d88b777b2a198329966e0995042397da2a 100644
--- a/android/src/main/java/expo/modules/contacts/models/DateModel.kt
+++ b/android/src/main/java/expo/modules/contacts/models/DateModel.kt
@@ -1,7 +1,10 @@
 package expo.modules.contacts.models
 
+import android.content.ContentProviderOperation
 import android.database.Cursor
+import android.provider.ContactsContract
 import android.provider.ContactsContract.CommonDataKinds
+import android.util.Log
 import expo.modules.contacts.Columns
 import java.text.SimpleDateFormat
 import java.util.Calendar
@@ -22,7 +25,7 @@ class DateModel : BaseModel() {
 
   override fun fromMap(readableMap: Map<String, Any?>) {
     super.fromMap(readableMap)
-    val dateString = readableMap["date"] as String?
+    val dateString = parseDateFromMap(readableMap) as String?
     val hasYear = !dateString!!.startsWith("--")
     val calendar = Calendar.getInstance()
     val datePattern = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
@@ -53,4 +56,49 @@ class DateModel : BaseModel() {
         else -> "unknown"
       }
   }
+
+  override fun getInsertOperation(rawId: String?): ContentProviderOperation {
+    val op = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
+    if (rawId == null) {
+      op.withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
+    } else {
+      op.withValue(ContactsContract.Data.RAW_CONTACT_ID, rawId)
+    }
+
+    return op.withValue(Columns.MIMETYPE, contentType)
+            .withValue(ContactsContract.CommonDataKinds.Event.TYPE, mapStringToType(label))
+            .withValue(ContactsContract.CommonDataKinds.Event.START_DATE, formatDateString())
+            .withValue(ContactsContract.CommonDataKinds.Event.LABEL, label)
+            .build()
+  }
+
+  private fun parseDateFromMap(dateMap: Map<String, Any?>): String? {
+    val year = (dateMap["year"] as? Double)?.toInt()
+    val month = (dateMap["month"] as? Double)?.toInt()
+    val day = (dateMap["day"] as? Double)?.toInt()
+
+    return if (year != null && month != null && day != null) {
+      val calendar = Calendar.getInstance()
+      calendar.set(Calendar.YEAR, year)
+      calendar.set(Calendar.MONTH, month) 
+      calendar.set(Calendar.DAY_OF_MONTH, day)
+
+      val dateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
+      dateFormat.format(calendar.time)
+    } else {
+      null
+    }
+  }
+
+  private fun formatDateString(): String? {
+    val year = map.getInt("year", -1)
+    val month = map.getInt("month", -1)
+    val day = map.getInt("day", -1)
+
+    return if (year > 0 && month > 0 && day > 0) {
+      String.format(Locale.getDefault(), "%04d-%02d-%02d", year, month, day)
+    } else {
+      null
+    }
+  }
 }

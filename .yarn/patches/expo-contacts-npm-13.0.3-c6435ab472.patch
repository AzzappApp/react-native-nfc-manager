diff --git a/ios/Decoding.swift b/ios/Decoding.swift
index 49d6f4866553a83dd1eab0d665e6c12609e03cde..44a9269c0579cbcfbe557c5c56a1afd0da481154 100644
--- a/ios/Decoding.swift
+++ b/ios/Decoding.swift
@@ -34,13 +34,13 @@ func decodeSocialProfiles(_ input: [SocialProfile]?) -> [CNLabeledValue<CNSocial
   var output = [CNLabeledValue<CNSocialProfile>]()
   for item in input {
     let label = decodeLabel(label: item.label)
-    if let urlString = item.url,
-    let username = item.username,
-    let userId = item.userId,
-    let service = item.service {
-      let profile = CNSocialProfile(urlString: urlString.path, username: username, userIdentifier: userId, service: service)
-      output.append(CNLabeledValue(label: label, value: profile))
-    }
+    let urlString = item.url
+    let username = item.username
+    let userId = item.userId
+    let service = item.service
+      
+    let profile = CNSocialProfile(urlString: urlString?.path(), username: username, userIdentifier: userId, service: service)
+    output.append(CNLabeledValue(label: label, value: profile))
   }
   return output
 }
@@ -69,7 +69,7 @@ func decodeUrlAddresses(_ input: [UrlAddress]?) -> [CNLabeledValue<NSString>]? {
   var output = [CNLabeledValue<NSString>]()
   for item in input {
     let label = decodeUrlAddressLabel(item.label)
-    if let urlString = item.url?.path {
+    if let urlString = item.url?.formatted() {
       output.append(CNLabeledValue(label: label, value: urlString as NSString))
     }
   }
diff --git a/ios/Serialization.swift b/ios/Serialization.swift
index 0cbed547fb4380dc9f2edc31051589277a511ae3..bc217048efbae64641e8bec874c6120b21defc02 100644
--- a/ios/Serialization.swift
+++ b/ios/Serialization.swift
@@ -236,7 +236,7 @@ func serializeContact(person: CNContact, keys: [String]?, directory: URL?) throw
     contact[ContactsKey.jobTitle] = person.jobTitle
   }
   if fieldHasValue(field: person.departmentName) {
-    contact[ContactsKey.department] = person.dates
+    contact[ContactsKey.department] = person.departmentName
   }
 
   if keysToFetch.contains(CNContactNamePrefixKey) && fieldHasValue(field: person.namePrefix) {
diff --git a/android/src/main/java/expo/modules/contacts/models/DateModel.kt b/android/src/main/java/expo/modules/contacts/models/DateModel.kt
index 9ff83690ab4d7ceec1e8e0142b5f08fd3101fc5d..0bf5159cf03c4d766fa68183a0994f1393c9d645 100644
--- a/android/src/main/java/expo/modules/contacts/models/DateModel.kt
+++ b/android/src/main/java/expo/modules/contacts/models/DateModel.kt
@@ -1,7 +1,10 @@
 package expo.modules.contacts.models
 
+import android.content.ContentProviderOperation
 import android.database.Cursor
+import android.provider.ContactsContract
 import android.provider.ContactsContract.CommonDataKinds
+import android.util.Log
 import expo.modules.contacts.Columns
 import java.text.SimpleDateFormat
 import java.util.Calendar
@@ -22,7 +25,9 @@ class DateModel : BaseModel() {
 
   override fun fromMap(readableMap: Map<String, Any?>) {
     super.fromMap(readableMap)
-    val dateString = readableMap["date"] as String?
+    val dateString = parseDateFromMap(readableMap) as String?
+
+    // TODO: Given the current situation, I don't think this condition can be met, right?
     val hasYear = !dateString!!.startsWith("--")
     val calendar = Calendar.getInstance()
     val datePattern = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
@@ -53,4 +58,49 @@ class DateModel : BaseModel() {
         else -> "unknown"
       }
   }
+
+  override fun getInsertOperation(rawId: String?): ContentProviderOperation {
+    val op = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
+    if (rawId == null) {
+      op.withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
+    } else {
+      op.withValue(ContactsContract.Data.RAW_CONTACT_ID, rawId)
+    }
+
+    return op.withValue(Columns.MIMETYPE, contentType)
+            .withValue(ContactsContract.CommonDataKinds.Event.TYPE, mapStringToType(label))
+            .withValue(ContactsContract.CommonDataKinds.Event.START_DATE, formatDateString())
+            .withValue(ContactsContract.CommonDataKinds.Event.LABEL, label)
+            .build()
+  }
+
+  private fun parseDateFromMap(dateMap: Map<String, Any?>): String? {
+    val year = (dateMap["year"] as? Double)?.toInt()
+    val month = (dateMap["month"] as? Double)?.toInt()
+    val day = (dateMap["day"] as? Double)?.toInt()
+
+    return if (year != null && month != null && day != null) {
+      val calendar = Calendar.getInstance()
+      calendar.set(Calendar.YEAR, year)
+      calendar.set(Calendar.MONTH, month) 
+      calendar.set(Calendar.DAY_OF_MONTH, day)
+
+      val dateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
+      dateFormat.format(calendar.time)
+    } else {
+      null
+    }
+  }
+
+  private fun formatDateString(): String? {
+    val year = map.getInt("year", -1)
+    val month = map.getInt("month", -1)
+    val day = map.getInt("day", -1)
+
+    return if (year > 0 && month > 0 && day > 0) {
+      String.format(Locale.getDefault(), "%04d-%02d-%02d", year, month, day)
+    } else {
+      null
+    }
+  }
 }

diff --git a/node_modules/drizzle-kit/index.cjs b/node_modules/drizzle-kit/index.cjs
index d608580..ca9e3c0 100755
--- a/node_modules/drizzle-kit/index.cjs
+++ b/node_modules/drizzle-kit/index.cjs
@@ -4561,6 +4561,7 @@ var init_mysqlSchema = __esm({
       name: stringType(),
       columns: stringType().array(),
       isUnique: booleanType(),
+      isFulltext: booleanType().optional(),
       using: enumType(["btree", "hash"]).optional(),
       algorithm: enumType(["default", "inplace", "copy"]).optional(),
       lock: enumType(["default", "none", "shared", "exclusive"]).optional()
@@ -4686,14 +4687,15 @@ var init_mysqlSchema = __esm({
     MySqlSquasher = {
       squashIdx: (idx) => {
         index.parse(idx);
-        return `${idx.name};${idx.columns.join(",")};${idx.isUnique};${idx.using ?? ""};${idx.algorithm ?? ""};${idx.lock ?? ""}`;
+        return `${idx.name};${idx.columns.join(",")};${idx.isUnique};${idx.isFulltext};${idx.using ?? ""};${idx.algorithm ?? ""};${idx.lock ?? ""}`;
       },
       unsquashIdx: (input) => {
-        const [name, columnsString, isUnique, using, algorithm, lock] = input.split(";");
+        const [name, columnsString, isUnique, isFulltext, using, algorithm, lock] = input.split(";");
         const destructed = {
           name,
           columns: columnsString.split(","),
           isUnique: isUnique === "true",
+          isFulltext: isFulltext === "true",
           using: using ? using : void 0,
           algorithm: algorithm ? algorithm : void 0,
           lock: lock ? lock : void 0
@@ -11742,6 +11744,7 @@ We have encountered a collision between the index name on columns ${source_defau
             name,
             columns: indexColumns,
             isUnique: value.config.unique ?? false,
+            isFulltext: value.config.fulltext ? value.config.fulltext : undefined,
             using: value.config.using,
             algorithm: value.config.algorythm,
             lock: value.config.lock
@@ -11871,7 +11874,7 @@ We have encountered a collision between the index name on columns ${source_defau
       const tablePks = await db.execute(
         `SELECT table_name, column_name
   FROM information_schema.table_constraints t
-  LEFT JOIN information_schema.key_column_usage k
+  INNER JOIN information_schema.key_column_usage k
   USING(constraint_name,table_schema,table_name)
   WHERE t.constraint_type='PRIMARY KEY'
       and table_name != '__drizzle_migrations'
@@ -11971,6 +11974,7 @@ We have encountered a collision between the index name on columns ${source_defau
         const constraintName = idxRow["INDEX_NAME"];
         const columnName = idxRow["COLUMN_NAME"];
         const isUnique = idxRow["NON_UNIQUE"] === 0;
+        const isFulltext = idxRow["INDEX_TYPE"] === "FULLTEXT" ? true : undefined;
         const tableInResult = result[tableName];
         if (typeof tableInResult === "undefined")
           continue;
@@ -11999,7 +12003,8 @@ We have encountered a collision between the index name on columns ${source_defau
               tableInResult.indexes[constraintName] = {
                 name: constraintName,
                 columns: [columnName],
-                isUnique
+                isUnique,
+                isFulltext
               };
             }
           }
@@ -16112,10 +16117,10 @@ ${BREAKPOINT}ALTER TABLE ${tableNameWithSchema} ADD CONSTRAINT ${statement.newCo
         return statement.type === "create_index" && dialect6 === "mysql";
       }
       convert(statement) {
-        const { name, columns, isUnique } = MySqlSquasher.unsquashIdx(
+        const { name, columns, isUnique, isFulltext } = MySqlSquasher.unsquashIdx(
           statement.data
         );
-        const indexPart = isUnique ? "UNIQUE INDEX" : "INDEX";
+        const indexPart = isFulltext ? "FULLTEXT INDEX" : isUnique ? "UNIQUE INDEX" : "INDEX";
         const value = columns.map((it) => `\`${it}\``).join(",");
         return `CREATE ${indexPart} \`${name}\` ON \`${statement.tableName}\` (${value});`;
       }
@@ -16644,7 +16649,7 @@ var init_jsonStatements = __esm({
             schema: schema4
           });
         }
-        if (((_d = column7.type) == null ? void 0 : _d.type) === "changed") {
+        if (((_d = column7.type) == null ? void 0 : _d.type) === "changed"  && (column7.type.old !== "tinyint" && column7.type.new !== "boolean")) {
           statements.push({
             type: "alter_table_alter_column_set_type",
             tableName,
@@ -16682,7 +16687,7 @@ var init_jsonStatements = __esm({
             columnPk
           });
         }
-        if (((_h = column7.default) == null ? void 0 : _h.type) === "changed") {
+        if (((_h = column7.default) == null ? void 0 : _h.type) === "changed" && (column7.type?.old !== "tinyint" || column7.default.new != column7.default.old)) {
           statements.push({
             type: "alter_table_alter_column_set_default",
             tableName,
@@ -17214,7 +17219,7 @@ var init_snapshotsDiffer = __esm({
       const jsonCreateIndexesForCreatedTables = created.map((it) => {
         return prepareCreateIndexesJson(it.name, it.schema, it.indexes);
       }).flat();
-      const jsonDropTables = deleted.map((it) => {
+      const jsonDropTables = deleted.filter(it => !it.name.endsWith('_vrepl') && !it.name.startsWith('_vt_')).map((it) => {
         return prepareDropTableJson(it);
       });
       const jsonRenameTables = renamed.map((it) => {
